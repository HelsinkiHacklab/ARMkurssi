
nucleo-f303_freeRTOS-EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800a788  0800a788  0001a788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad70  0800ad70  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad70  0800ad70  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad70  0800ad70  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ad70  0800ad70  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ad80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001dc  0800af5c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  0800af5c  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015294  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002709  00000000  00000000  000354a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  00037bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  000386f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021554  00000000  00000000  00039128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aed4  00000000  00000000  0005a67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b78d9  00000000  00000000  00065550  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ce29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000573c  00000000  00000000  0011cea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a76c 	.word	0x0800a76c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a76c 	.word	0x0800a76c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <_ZN6eepromC1EhP12GPIO_TypeDeft>:
#include <time.h>
#include "eeprom.h"

const uint8_t BLOCKSIZE=32;	// kerralla kirjoitettavan muistiblokin maksimikoko

eeprom::eeprom(uint8_t i2cAddress, GPIO_TypeDef* wePort, uint16_t wePin) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	72fb      	strb	r3, [r7, #11]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	813b      	strh	r3, [r7, #8]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <_ZN6eepromC1EhP12GPIO_TypeDeft+0x48>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	601a      	str	r2, [r3, #0]
	i2caddr = i2cAddress;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	7afa      	ldrb	r2, [r7, #11]
 8000cb6:	72da      	strb	r2, [r3, #11]
	weport = wePort;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	605a      	str	r2, [r3, #4]
	wepin = wePin;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	893a      	ldrh	r2, [r7, #8]
 8000cc2:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(weport, wepin, GPIO_PIN_SET); //kirjoitussuojaus päälle oletuksena
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6858      	ldr	r0, [r3, #4]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	891b      	ldrh	r3, [r3, #8]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f001 fcb8 	bl	8002644 <HAL_GPIO_WritePin>
}
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0800a938 	.word	0x0800a938

08000ce4 <_ZN6eepromD1Ev>:

eeprom::~eeprom() {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <_ZN6eepromD1Ev+0x1c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	0800a938 	.word	0x0800a938

08000d04 <_ZN6eepromD0Ev>:
eeprom::~eeprom() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
}
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ffe9 	bl	8000ce4 <_ZN6eepromD1Ev>
 8000d12:	210c      	movs	r1, #12
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f004 ff23 	bl	8005b60 <_ZdlPvj>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN6eeprom4readEtPht>:

// lukee eeprommista annettuun puskuriin halutun tavumäärän
// Palauttaa TRUE jos onnistu, muuten false.
// Mahdollinen virhe saadaan kutsumalla eeprom::getError()
bool eeprom::read(uint16_t memAddr, uint8_t *bufAddr, uint16_t bufSize) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	460b      	mov	r3, r1
 8000d32:	817b      	strh	r3, [r7, #10]
 8000d34:	4613      	mov	r3, r2
 8000d36:	813b      	strh	r3, [r7, #8]
	uint16_t memaddr;
	// muisti on Big Endian joten vaihdetaan osoitteen tavut ristiin
	memaddr = __builtin_bswap16(memAddr);
 8000d38:	897b      	ldrh	r3, [r7, #10]
 8000d3a:	ba5b      	rev16	r3, r3
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	82fb      	strh	r3, [r7, #22]

	// Lähetetään osoite muistille jotta sen sisäinen osoiterekisteri asettuu halutuksi
	// Rekisteri on autoinkrementoiva, joten se kasvaa sitä mukaa kuin tavuja luetaan
	HAL_I2C_Master_Transmit(&hi2c1, i2caddr, (uint8_t *)&memaddr, sizeof(memaddr), 0xffffffff );
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	7adb      	ldrb	r3, [r3, #11]
 8000d44:	b299      	uxth	r1, r3
 8000d46:	f107 0216 	add.w	r2, r7, #22
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2302      	movs	r3, #2
 8000d52:	480f      	ldr	r0, [pc, #60]	; (8000d90 <_ZN6eeprom4readEtPht+0x6c>)
 8000d54:	f001 fd1e 	bl	8002794 <HAL_I2C_Master_Transmit>

	Error = HAL_I2C_Master_Receive(&hi2c1, i2caddr, bufAddr, bufSize, 0xffffffff );
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	7adb      	ldrb	r3, [r3, #11]
 8000d5c:	b299      	uxth	r1, r3
 8000d5e:	893a      	ldrh	r2, [r7, #8]
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4613      	mov	r3, r2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <_ZN6eeprom4readEtPht+0x6c>)
 8000d6c:	f001 fe06 	bl	800297c <HAL_I2C_Master_Receive>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	729a      	strb	r2, [r3, #10]
	if (Error != HAL_OK) return false;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	7a9b      	ldrb	r3, [r3, #10]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <_ZN6eeprom4readEtPht+0x60>
 8000d80:	2300      	movs	r3, #0
 8000d82:	e000      	b.n	8000d86 <_ZN6eeprom4readEtPht+0x62>
	else return true;
 8000d84:	2301      	movs	r3, #1

}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001f8 	.word	0x200001f8

08000d94 <_ZN6eeprom5writeEtPht>:

bool eeprom::write(uint16_t memAddr, uint8_t *bufAddr, uint16_t bufSize) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b092      	sub	sp, #72	; 0x48
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	460b      	mov	r3, r1
 8000da2:	817b      	strh	r3, [r7, #10]
 8000da4:	4613      	mov	r3, r2
 8000da6:	813b      	strh	r3, [r7, #8]
	uint16_t addr, memaddr;
	uint8_t wrBuffer[BLOCKSIZE+2];
	uint16_t wrBlockCount, numWrBlocks;
	uint8_t firstBlockSize, lastBlockSize;

	addr = memAddr;
 8000da8:	897b      	ldrh	r3, [r7, #10]
 8000daa:	87fb      	strh	r3, [r7, #62]	; 0x3e
	HAL_GPIO_WritePin(weport, wepin, GPIO_PIN_RESET); //kirjoitussuojaus pois
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6858      	ldr	r0, [r3, #4]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	891b      	ldrh	r3, [r3, #8]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	f001 fc44 	bl	8002644 <HAL_GPIO_WritePin>

	// kirjoitetaan muisti, MUTTA: EEPROM:in sisäinen puskuri on max 32 tavua ja vielä niin, että
	// yksi kirjoituskerta ei voi ylittää 32-tavuisen lohkon rajaa muistin alusta asti laskettuna.
	// Eli koko muisti on jaettu peräkkäisiin 32 tavun lohkoihin ja kertakirjoitus voi olla max 1 lohko
	// eikä rajaa saa ylittää
	firstBlockSize = BLOCKSIZE - (memAddr % BLOCKSIZE);	// lasketaan mahdollisen ekan vajaan puskurin koko
 8000dbc:	897b      	ldrh	r3, [r7, #10]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f1c3 0320 	rsb	r3, r3, #32
 8000dca:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	if (firstBlockSize >= bufSize) {
 8000dce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000dd2:	893b      	ldrh	r3, [r7, #8]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	db05      	blt.n	8000de4 <_ZN6eeprom5writeEtPht+0x50>
		lastBlockSize = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		numWrBlocks = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8000de2:	e020      	b.n	8000e26 <_ZN6eeprom5writeEtPht+0x92>
	}
	else {
		lastBlockSize = (memAddr+bufSize) % BLOCKSIZE;		// ja mahdollisen vikan vajaan puskurin koko
 8000de4:	897b      	ldrh	r3, [r7, #10]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	893b      	ldrh	r3, [r7, #8]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		if ( firstBlockSize + lastBlockSize == bufSize ) numWrBlocks = 0;
 8000df8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000dfc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000e00:	441a      	add	r2, r3
 8000e02:	893b      	ldrh	r3, [r7, #8]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d102      	bne.n	8000e0e <_ZN6eeprom5writeEtPht+0x7a>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8000e0c:	e00b      	b.n	8000e26 <_ZN6eeprom5writeEtPht+0x92>
		else numWrBlocks = (bufSize-firstBlockSize-lastBlockSize) / BLOCKSIZE;
 8000e0e:	893a      	ldrh	r2, [r7, #8]
 8000e10:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e14:	1ad2      	subs	r2, r2, r3
 8000e16:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da00      	bge.n	8000e22 <_ZN6eeprom5writeEtPht+0x8e>
 8000e20:	331f      	adds	r3, #31
 8000e22:	115b      	asrs	r3, r3, #5
 8000e24:	877b      	strh	r3, [r7, #58]	; 0x3a
	}
	// kirjoitetaan ensimmäinen (vajaa) blokki
	if ( firstBlockSize ) {
 8000e26:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d037      	beq.n	8000e9e <_ZN6eeprom5writeEtPht+0x10a>
		// muisti on Big Endian joten vaihdetaan osoitteen tavut ristiin
		memaddr = __builtin_bswap16(addr);
 8000e2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000e30:	ba5b      	rev16	r3, r3
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	86fb      	strh	r3, [r7, #54]	; 0x36
		memcpy(wrBuffer, &memaddr, sizeof(memaddr));
 8000e36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e38:	82bb      	strh	r3, [r7, #20]
		memcpy(&wrBuffer[2],bufAddr,firstBlockSize);
 8000e3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	3302      	adds	r3, #2
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 f896 	bl	8005f78 <memcpy>
		Error = HAL_I2C_Master_Transmit(&hi2c1, i2caddr, wrBuffer, sizeof(memaddr)+firstBlockSize, 0xffffffff );
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	7adb      	ldrb	r3, [r3, #11]
 8000e50:	b299      	uxth	r1, r3
 8000e52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3302      	adds	r3, #2
 8000e5a:	b298      	uxth	r0, r3
 8000e5c:	f107 0214 	add.w	r2, r7, #20
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4603      	mov	r3, r0
 8000e68:	4848      	ldr	r0, [pc, #288]	; (8000f8c <_ZN6eeprom5writeEtPht+0x1f8>)
 8000e6a:	f001 fc93 	bl	8002794 <HAL_I2C_Master_Transmit>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	729a      	strb	r2, [r3, #10]
		if ( Error ) return false;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	7a9b      	ldrb	r3, [r3, #10]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <_ZN6eeprom5writeEtPht+0xee>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e07f      	b.n	8000f82 <_ZN6eeprom5writeEtPht+0x1ee>
		HAL_Delay(50);
 8000e82:	2032      	movs	r0, #50	; 0x32
 8000e84:	f000 ffbc 	bl	8001e00 <HAL_Delay>
		addr += firstBlockSize;
 8000e88:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000e90:	4413      	add	r3, r2
 8000e92:	87fb      	strh	r3, [r7, #62]	; 0x3e
		bufAddr += firstBlockSize;
 8000e94:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	607b      	str	r3, [r7, #4]
	}
	// kirjoitetaan täydet blokit
	for ( wrBlockCount = 0; wrBlockCount < numWrBlocks; wrBlockCount++ ) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000ea2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000ea4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d231      	bcs.n	8000f0e <_ZN6eeprom5writeEtPht+0x17a>
		memaddr =  __builtin_bswap16(addr);
 8000eaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000eac:	ba5b      	rev16	r3, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	86fb      	strh	r3, [r7, #54]	; 0x36
		memcpy(wrBuffer, &memaddr, sizeof(memaddr));
 8000eb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000eb4:	82bb      	strh	r3, [r7, #20]
		memcpy(&wrBuffer[2],bufAddr,firstBlockSize);
 8000eb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f005 f858 	bl	8005f78 <memcpy>
		Error = HAL_I2C_Master_Transmit(&hi2c1, i2caddr, wrBuffer, sizeof(memaddr)+BLOCKSIZE, 0xffffffff );
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	7adb      	ldrb	r3, [r3, #11]
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	f107 0214 	add.w	r2, r7, #20
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2322      	movs	r3, #34	; 0x22
 8000eda:	482c      	ldr	r0, [pc, #176]	; (8000f8c <_ZN6eeprom5writeEtPht+0x1f8>)
 8000edc:	f001 fc5a 	bl	8002794 <HAL_I2C_Master_Transmit>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	729a      	strb	r2, [r3, #10]
		if ( Error ) return false;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	7a9b      	ldrb	r3, [r3, #10]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <_ZN6eeprom5writeEtPht+0x160>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e046      	b.n	8000f82 <_ZN6eeprom5writeEtPht+0x1ee>
		HAL_Delay(50);
 8000ef4:	2032      	movs	r0, #50	; 0x32
 8000ef6:	f000 ff83 	bl	8001e00 <HAL_Delay>
		addr += BLOCKSIZE;
 8000efa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000efc:	3320      	adds	r3, #32
 8000efe:	87fb      	strh	r3, [r7, #62]	; 0x3e
		bufAddr += BLOCKSIZE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3320      	adds	r3, #32
 8000f04:	607b      	str	r3, [r7, #4]
	for ( wrBlockCount = 0; wrBlockCount < numWrBlocks; wrBlockCount++ ) {
 8000f06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000f08:	3301      	adds	r3, #1
 8000f0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000f0c:	e7c9      	b.n	8000ea2 <_ZN6eeprom5writeEtPht+0x10e>
	}
	// kirjoitetaan viimeinen (vajaa) blokki
	if ( lastBlockSize ) {
 8000f0e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d02c      	beq.n	8000f70 <_ZN6eeprom5writeEtPht+0x1dc>
		memaddr =  __builtin_bswap16(addr);
 8000f16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000f18:	ba5b      	rev16	r3, r3
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	86fb      	strh	r3, [r7, #54]	; 0x36
		memcpy(wrBuffer, &memaddr, sizeof(memaddr));
 8000f1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f20:	82bb      	strh	r3, [r7, #20]
		memcpy(&wrBuffer[2],bufAddr,lastBlockSize);
 8000f22:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 f822 	bl	8005f78 <memcpy>
		Error = HAL_I2C_Master_Transmit(&hi2c1, i2caddr, wrBuffer, sizeof(memaddr)+lastBlockSize, 0xffffffff );
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	7adb      	ldrb	r3, [r3, #11]
 8000f38:	b299      	uxth	r1, r3
 8000f3a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3302      	adds	r3, #2
 8000f42:	b298      	uxth	r0, r3
 8000f44:	f107 0214 	add.w	r2, r7, #20
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <_ZN6eeprom5writeEtPht+0x1f8>)
 8000f52:	f001 fc1f 	bl	8002794 <HAL_I2C_Master_Transmit>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	729a      	strb	r2, [r3, #10]
		if ( Error ) return false;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	7a9b      	ldrb	r3, [r3, #10]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZN6eeprom5writeEtPht+0x1d6>
 8000f66:	2300      	movs	r3, #0
 8000f68:	e00b      	b.n	8000f82 <_ZN6eeprom5writeEtPht+0x1ee>
		HAL_Delay(50);
 8000f6a:	2032      	movs	r0, #50	; 0x32
 8000f6c:	f000 ff48 	bl	8001e00 <HAL_Delay>
	}
	HAL_GPIO_WritePin(weport, wepin, GPIO_PIN_SET); //kirjoitussuojaus päälle
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6858      	ldr	r0, [r3, #4]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f001 fb62 	bl	8002644 <HAL_GPIO_WritePin>
	return true;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3740      	adds	r7, #64	; 0x40
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001f8 	.word	0x200001f8

08000f90 <_ZN6eeprom5printEt>:

#define ROW_LENGTH 16
#define PRINT_ROWS 16
void eeprom::print( uint16_t memAddr ) {
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	b09f      	sub	sp, #124	; 0x7c
 8000f94:	af0e      	add	r7, sp, #56	; 0x38
 8000f96:	6278      	str	r0, [r7, #36]	; 0x24
 8000f98:	460b      	mov	r3, r1
 8000f9a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t rdBuffer[16];
	memAddr /= ROW_LENGTH;
 8000f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	847b      	strh	r3, [r7, #34]	; 0x22
	memAddr *= ROW_LENGTH;
 8000fa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	847b      	strh	r3, [r7, #34]	; 0x22
	for( uint8_t cnt = 0; cnt < PRINT_ROWS; cnt++ ) {
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000fae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	f200 808d 	bhi.w	80010d2 <_ZN6eeprom5printEt+0x142>
		read(memAddr, rdBuffer, ROW_LENGTH);
 8000fb8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fbc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fc2:	f7ff feaf 	bl	8000d24 <_ZN6eeprom4readEtPht>
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000fc6:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8000fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fcc:	469c      	mov	ip, r3
			rdBuffer[1], rdBuffer[2], rdBuffer[3], rdBuffer[4], rdBuffer[5], rdBuffer[6], rdBuffer[7], rdBuffer[8], \
 8000fce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000fd2:	469e      	mov	lr, r3
			rdBuffer[1], rdBuffer[2], rdBuffer[3], rdBuffer[4], rdBuffer[5], rdBuffer[6], rdBuffer[7], rdBuffer[8], \
 8000fd4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000fd8:	461d      	mov	r5, r3
			rdBuffer[1], rdBuffer[2], rdBuffer[3], rdBuffer[4], rdBuffer[5], rdBuffer[6], rdBuffer[7], rdBuffer[8], \
 8000fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000fde:	461e      	mov	r6, r3
			rdBuffer[1], rdBuffer[2], rdBuffer[3], rdBuffer[4], rdBuffer[5], rdBuffer[6], rdBuffer[7], rdBuffer[8], \
 8000fe0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000fe4:	61fb      	str	r3, [r7, #28]
			rdBuffer[1], rdBuffer[2], rdBuffer[3], rdBuffer[4], rdBuffer[5], rdBuffer[6], rdBuffer[7], rdBuffer[8], \
 8000fe6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000fea:	61bb      	str	r3, [r7, #24]
			rdBuffer[1], rdBuffer[2], rdBuffer[3], rdBuffer[4], rdBuffer[5], rdBuffer[6], rdBuffer[7], rdBuffer[8], \
 8000fec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000ff0:	617b      	str	r3, [r7, #20]
			rdBuffer[1], rdBuffer[2], rdBuffer[3], rdBuffer[4], rdBuffer[5], rdBuffer[6], rdBuffer[7], rdBuffer[8], \
 8000ff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000ff6:	613b      	str	r3, [r7, #16]
			rdBuffer[1], rdBuffer[2], rdBuffer[3], rdBuffer[4], rdBuffer[5], rdBuffer[6], rdBuffer[7], rdBuffer[8], \
 8000ff8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8000ffc:	60fb      	str	r3, [r7, #12]
			rdBuffer[9], rdBuffer[10], rdBuffer[11], rdBuffer[12], rdBuffer[13], rdBuffer[14], rdBuffer[15]);
 8000ffe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8001002:	60bb      	str	r3, [r7, #8]
			rdBuffer[9], rdBuffer[10], rdBuffer[11], rdBuffer[12], rdBuffer[13], rdBuffer[14], rdBuffer[15]);
 8001004:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8001008:	607b      	str	r3, [r7, #4]
			rdBuffer[9], rdBuffer[10], rdBuffer[11], rdBuffer[12], rdBuffer[13], rdBuffer[14], rdBuffer[15]);
 800100a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 800100e:	603b      	str	r3, [r7, #0]
			rdBuffer[9], rdBuffer[10], rdBuffer[11], rdBuffer[12], rdBuffer[13], rdBuffer[14], rdBuffer[15]);
 8001010:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8001014:	4618      	mov	r0, r3
			rdBuffer[9], rdBuffer[10], rdBuffer[11], rdBuffer[12], rdBuffer[13], rdBuffer[14], rdBuffer[15]);
 8001016:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 800101a:	4619      	mov	r1, r3
			rdBuffer[9], rdBuffer[10], rdBuffer[11], rdBuffer[12], rdBuffer[13], rdBuffer[14], rdBuffer[15]);
 800101c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8001020:	461a      	mov	r2, r3
			rdBuffer[9], rdBuffer[10], rdBuffer[11], rdBuffer[12], rdBuffer[13], rdBuffer[14], rdBuffer[15]);
 8001022:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
		printf("%04x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x  ", memAddr, rdBuffer[0], \
 8001026:	930d      	str	r3, [sp, #52]	; 0x34
 8001028:	920c      	str	r2, [sp, #48]	; 0x30
 800102a:	910b      	str	r1, [sp, #44]	; 0x2c
 800102c:	900a      	str	r0, [sp, #40]	; 0x28
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	9209      	str	r2, [sp, #36]	; 0x24
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	9208      	str	r2, [sp, #32]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	9207      	str	r2, [sp, #28]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	9206      	str	r2, [sp, #24]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	9205      	str	r2, [sp, #20]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	9204      	str	r2, [sp, #16]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	9203      	str	r2, [sp, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	9601      	str	r6, [sp, #4]
 8001050:	9500      	str	r5, [sp, #0]
 8001052:	4673      	mov	r3, lr
 8001054:	4662      	mov	r2, ip
 8001056:	4621      	mov	r1, r4
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <_ZN6eeprom5printEt+0x14c>)
 800105a:	f005 fe9f 	bl	8006d9c <iprintf>
		for ( uint8_t cnt2 = 0; cnt2 < ROW_LENGTH; cnt2++ ) {
 800105e:	2300      	movs	r3, #0
 8001060:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001064:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d826      	bhi.n	80010ba <_ZN6eeprom5printEt+0x12a>
			if ( rdBuffer[cnt2] >= 0x20 && rdBuffer[cnt2] < 0x80 ) printf("%c", rdBuffer[cnt2]);
 800106c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001070:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001074:	4413      	add	r3, r2
 8001076:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800107a:	2b1f      	cmp	r3, #31
 800107c:	d914      	bls.n	80010a8 <_ZN6eeprom5printEt+0x118>
 800107e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001082:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001086:	4413      	add	r3, r2
 8001088:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800108c:	b25b      	sxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0a      	blt.n	80010a8 <_ZN6eeprom5printEt+0x118>
 8001092:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001096:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800109a:	4413      	add	r3, r2
 800109c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f005 fe93 	bl	8006dcc <putchar>
 80010a6:	e002      	b.n	80010ae <_ZN6eeprom5printEt+0x11e>
			else printf(".");
 80010a8:	202e      	movs	r0, #46	; 0x2e
 80010aa:	f005 fe8f 	bl	8006dcc <putchar>
		for ( uint8_t cnt2 = 0; cnt2 < ROW_LENGTH; cnt2++ ) {
 80010ae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010b2:	3301      	adds	r3, #1
 80010b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80010b8:	e7d4      	b.n	8001064 <_ZN6eeprom5printEt+0xd4>
		}
		printf("\r\n");
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <_ZN6eeprom5printEt+0x150>)
 80010bc:	f005 fef6 	bl	8006eac <puts>
		memAddr += ROW_LENGTH;
 80010c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010c2:	3310      	adds	r3, #16
 80010c4:	847b      	strh	r3, [r7, #34]	; 0x22
	for( uint8_t cnt = 0; cnt < PRINT_ROWS; cnt++ ) {
 80010c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010ca:	3301      	adds	r3, #1
 80010cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010d0:	e76d      	b.n	8000fae <_ZN6eeprom5printEt+0x1e>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3744      	adds	r7, #68	; 0x44
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010da:	bf00      	nop
 80010dc:	0800a788 	.word	0x0800a788
 80010e0:	0800a7e0 	.word	0x0800a7e0

080010e4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f004 fe43 	bl	8005d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80010f6:	4602      	mov	r2, r0
					__idx, __base); }
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4904      	ldr	r1, [pc, #16]	; (8001110 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8001102:	f000 fb56 	bl	80017b2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001106:	4603      	mov	r3, r0
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800a7e4 	.word	0x0800a7e4
 8001114:	08007d0d 	.word	0x08007d0d

08001118 <_read>:

#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

extern "C" {	// C++ ohjelmasta kutsuttaessa pitää C-kieliset kirjasto-ohjelmat kutsua eri tavalla

	int _read(int fd, char *ptr, int len) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
		if (fd == STDIN_FILENO ) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <_read+0x2e>
			HAL_UART_Receive(&huart2, reinterpret_cast<uint8_t *>(ptr), 1, HAL_MAX_DELAY);
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <_read+0x38>)
 8001134:	f004 f8cb 	bl	80052ce <HAL_UART_Receive>
			HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(ptr), 1, HAL_MAX_DELAY);
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	2201      	movs	r2, #1
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <_read+0x38>)
 8001142:	f004 f831 	bl	80051a8 <HAL_UART_Transmit>
		}
		return 1;
 8001146:	2301      	movs	r3, #1
	}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200002cc 	.word	0x200002cc

08001154 <_write>:

	int _write(int fd, char* ptr, int len) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
		HAL_StatusTypeDef hstatus;

		if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d002      	beq.n	800116c <_write+0x18>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d110      	bne.n	800118e <_write+0x3a>
		hstatus = HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(ptr) , len, HAL_MAX_DELAY);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	b29a      	uxth	r2, r3
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	480b      	ldr	r0, [pc, #44]	; (80011a4 <_write+0x50>)
 8001178:	f004 f816 	bl	80051a8 <HAL_UART_Transmit>
 800117c:	4603      	mov	r3, r0
 800117e:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <_write+0x36>
			return len;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	e008      	b.n	800119c <_write+0x48>
		else
			return EIO;
 800118a:	2305      	movs	r3, #5
 800118c:	e006      	b.n	800119c <_write+0x48>
		}
		errno = EBADF;
 800118e:	f004 fea7 	bl	8005ee0 <__errno>
 8001192:	4602      	mov	r2, r0
 8001194:	2309      	movs	r3, #9
 8001196:	6013      	str	r3, [r2, #0]
		return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
	}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200002cc 	.word	0x200002cc

080011a8 <main>:

}	// extern C

int main(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0ca      	sub	sp, #296	; 0x128
 80011ac:	af00      	add	r7, sp, #0
	uint8_t wrBuf[256];
	uint16_t wrCnt;
	int16_t ch;
	uint16_t addr;
	bool terminate = false;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	bool newLine = false;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	bool gotChars = false;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

	std::string s;
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fd96 	bl	8005cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>


	HAL_Init();
 80011c8:	f000 fdb4 	bl	8001d34 <HAL_Init>

	SystemClock_Config();
 80011cc:	f000 f91e 	bl	800140c <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 80011d0:	f000 fa34 	bl	800163c <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 80011d4:	f000 fa0c 	bl	80015f0 <_ZL11MX_DMA_Initv>
	MX_USART2_UART_Init();
 80011d8:	f000 f9d6 	bl	8001588 <_ZL19MX_USART2_UART_Initv>
	MX_I2C1_Init();
 80011dc:	f000 f986 	bl	80014ec <_ZL12MX_I2C1_Initv>


	printf("\r\nEEPROM Investigator for I2C connected EEPROM\r\n\n");
 80011e0:	4881      	ldr	r0, [pc, #516]	; (80013e8 <main+0x240>)
 80011e2:	f005 fe63 	bl	8006eac <puts>
	printf("Writing test pattern\r\n");
 80011e6:	4881      	ldr	r0, [pc, #516]	; (80013ec <main+0x244>)
 80011e8:	f005 fe60 	bl	8006eac <puts>
	for (uint16_t cnt = 0; cnt < 256; cnt++ ) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 80011f2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80011f6:	2bff      	cmp	r3, #255	; 0xff
 80011f8:	d80d      	bhi.n	8001216 <main+0x6e>
		wrBuf[cnt] = cnt;
 80011fa:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80011fe:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8001202:	b2d1      	uxtb	r1, r2
 8001204:	f107 021c 	add.w	r2, r7, #28
 8001208:	54d1      	strb	r1, [r2, r3]
	for (uint16_t cnt = 0; cnt < 256; cnt++ ) {
 800120a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800120e:	3301      	adds	r3, #1
 8001210:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8001214:	e7ed      	b.n	80011f2 <main+0x4a>
	}
	eprom.write(0, wrBuf, 256);
 8001216:	f107 021c 	add.w	r2, r7, #28
 800121a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121e:	2100      	movs	r1, #0
 8001220:	4873      	ldr	r0, [pc, #460]	; (80013f0 <main+0x248>)
 8001222:	f7ff fdb7 	bl	8000d94 <_ZN6eeprom5writeEtPht>
	eprom.write(256, wrBuf, 256);
 8001226:	f107 021c 	add.w	r2, r7, #28
 800122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	486f      	ldr	r0, [pc, #444]	; (80013f0 <main+0x248>)
 8001234:	f7ff fdae 	bl	8000d94 <_ZN6eeprom5writeEtPht>
	printf("\r\nType text lines and they will be stored in the EEPROM from address 0x100\r\n");
 8001238:	486e      	ldr	r0, [pc, #440]	; (80013f4 <main+0x24c>)
 800123a:	f005 fe37 	bl	8006eac <puts>
	printf("Typing a single '.' on a new line will terminate input\r\n\r\n");
 800123e:	486e      	ldr	r0, [pc, #440]	; (80013f8 <main+0x250>)
 8001240:	f005 fe34 	bl	8006eac <puts>
	addr = 0x100;
 8001244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001248:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	wrCnt = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	while ( !terminate ) {
 8001252:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8001256:	2b00      	cmp	r3, #0
 8001258:	d15c      	bne.n	8001314 <main+0x16c>
	  ch = getchar();
 800125a:	f004 fe47 	bl	8005eec <getchar>
 800125e:	4603      	mov	r3, r0
 8001260:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
	  if ( ch == 0x08 ) {
 8001264:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 8001268:	2b08      	cmp	r3, #8
 800126a:	d10f      	bne.n	800128c <main+0xe4>
		  if ( wrCnt ) {
 800126c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ee      	beq.n	8001252 <main+0xaa>
			  putchar( ' '); putchar( 0x08 );
 8001274:	2020      	movs	r0, #32
 8001276:	f005 fda9 	bl	8006dcc <putchar>
 800127a:	2008      	movs	r0, #8
 800127c:	f005 fda6 	bl	8006dcc <putchar>
			  wrCnt--;
 8001280:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8001284:	3b01      	subs	r3, #1
 8001286:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
 800128a:	e7e2      	b.n	8001252 <main+0xaa>
		  }
	  }
	  else if ( ch == '.' && newLine ) {
 800128c:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 8001290:	2b2e      	cmp	r3, #46	; 0x2e
 8001292:	d107      	bne.n	80012a4 <main+0xfc>
 8001294:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <main+0xfc>
		  terminate = true;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
 80012a2:	e036      	b.n	8001312 <main+0x16a>
	  }
	  else {
		  wrBuf[wrCnt++] = (char)ch;
 80012a4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	f8a7 2126 	strh.w	r2, [r7, #294]	; 0x126
 80012ae:	461a      	mov	r2, r3
 80012b0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80012b4:	b2d9      	uxtb	r1, r3
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	5499      	strb	r1, [r3, r2]
		  if ( ch == '\r' ) {
 80012bc:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 80012c0:	2b0d      	cmp	r3, #13
 80012c2:	d123      	bne.n	800130c <main+0x164>
			  newLine = true;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			  putchar( '\n' );
 80012ca:	200a      	movs	r0, #10
 80012cc:	f005 fd7e 	bl	8006dcc <putchar>
			  wrBuf[wrCnt++] = '\n';
 80012d0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	f8a7 2126 	strh.w	r2, [r7, #294]	; 0x126
 80012da:	461a      	mov	r2, r3
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	210a      	movs	r1, #10
 80012e2:	5499      	strb	r1, [r3, r2]
			  eprom.write(addr, wrBuf, wrCnt);
 80012e4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80012e8:	f107 021c 	add.w	r2, r7, #28
 80012ec:	f8b7 1124 	ldrh.w	r1, [r7, #292]	; 0x124
 80012f0:	483f      	ldr	r0, [pc, #252]	; (80013f0 <main+0x248>)
 80012f2:	f7ff fd4f 	bl	8000d94 <_ZN6eeprom5writeEtPht>
			  addr += wrCnt;
 80012f6:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 80012fa:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80012fe:	4413      	add	r3, r2
 8001300:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
			  wrCnt = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
 800130a:	e7a2      	b.n	8001252 <main+0xaa>
		  }
		  else {
			  newLine = false;
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	while ( !terminate ) {
 8001312:	e79e      	b.n	8001252 <main+0xaa>
		  }
	  }
	}
	printf("\r\n");
 8001314:	4839      	ldr	r0, [pc, #228]	; (80013fc <main+0x254>)
 8001316:	f005 fdc9 	bl	8006eac <puts>
	printf("Type (hex) address or <enter> to read from current address\r\n\n");
 800131a:	4839      	ldr	r0, [pc, #228]	; (8001400 <main+0x258>)
 800131c:	f005 fdc6 	bl	8006eac <puts>
	addr = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	gotChars = false;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	printf("> ");
 800132c:	4835      	ldr	r0, [pc, #212]	; (8001404 <main+0x25c>)
 800132e:	f005 fd35 	bl	8006d9c <iprintf>
	for ( ;; ) {
	  ch = getchar();
 8001332:	f004 fddb 	bl	8005eec <getchar>
 8001336:	4603      	mov	r3, r0
 8001338:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
	  if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f')) {
 800133c:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 8001340:	2b2f      	cmp	r3, #47	; 0x2f
 8001342:	dd03      	ble.n	800134c <main+0x1a4>
 8001344:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 8001348:	2b39      	cmp	r3, #57	; 0x39
 800134a:	dd07      	ble.n	800135c <main+0x1b4>
 800134c:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 8001350:	2b60      	cmp	r3, #96	; 0x60
 8001352:	dd0f      	ble.n	8001374 <main+0x1cc>
 8001354:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 8001358:	2b66      	cmp	r3, #102	; 0x66
 800135a:	dc0b      	bgt.n	8001374 <main+0x1cc>
		  s.push_back(ch);
 800135c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8001360:	b2da      	uxtb	r2, r3
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f004 fccb 	bl	8005d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		  gotChars = true;
 800136c:	2301      	movs	r3, #1
 800136e:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 8001372:	e038      	b.n	80013e6 <main+0x23e>
	  }
	  else if ( ch == '\r' ) {
 8001374:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	; 0x11c
 8001378:	2b0d      	cmp	r3, #13
 800137a:	d1da      	bne.n	8001332 <main+0x18a>
		  putchar('\n');
 800137c:	200a      	movs	r0, #10
 800137e:	f005 fd25 	bl	8006dcc <putchar>
		  if ( gotChars ) {
 8001382:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8001386:	2b00      	cmp	r3, #0
 8001388:	d010      	beq.n	80013ac <main+0x204>
			  addr = stoi(s, NULL, 16);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2210      	movs	r2, #16
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fea7 	bl	80010e4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001396:	4603      	mov	r3, r0
 8001398:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
			  s.erase();
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	f04f 32ff 	mov.w	r2, #4294967295
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 fccb 	bl	8005d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
 80013aa:	e005      	b.n	80013b8 <main+0x210>
		  }
		  else addr += 256;
 80013ac:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80013b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013b4:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
		  if ( addr >= 4096 ) {
 80013b8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80013bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c0:	d308      	bcc.n	80013d4 <main+0x22c>
			  printf("Address %x exceeds EEPROM capacity!\r\n", addr);
 80013c2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80013c6:	4619      	mov	r1, r3
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <main+0x260>)
 80013ca:	f005 fce7 	bl	8006d9c <iprintf>
			  addr = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
		  }
		  eprom.print(addr);
 80013d4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <main+0x248>)
 80013dc:	f7ff fdd8 	bl	8000f90 <_ZN6eeprom5printEt>
		  gotChars = false;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	  ch = getchar();
 80013e6:	e7a4      	b.n	8001332 <main+0x18a>
 80013e8:	0800a7ec 	.word	0x0800a7ec
 80013ec:	0800a820 	.word	0x0800a820
 80013f0:	2000034c 	.word	0x2000034c
 80013f4:	0800a838 	.word	0x0800a838
 80013f8:	0800a884 	.word	0x0800a884
 80013fc:	0800a8c0 	.word	0x0800a8c0
 8001400:	0800a8c4 	.word	0x0800a8c4
 8001404:	0800a904 	.word	0x0800a904
 8001408:	0800a908 	.word	0x0800a908

0800140c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0a6      	sub	sp, #152	; 0x98
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001416:	2228      	movs	r2, #40	; 0x28
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fdd0 	bl	8005fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2258      	movs	r2, #88	; 0x58
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f004 fdc2 	bl	8005fc0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143c:	2302      	movs	r3, #2
 800143e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001440:	2301      	movs	r3, #1
 8001442:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001444:	2310      	movs	r3, #16
 8001446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001458:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800145c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fae4 	bl	8003a38 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf14      	ite	ne
 8001476:	2301      	movne	r3, #1
 8001478:	2300      	moveq	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8001480:	f000 f956 	bl	8001730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	230f      	movs	r3, #15
 8001486:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2302      	movs	r3, #2
 800148a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001494:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800149e:	2102      	movs	r1, #2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 f9df 	bl	8004864 <HAL_RCC_ClockConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80014b6:	f000 f93b 	bl	8001730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80014ba:	2322      	movs	r3, #34	; 0x22
 80014bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fc01 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80014de:	f000 f927 	bl	8001730 <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3798      	adds	r7, #152	; 0x98
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <_ZL12MX_I2C1_Initv+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <_ZL12MX_I2C1_Initv+0x98>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 8001504:	2201      	movs	r2, #1
 8001506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001526:	4815      	ldr	r0, [pc, #84]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 8001528:	f001 f8a4 	bl	8002674 <HAL_I2C_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800153c:	f000 f8f8 	bl	8001730 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001540:	2100      	movs	r1, #0
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 8001544:	f002 f9e1 	bl	800390a <HAL_I2CEx_ConfigAnalogFilter>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001558:	f000 f8ea 	bl	8001730 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800155c:	2100      	movs	r1, #0
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <_ZL12MX_I2C1_Initv+0x90>)
 8001560:	f002 fa1e 	bl	80039a0 <HAL_I2CEx_ConfigDigitalFilter>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	bf14      	ite	ne
 800156a:	2301      	movne	r3, #1
 800156c:	2300      	moveq	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001574:	f000 f8dc 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200001f8 	.word	0x200001f8
 8001580:	40005400 	.word	0x40005400
 8001584:	2000090e 	.word	0x2000090e

08001588 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <_ZL19MX_USART2_UART_Initv+0x64>)
 8001590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015cc:	f003 fd9e 	bl	800510c <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80015e0:	f000 f8a6 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002cc 	.word	0x200002cc
 80015ec:	40004400 	.word	0x40004400

080015f0 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_ZL11MX_DMA_Initv+0x48>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <_ZL11MX_DMA_Initv+0x48>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <_ZL11MX_DMA_Initv+0x48>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2010      	movs	r0, #16
 8001614:	f000 fcf1 	bl	8001ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001618:	2010      	movs	r0, #16
 800161a:	f000 fd0a 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2011      	movs	r0, #17
 8001624:	f000 fce9 	bl	8001ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001628:	2011      	movs	r0, #17
 800162a:	f000 fd02 	bl	8002032 <HAL_NVIC_EnableIRQ>

}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a33      	ldr	r2, [pc, #204]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 8001658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 8001670:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	4a27      	ldr	r2, [pc, #156]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	6153      	str	r3, [r2, #20]
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a21      	ldr	r2, [pc, #132]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6153      	str	r3, [r2, #20]
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <_ZL12MX_GPIO_Initv+0xe8>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	481c      	ldr	r0, [pc, #112]	; (8001728 <_ZL12MX_GPIO_Initv+0xec>)
 80016b8:	f000 ffc4 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f000 ffbe 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <_ZL12MX_GPIO_Initv+0xf0>)
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4812      	ldr	r0, [pc, #72]	; (8001728 <_ZL12MX_GPIO_Initv+0xec>)
 80016de:	f000 fe27 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : WP_Pin */
  GPIO_InitStruct.Pin = WP_Pin;
 80016e2:	2308      	movs	r3, #8
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <_ZL12MX_GPIO_Initv+0xec>)
 80016fa:	f000 fe19 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016fe:	2320      	movs	r3, #32
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f000 fe0a 	bl	8002330 <HAL_GPIO_Init>

}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	48000800 	.word	0x48000800
 800172c:	10210000 	.word	0x10210000

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	f004 fbcb 	bl	8005ee0 <__errno>
 800174a:	4603      	mov	r3, r0
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f004 fbc5 	bl	8005ee0 <__errno>
 8001756:	4602      	mov	r2, r0
 8001758:	2300      	movs	r3, #0
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	f004 fbb7 	bl	8005ee0 <__errno>
 8001772:	4603      	mov	r3, r0
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8001784:	f004 fbac 	bl	8005ee0 <__errno>
 8001788:	4602      	mov	r2, r0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 80017a4:	2300      	movs	r3, #0
	  }
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 80017b2:	b590      	push	{r4, r7, lr}
 80017b4:	b08b      	sub	sp, #44	; 0x2c
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ffba 	bl	800173e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 80017ca:	f107 0118 	add.w	r1, r7, #24
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	4798      	blx	r3
 80017d6:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d102      	bne.n	80017e6 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 80017e0:	68b8      	ldr	r0, [r7, #8]
 80017e2:	f004 f9c4 	bl	8005b6e <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 80017e6:	f004 fb7b 	bl	8005ee0 <__errno>
 80017ea:	4603      	mov	r3, r0
 80017ec:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 80017ee:	2b22      	cmp	r3, #34	; 0x22
 80017f0:	d006      	beq.n	8001800 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 80017f2:	4621      	mov	r1, r4
 80017f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017f6:	f7ff ffd0 	bl	800179a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8001804:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 800180a:	68b8      	ldr	r0, [r7, #8]
 800180c:	f004 f9b5 	bl	8005b7a <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	623b      	str	r3, [r7, #32]

      if (__idx)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	461a      	mov	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	601a      	str	r2, [r3, #0]

      return __ret;
 8001828:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff99 	bl	8001766 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8001834:	4623      	mov	r3, r4
    }
 8001836:	4618      	mov	r0, r3
 8001838:	372c      	adds	r7, #44	; 0x2c
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
	...

08001840 <_Z41__static_initialization_and_destruction_0ii>:
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10a      	bne.n	8001866 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001856:	4293      	cmp	r3, r2
 8001858:	d105      	bne.n	8001866 <_Z41__static_initialization_and_destruction_0ii+0x26>
eeprom eprom(EEPROM_ADDR, WP_GPIO_Port, WP_Pin);	// EEPROM-objekti
 800185a:	2308      	movs	r3, #8
 800185c:	4a09      	ldr	r2, [pc, #36]	; (8001884 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800185e:	21a0      	movs	r1, #160	; 0xa0
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001862:	f7ff fa19 	bl	8000c98 <_ZN6eepromC1EhP12GPIO_TypeDeft>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	4293      	cmp	r3, r2
 8001874:	d102      	bne.n	800187c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001878:	f7ff fa34 	bl	8000ce4 <_ZN6eepromD1Ev>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	48000800 	.word	0x48000800
 8001888:	2000034c 	.word	0x2000034c

0800188c <_GLOBAL__sub_I_hi2c1>:
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
 8001890:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff ffd3 	bl	8001840 <_Z41__static_initialization_and_destruction_0ii>
 800189a:	bd80      	pop	{r7, pc}

0800189c <_GLOBAL__sub_D_hi2c1>:
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
 80018a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff ffcb 	bl	8001840 <_Z41__static_initialization_and_destruction_0ii>
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_MspInit+0x44>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_MspInit+0x44>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6193      	str	r3, [r2, #24]
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_MspInit+0x44>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_MspInit+0x44>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_MspInit+0x44>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_MspInit+0x44>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018e2:	2007      	movs	r0, #7
 80018e4:	f000 fb7e 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a54      	ldr	r2, [pc, #336]	; (8001a64 <HAL_I2C_MspInit+0x170>)
 8001912:	4293      	cmp	r3, r2
 8001914:	f040 80a2 	bne.w	8001a5c <HAL_I2C_MspInit+0x168>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 800191e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001922:	6153      	str	r3, [r2, #20]
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	4a4c      	ldr	r2, [pc, #304]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 8001936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193a:	6153      	str	r3, [r2, #20]
 800193c:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194e:	2312      	movs	r3, #18
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	2301      	movs	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800195a:	2304      	movs	r3, #4
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001968:	f000 fce2 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001970:	2312      	movs	r3, #18
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001974:	2301      	movs	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800197c:	2304      	movs	r3, #4
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4839      	ldr	r0, [pc, #228]	; (8001a6c <HAL_I2C_MspInit+0x178>)
 8001988:	f000 fcd2 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	4a35      	ldr	r2, [pc, #212]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 8001992:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001996:	61d3      	str	r3, [r2, #28]
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_I2C_MspInit+0x174>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019a6:	4a33      	ldr	r2, [pc, #204]	; (8001a74 <HAL_I2C_MspInit+0x180>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b6:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019bc:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019d4:	4826      	ldr	r0, [pc, #152]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019d6:	f000 fb46 	bl	8002066 <HAL_DMA_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 80019e0:	f7ff fea6 	bl	8001730 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80019ea:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <HAL_I2C_MspInit+0x17c>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <HAL_I2C_MspInit+0x188>)
 80019f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 80019f8:	2210      	movs	r2, #16
 80019fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a20:	4815      	ldr	r0, [pc, #84]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 8001a22:	f000 fb20 	bl	8002066 <HAL_DMA_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 8001a2c:	f7ff fe80 	bl	8001730 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 8001a34:	639a      	str	r2, [r3, #56]	; 0x38
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_I2C_MspInit+0x184>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	201f      	movs	r0, #31
 8001a42:	f000 fada 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a46:	201f      	movs	r0, #31
 8001a48:	f000 faf3 	bl	8002032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2020      	movs	r0, #32
 8001a52:	f000 fad2 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a56:	2020      	movs	r0, #32
 8001a58:	f000 faeb 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40005400 	.word	0x40005400
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	20000244 	.word	0x20000244
 8001a74:	40020080 	.word	0x40020080
 8001a78:	20000288 	.word	0x20000288
 8001a7c:	4002006c 	.word	0x4002006c

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_UART_MspInit+0x7c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d128      	bne.n	8001af4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_UART_MspInit+0x80>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <HAL_UART_MspInit+0x80>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_UART_MspInit+0x80>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_UART_MspInit+0x80>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_UART_MspInit+0x80>)
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_UART_MspInit+0x80>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f000 fc1e 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40004400 	.word	0x40004400
 8001b00:	40021000 	.word	0x40021000

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 f932 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <DMA1_Channel6_IRQHandler+0x10>)
 8001b66:	f000 fb03 	bl	8002170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000288 	.word	0x20000288

08001b74 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <DMA1_Channel7_IRQHandler+0x10>)
 8001b7a:	f000 faf9 	bl	8002170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000244 	.word	0x20000244

08001b88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <I2C1_EV_IRQHandler+0x10>)
 8001b8e:	f000 ffeb 	bl	8002b68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200001f8 	.word	0x200001f8

08001b9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <I2C1_ER_IRQHandler+0x10>)
 8001ba2:	f000 fffb 	bl	8002b9c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200001f8 	.word	0x200001f8

08001bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
	return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_kill>:

int _kill(int pid, int sig)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bca:	f004 f989 	bl	8005ee0 <__errno>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	2316      	movs	r3, #22
 8001bd2:	6013      	str	r3, [r2, #0]
	return -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_exit>:

void _exit (int status)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ffe7 	bl	8001bc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bf2:	e7fe      	b.n	8001bf2 <_exit+0x12>

08001bf4 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	return -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1c:	605a      	str	r2, [r3, #4]
	return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_isatty>:

int _isatty(int file)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
	return 0;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <_sbrk+0x50>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <_sbrk+0x16>
		heap_end = &end;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <_sbrk+0x50>)
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <_sbrk+0x54>)
 8001c70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <_sbrk+0x50>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <_sbrk+0x50>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	466a      	mov	r2, sp
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d907      	bls.n	8001c96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c86:	f004 f92b 	bl	8005ee0 <__errno>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	e006      	b.n	8001ca4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <_sbrk+0x50>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a03      	ldr	r2, [pc, #12]	; (8001cac <_sbrk+0x50>)
 8001ca0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000358 	.word	0x20000358
 8001cb0:	20000370 	.word	0x20000370

08001cb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <SystemInit+0x28>)
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <SystemInit+0x28>)
 8001cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SystemInit+0x28>)
 8001cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cce:	609a      	str	r2, [r3, #8]
#endif
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ce4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ce6:	e003      	b.n	8001cf0 <LoopCopyDataInit>

08001ce8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cee:	3104      	adds	r1, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cf8:	d3f6      	bcc.n	8001ce8 <CopyDataInit>
	ldr	r2, =_sbss
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cfc:	e002      	b.n	8001d04 <LoopFillZerobss>

08001cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d00:	f842 3b04 	str.w	r3, [r2], #4

08001d04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <LoopForever+0x16>)
	cmp	r2, r3
 8001d06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d08:	d3f9      	bcc.n	8001cfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d0a:	f7ff ffd3 	bl	8001cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0e:	f004 f8ff 	bl	8005f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d12:	f7ff fa49 	bl	80011a8 <main>

08001d16 <LoopForever>:

LoopForever:
    b LoopForever
 8001d16:	e7fe      	b.n	8001d16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d18:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001d1c:	0800ad80 	.word	0x0800ad80
	ldr	r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d24:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001d28:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001d2c:	20000370 	.word	0x20000370

08001d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d30:	e7fe      	b.n	8001d30 <ADC1_2_IRQHandler>
	...

08001d34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_Init+0x28>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_Init+0x28>)
 8001d3e:	f043 0310 	orr.w	r3, r3, #16
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 f94d 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff fdac 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000

08001d60 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f965 	bl	800204e <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 f92d 	bl	8001ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000368 	.word	0x20000368

08001de8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;  
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000368 	.word	0x20000368

08001e00 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_Delay+0x40>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000008 	.word	0x20000008

08001e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0b      	blt.n	8001ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4907      	ldr	r1, [pc, #28]	; (8001ee0 <__NVIC_EnableIRQ+0x38>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb0:	d301      	bcc.n	8001fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <SysTick_Config+0x40>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f7ff ff8e 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <SysTick_Config+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <SysTick_Config+0x40>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff29 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff3e 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff8e 	bl	8001f38 <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5d 	bl	8001ee4 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff31 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffa2 	bl	8001fa0 <SysTick_Config>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e037      	b.n	80020ec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002092:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002096:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8f2 	bl	80022b8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}  
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002106:	2b02      	cmp	r3, #2
 8002108:	d005      	beq.n	8002116 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e027      	b.n	8002166 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 020e 	bic.w	r2, r2, #14
 8002124:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	2101      	movs	r1, #1
 8002140:	fa01 f202 	lsl.w	r2, r1, r2
 8002144:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
    } 
  }
  return status;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	2204      	movs	r2, #4
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d024      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x72>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01f      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0204 	bic.w	r2, r2, #4
 80021be:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	2104      	movs	r1, #4
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d06a      	beq.n	80022ae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80021e0:	e065      	b.n	80022ae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2202      	movs	r2, #2
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02c      	beq.n	800224c <HAL_DMA_IRQHandler+0xdc>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d027      	beq.n	800224c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10b      	bne.n	8002222 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 020a 	bic.w	r2, r2, #10
 8002218:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	2102      	movs	r1, #2
 800222c:	fa01 f202 	lsl.w	r2, r1, r2
 8002230:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d035      	beq.n	80022ae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800224a:	e030      	b.n	80022ae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2208      	movs	r2, #8
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d028      	beq.n	80022ae <HAL_DMA_IRQHandler+0x13e>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d023      	beq.n	80022ae <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 020e 	bic.w	r2, r2, #14
 8002274:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	2101      	movs	r1, #1
 8002280:	fa01 f202 	lsl.w	r2, r1, r2
 8002284:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
    }
  }
}  
 80022ac:	e7ff      	b.n	80022ae <HAL_DMA_IRQHandler+0x13e>
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <DMA_CalcBaseAndBitshift+0x60>)
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d80f      	bhi.n	80022ec <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <DMA_CalcBaseAndBitshift+0x64>)
 80022d4:	4413      	add	r3, r2
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <DMA_CalcBaseAndBitshift+0x68>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <DMA_CalcBaseAndBitshift+0x6c>)
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80022ea:	e00e      	b.n	800230a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <DMA_CalcBaseAndBitshift+0x70>)
 80022f4:	4413      	add	r3, r2
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <DMA_CalcBaseAndBitshift+0x68>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	009a      	lsls	r2, r3, #2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <DMA_CalcBaseAndBitshift+0x74>)
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40020407 	.word	0x40020407
 800231c:	bffdfff8 	.word	0xbffdfff8
 8002320:	cccccccd 	.word	0xcccccccd
 8002324:	40020000 	.word	0x40020000
 8002328:	bffdfbf8 	.word	0xbffdfbf8
 800232c:	40020400 	.word	0x40020400

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e160      	b.n	8002602 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8152 	beq.w	80025fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x38>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b12      	cmp	r3, #18
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	6939      	ldr	r1, [r7, #16]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d00b      	beq.n	8002404 <HAL_GPIO_Init+0xd4>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d007      	beq.n	8002404 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f8:	2b11      	cmp	r3, #17
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b12      	cmp	r3, #18
 8002402:	d130      	bne.n	8002466 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800243a:	2201      	movs	r2, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0201 	and.w	r2, r3, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80ac 	beq.w	80025fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a4:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a5d      	ldr	r2, [pc, #372]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_GPIO_Init+0x2f0>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024bc:	4a59      	ldr	r2, [pc, #356]	; (8002624 <HAL_GPIO_Init+0x2f4>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e6:	d025      	beq.n	8002534 <HAL_GPIO_Init+0x204>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a4f      	ldr	r2, [pc, #316]	; (8002628 <HAL_GPIO_Init+0x2f8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01f      	beq.n	8002530 <HAL_GPIO_Init+0x200>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a4e      	ldr	r2, [pc, #312]	; (800262c <HAL_GPIO_Init+0x2fc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d019      	beq.n	800252c <HAL_GPIO_Init+0x1fc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <HAL_GPIO_Init+0x300>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x1f8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <HAL_GPIO_Init+0x304>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x1f4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a4b      	ldr	r2, [pc, #300]	; (8002638 <HAL_GPIO_Init+0x308>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x1f0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a4a      	ldr	r2, [pc, #296]	; (800263c <HAL_GPIO_Init+0x30c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x1ec>
 8002518:	2306      	movs	r3, #6
 800251a:	e00c      	b.n	8002536 <HAL_GPIO_Init+0x206>
 800251c:	2307      	movs	r3, #7
 800251e:	e00a      	b.n	8002536 <HAL_GPIO_Init+0x206>
 8002520:	2305      	movs	r3, #5
 8002522:	e008      	b.n	8002536 <HAL_GPIO_Init+0x206>
 8002524:	2304      	movs	r3, #4
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x206>
 8002528:	2303      	movs	r3, #3
 800252a:	e004      	b.n	8002536 <HAL_GPIO_Init+0x206>
 800252c:	2302      	movs	r3, #2
 800252e:	e002      	b.n	8002536 <HAL_GPIO_Init+0x206>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_GPIO_Init+0x206>
 8002534:	2300      	movs	r3, #0
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	f002 0203 	and.w	r2, r2, #3
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	4093      	lsls	r3, r2
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002546:	4937      	ldr	r1, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x2f4>)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002554:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <HAL_GPIO_Init+0x310>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002578:	4a31      	ldr	r2, [pc, #196]	; (8002640 <HAL_GPIO_Init+0x310>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_GPIO_Init+0x310>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025a2:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_GPIO_Init+0x310>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_GPIO_Init+0x310>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025cc:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_GPIO_Init+0x310>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_GPIO_Init+0x310>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <HAL_GPIO_Init+0x310>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f ae97 	bne.w	8002340 <HAL_GPIO_Init+0x10>
  }
}
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	40010000 	.word	0x40010000
 8002628:	48000400 	.word	0x48000400
 800262c:	48000800 	.word	0x48000800
 8002630:	48000c00 	.word	0x48000c00
 8002634:	48001000 	.word	0x48001000
 8002638:	48001400 	.word	0x48001400
 800263c:	48001800 	.word	0x48001800
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002660:	e002      	b.n	8002668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e081      	b.n	800278a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff f92a 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2224      	movs	r2, #36	; 0x24
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	e006      	b.n	80026fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d104      	bne.n	800270e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800270c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002720:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002730:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	ea42 0103 	orr.w	r1, r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	021a      	lsls	r2, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69d9      	ldr	r1, [r3, #28]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	461a      	mov	r2, r3
 80027a0:	460b      	mov	r3, r1
 80027a2:	817b      	strh	r3, [r7, #10]
 80027a4:	4613      	mov	r3, r2
 80027a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	f040 80da 	bne.w	800296a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_I2C_Master_Transmit+0x30>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0d3      	b.n	800296c <HAL_I2C_Master_Transmit+0x1d8>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027cc:	f7ff fb0c 	bl	8001de8 <HAL_GetTick>
 80027d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2319      	movs	r3, #25
 80027d8:	2201      	movs	r2, #1
 80027da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fe72 	bl	80034c8 <I2C_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0be      	b.n	800296c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2221      	movs	r2, #33	; 0x21
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2210      	movs	r2, #16
 80027fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	893a      	ldrh	r2, [r7, #8]
 800280e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2bff      	cmp	r3, #255	; 0xff
 800281e:	d90e      	bls.n	800283e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	b2da      	uxtb	r2, r3
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	4b51      	ldr	r3, [pc, #324]	; (8002974 <HAL_I2C_Master_Transmit+0x1e0>)
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 ffd4 	bl	80037e4 <I2C_TransferConfig>
 800283c:	e06c      	b.n	8002918 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	b2da      	uxtb	r2, r3
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	4b48      	ldr	r3, [pc, #288]	; (8002974 <HAL_I2C_Master_Transmit+0x1e0>)
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 ffc3 	bl	80037e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800285e:	e05b      	b.n	8002918 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	6a39      	ldr	r1, [r7, #32]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fe6f 	bl	8003548 <I2C_WaitOnTXISFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e07b      	b.n	800296c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d034      	beq.n	8002918 <HAL_I2C_Master_Transmit+0x184>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d130      	bne.n	8002918 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	2200      	movs	r2, #0
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fe01 	bl	80034c8 <I2C_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e04d      	b.n	800296c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2bff      	cmp	r3, #255	; 0xff
 80028d8:	d90e      	bls.n	80028f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	8979      	ldrh	r1, [r7, #10]
 80028e8:	2300      	movs	r3, #0
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 ff77 	bl	80037e4 <I2C_TransferConfig>
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	b2da      	uxtb	r2, r3
 8002908:	8979      	ldrh	r1, [r7, #10]
 800290a:	2300      	movs	r3, #0
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 ff66 	bl	80037e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d19e      	bne.n	8002860 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	6a39      	ldr	r1, [r7, #32]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fe4e 	bl	80035c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e01a      	b.n	800296c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2220      	movs	r2, #32
 800293c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_I2C_Master_Transmit+0x1e4>)
 800294a:	400b      	ands	r3, r1
 800294c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	80002000 	.word	0x80002000
 8002978:	fe00e800 	.word	0xfe00e800

0800297c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	460b      	mov	r3, r1
 800298a:	817b      	strh	r3, [r7, #10]
 800298c:	4613      	mov	r3, r2
 800298e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	f040 80db 	bne.w	8002b54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_I2C_Master_Receive+0x30>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e0d4      	b.n	8002b56 <HAL_I2C_Master_Receive+0x1da>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029b4:	f7ff fa18 	bl	8001de8 <HAL_GetTick>
 80029b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2319      	movs	r3, #25
 80029c0:	2201      	movs	r2, #1
 80029c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fd7e 	bl	80034c8 <I2C_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0bf      	b.n	8002b56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2222      	movs	r2, #34	; 0x22
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2210      	movs	r2, #16
 80029e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	893a      	ldrh	r2, [r7, #8]
 80029f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2bff      	cmp	r3, #255	; 0xff
 8002a06:	d90e      	bls.n	8002a26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	22ff      	movs	r2, #255	; 0xff
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	8979      	ldrh	r1, [r7, #10]
 8002a16:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <HAL_I2C_Master_Receive+0x1e4>)
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fee0 	bl	80037e4 <I2C_TransferConfig>
 8002a24:	e06d      	b.n	8002b02 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <HAL_I2C_Master_Receive+0x1e4>)
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fecf 	bl	80037e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a46:	e05c      	b.n	8002b02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	6a39      	ldr	r1, [r7, #32]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fdf7 	bl	8003640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e07c      	b.n	8002b56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d034      	beq.n	8002b02 <HAL_I2C_Master_Receive+0x186>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d130      	bne.n	8002b02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fd0c 	bl	80034c8 <I2C_WaitOnFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e04d      	b.n	8002b56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2bff      	cmp	r3, #255	; 0xff
 8002ac2:	d90e      	bls.n	8002ae2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	8979      	ldrh	r1, [r7, #10]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fe82 	bl	80037e4 <I2C_TransferConfig>
 8002ae0:	e00f      	b.n	8002b02 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	2300      	movs	r3, #0
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fe71 	bl	80037e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d19d      	bne.n	8002a48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	6a39      	ldr	r1, [r7, #32]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fd59 	bl	80035c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e01a      	b.n	8002b56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2220      	movs	r2, #32
 8002b26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_I2C_Master_Receive+0x1e8>)
 8002b34:	400b      	ands	r3, r1
 8002b36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	80002400 	.word	0x80002400
 8002b64:	fe00e800 	.word	0xfe00e800

08002b68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
  }
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_I2C_ER_IRQHandler+0x46>
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	09db      	lsrs	r3, r3, #7
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	0a9b      	lsrs	r3, r3, #10
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d010      	beq.n	8002c10 <HAL_I2C_ER_IRQHandler+0x74>
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	09db      	lsrs	r3, r3, #7
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f043 0208 	orr.w	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	0a5b      	lsrs	r3, r3, #9
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <HAL_I2C_ER_IRQHandler+0xa2>
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	09db      	lsrs	r3, r3, #7
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f043 0202 	orr.w	r2, r3, #2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 030b 	and.w	r3, r3, #11
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fb31 	bl	80032b8 <I2C_ITError>
  }
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	70fb      	strb	r3, [r7, #3]
 8002c92:	4613      	mov	r3, r2
 8002c94:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <I2C_Slave_ISR_IT+0x24>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0ec      	b.n	8002edc <I2C_Slave_ISR_IT+0x1fe>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <I2C_Slave_ISR_IT+0x4c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002d22:	6939      	ldr	r1, [r7, #16]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f99d 	bl	8003064 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d04d      	beq.n	8002dd2 <I2C_Slave_ISR_IT+0xf4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d047      	beq.n	8002dd2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d128      	bne.n	8002d9e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b28      	cmp	r3, #40	; 0x28
 8002d56:	d108      	bne.n	8002d6a <I2C_Slave_ISR_IT+0x8c>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d5e:	d104      	bne.n	8002d6a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d60:	6939      	ldr	r1, [r7, #16]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fa54 	bl	8003210 <I2C_ITListenCplt>
 8002d68:	e032      	b.n	8002dd0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b29      	cmp	r3, #41	; 0x29
 8002d74:	d10e      	bne.n	8002d94 <I2C_Slave_ISR_IT+0xb6>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d7c:	d00a      	beq.n	8002d94 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2210      	movs	r2, #16
 8002d84:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fb56 	bl	8003438 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f92b 	bl	8002fe8 <I2C_ITSlaveSeqCplt>
 8002d92:	e01d      	b.n	8002dd0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002d9c:	e096      	b.n	8002ecc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2210      	movs	r2, #16
 8002da4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f043 0204 	orr.w	r2, r3, #4
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <I2C_Slave_ISR_IT+0xe4>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dbe:	f040 8085 	bne.w	8002ecc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fa75 	bl	80032b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002dce:	e07d      	b.n	8002ecc <I2C_Slave_ISR_IT+0x1ee>
 8002dd0:	e07c      	b.n	8002ecc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d030      	beq.n	8002e40 <I2C_Slave_ISR_IT+0x162>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02a      	beq.n	8002e40 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d018      	beq.n	8002e26 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d14f      	bne.n	8002ed0 <I2C_Slave_ISR_IT+0x1f2>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e36:	d04b      	beq.n	8002ed0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f8d5 	bl	8002fe8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002e3e:	e047      	b.n	8002ed0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	08db      	lsrs	r3, r3, #3
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <I2C_Slave_ISR_IT+0x184>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	08db      	lsrs	r3, r3, #3
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002e58:	6939      	ldr	r1, [r7, #16]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f842 	bl	8002ee4 <I2C_ITAddrCplt>
 8002e60:	e037      	b.n	8002ed2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d031      	beq.n	8002ed2 <I2C_Slave_ISR_IT+0x1f4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02b      	beq.n	8002ed2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
 8002eb4:	e00d      	b.n	8002ed2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ebc:	d002      	beq.n	8002ec4 <I2C_Slave_ISR_IT+0x1e6>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f88f 	bl	8002fe8 <I2C_ITSlaveSeqCplt>
 8002eca:	e002      	b.n	8002ed2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002ecc:	bf00      	nop
 8002ece:	e000      	b.n	8002ed2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002ed0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002efa:	2b28      	cmp	r3, #40	; 0x28
 8002efc:	d168      	bne.n	8002fd0 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f1c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f38:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d137      	bne.n	8002fb2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	09db      	lsrs	r3, r3, #7
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	89bb      	ldrh	r3, [r7, #12]
 8002f4a:	4053      	eors	r3, r2
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f003 0306 	and.w	r3, r3, #6
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11c      	bne.n	8002f90 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f56:	897b      	ldrh	r3, [r7, #10]
 8002f58:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d139      	bne.n	8002fe0 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2208      	movs	r2, #8
 8002f78:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f82:	89ba      	ldrh	r2, [r7, #12]
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fe7c 	bl	8002c86 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f8e:	e027      	b.n	8002fe0 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8002f90:	893b      	ldrh	r3, [r7, #8]
 8002f92:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f94:	2104      	movs	r1, #4
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fc52 	bl	8003840 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fa4:	89ba      	ldrh	r2, [r7, #12]
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fe6b 	bl	8002c86 <HAL_I2C_AddrCallback>
}
 8002fb0:	e016      	b.n	8002fe0 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fc43 	bl	8003840 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fc2:	89ba      	ldrh	r2, [r7, #12]
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fe5c 	bl	8002c86 <HAL_I2C_AddrCallback>
}
 8002fce:	e007      	b.n	8002fe0 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b29      	cmp	r3, #41	; 0x29
 8003002:	d112      	bne.n	800302a <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2228      	movs	r2, #40	; 0x28
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2221      	movs	r2, #33	; 0x21
 8003010:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003012:	2101      	movs	r1, #1
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fc13 	bl	8003840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fe1b 	bl	8002c5e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003028:	e017      	b.n	800305a <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b2a      	cmp	r3, #42	; 0x2a
 8003034:	d111      	bne.n	800305a <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2228      	movs	r2, #40	; 0x28
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2222      	movs	r2, #34	; 0x22
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003044:	2102      	movs	r1, #2
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fbfa 	bl	8003840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fe0c 	bl	8002c72 <HAL_I2C_SlaveRxCpltCallback>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003082:	2107      	movs	r1, #7
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fbdb 	bl	8003840 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003098:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b58      	ldr	r3, [pc, #352]	; (8003208 <I2C_ITSlaveCplt+0x1a4>)
 80030a6:	400b      	ands	r3, r1
 80030a8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9c4 	bl	8003438 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0b9b      	lsrs	r3, r3, #14
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d018      	beq.n	80030f6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d2:	e010      	b.n	80030f6 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	0bdb      	lsrs	r3, r3, #15
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d006      	beq.n	80030f6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f043 0204 	orr.w	r2, r3, #4
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f89b 	bl	80032b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b28      	cmp	r3, #40	; 0x28
 800318c:	d138      	bne.n	8003200 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f83d 	bl	8003210 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003196:	e033      	b.n	8003200 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031a0:	d011      	beq.n	80031c6 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ff20 	bl	8002fe8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a18      	ldr	r2, [pc, #96]	; (800320c <I2C_ITSlaveCplt+0x1a8>)
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fd6f 	bl	8002ca2 <HAL_I2C_ListenCpltCallback>
}
 80031c4:	e01c      	b.n	8003200 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b22      	cmp	r3, #34	; 0x22
 80031d0:	d10b      	bne.n	80031ea <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fd45 	bl	8002c72 <HAL_I2C_SlaveRxCpltCallback>
}
 80031e8:	e00a      	b.n	8003200 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fd2f 	bl	8002c5e <HAL_I2C_SlaveTxCpltCallback>
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	fe00e800 	.word	0xfe00e800
 800320c:	ffff0000 	.word	0xffff0000

08003210 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a25      	ldr	r2, [pc, #148]	; (80032b4 <I2C_ITListenCplt+0xa4>)
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d022      	beq.n	800328e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d012      	beq.n	800328e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800328e:	2107      	movs	r1, #7
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fad5 	bl	8003840 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2210      	movs	r2, #16
 800329c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fcfb 	bl	8002ca2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	ffff0000 	.word	0xffff0000

080032b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c8:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a55      	ldr	r2, [pc, #340]	; (800342c <I2C_ITError+0x174>)
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b28      	cmp	r3, #40	; 0x28
 80032ee:	d005      	beq.n	80032fc <I2C_ITError+0x44>
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b29      	cmp	r3, #41	; 0x29
 80032f4:	d002      	beq.n	80032fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b2a      	cmp	r3, #42	; 0x2a
 80032fa:	d10e      	bne.n	800331a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032fc:	2103      	movs	r1, #3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa9e 	bl	8003840 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2228      	movs	r2, #40	; 0x28
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a46      	ldr	r2, [pc, #280]	; (8003430 <I2C_ITError+0x178>)
 8003316:	635a      	str	r2, [r3, #52]	; 0x34
 8003318:	e013      	b.n	8003342 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800331a:	2107      	movs	r1, #7
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fa8f 	bl	8003840 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b60      	cmp	r3, #96	; 0x60
 800332c:	d003      	beq.n	8003336 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003350:	d123      	bne.n	800339a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003360:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	2b00      	cmp	r3, #0
 8003368:	d05c      	beq.n	8003424 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	4a31      	ldr	r2, [pc, #196]	; (8003434 <I2C_ITError+0x17c>)
 8003370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe feb8 	bl	80020f4 <HAL_DMA_Abort_IT>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d04c      	beq.n	8003424 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003394:	4610      	mov	r0, r2
 8003396:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003398:	e044      	b.n	8003424 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a8:	d123      	bne.n	80033f2 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033b8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d030      	beq.n	8003424 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <I2C_ITError+0x17c>)
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fe8c 	bl	80020f4 <HAL_DMA_Abort_IT>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ec:	4610      	mov	r0, r2
 80033ee:	4798      	blx	r3
}
 80033f0:	e018      	b.n	8003424 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b60      	cmp	r3, #96	; 0x60
 80033fc:	d10b      	bne.n	8003416 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fc5b 	bl	8002cca <HAL_I2C_AbortCpltCallback>
}
 8003414:	e006      	b.n	8003424 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fc49 	bl	8002cb6 <HAL_I2C_ErrorCallback>
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	ffff0000 	.word	0xffff0000
 8003430:	08002cdf 	.word	0x08002cdf
 8003434:	08003481 	.word	0x08003481

08003438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d103      	bne.n	8003456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d007      	beq.n	8003474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	619a      	str	r2, [r3, #24]
  }
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	2200      	movs	r2, #0
 8003494:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	2200      	movs	r2, #0
 800349c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b60      	cmp	r3, #96	; 0x60
 80034a8:	d107      	bne.n	80034ba <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff fc09 	bl	8002cca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034b8:	e002      	b.n	80034c0 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fbfb 	bl	8002cb6 <HAL_I2C_ErrorCallback>
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d8:	e022      	b.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d01e      	beq.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fe fc81 	bl	8001de8 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d113      	bne.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e00f      	b.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4013      	ands	r3, r2
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	429a      	cmp	r2, r3
 800353c:	d0cd      	beq.n	80034da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003554:	e02c      	b.n	80035b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f8dc 	bl	8003718 <I2C_IsAcknowledgeFailed>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e02a      	b.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d01e      	beq.n	80035b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7fe fc39 	bl	8001de8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d113      	bne.n	80035b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e007      	b.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d1cb      	bne.n	8003556 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d4:	e028      	b.n	8003628 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f89c 	bl	8003718 <I2C_IsAcknowledgeFailed>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e026      	b.n	8003638 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fe fbfd 	bl	8001de8 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d113      	bne.n	8003628 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b20      	cmp	r3, #32
 8003634:	d1cf      	bne.n	80035d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800364c:	e055      	b.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f860 	bl	8003718 <I2C_IsAcknowledgeFailed>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e053      	b.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b20      	cmp	r3, #32
 800366e:	d129      	bne.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d105      	bne.n	800368a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e03f      	b.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2220      	movs	r2, #32
 8003690:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800369e:	400b      	ands	r3, r1
 80036a0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e022      	b.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe fb90 	bl	8001de8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e007      	b.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b04      	cmp	r3, #4
 8003706:	d1a2      	bne.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	fe00e800 	.word	0xfe00e800

08003718 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	d151      	bne.n	80037d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003732:	e022      	b.n	800377a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d01e      	beq.n	800377a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373c:	f7fe fb54 	bl	8001de8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <I2C_IsAcknowledgeFailed+0x3a>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d113      	bne.n	800377a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e02e      	b.n	80037d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b20      	cmp	r3, #32
 8003786:	d1d5      	bne.n	8003734 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2210      	movs	r2, #16
 800378e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2220      	movs	r2, #32
 8003796:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff fe4d 	bl	8003438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80037aa:	400b      	ands	r3, r1
 80037ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f043 0204 	orr.w	r2, r3, #4
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	4613      	mov	r3, r2
 80037f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	0d5b      	lsrs	r3, r3, #21
 8003800:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <I2C_TransferConfig+0x58>)
 8003806:	430b      	orrs	r3, r1
 8003808:	43db      	mvns	r3, r3
 800380a:	ea02 0103 	and.w	r1, r2, r3
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003814:	7a7b      	ldrb	r3, [r7, #9]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	431a      	orrs	r2, r3
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	431a      	orrs	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	03ff63ff 	.word	0x03ff63ff

08003840 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003850:	887b      	ldrh	r3, [r7, #2]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00f      	beq.n	800387a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003860:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800386e:	2b28      	cmp	r3, #40	; 0x28
 8003870:	d003      	beq.n	800387a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003878:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00f      	beq.n	80038a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800388a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003898:	2b28      	cmp	r3, #40	; 0x28
 800389a:	d003      	beq.n	80038a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80038a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80038b4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	f003 0311 	and.w	r3, r3, #17
 80038bc:	2b11      	cmp	r3, #17
 80038be:	d103      	bne.n	80038c8 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80038c8:	887b      	ldrh	r3, [r7, #2]
 80038ca:	f003 0312 	and.w	r3, r3, #18
 80038ce:	2b12      	cmp	r3, #18
 80038d0:	d103      	bne.n	80038da <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f043 0320 	orr.w	r3, r3, #32
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	f003 0312 	and.w	r3, r3, #18
 80038e0:	2b12      	cmp	r3, #18
 80038e2:	d103      	bne.n	80038ec <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ea:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6819      	ldr	r1, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	43da      	mvns	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	400a      	ands	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b20      	cmp	r3, #32
 800391e:	d138      	bne.n	8003992 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800392a:	2302      	movs	r3, #2
 800392c:	e032      	b.n	8003994 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2224      	movs	r2, #36	; 0x24
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800395c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d139      	bne.n	8003a2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e033      	b.n	8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2224      	movs	r2, #36	; 0x24
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e000      	b.n	8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
  }
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f000 bf01 	b.w	8004854 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8160 	beq.w	8003d22 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a62:	4bae      	ldr	r3, [pc, #696]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d00c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a6e:	4bab      	ldr	r3, [pc, #684]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d159      	bne.n	8003b2e <HAL_RCC_OscConfig+0xf6>
 8003a7a:	4ba8      	ldr	r3, [pc, #672]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a86:	d152      	bne.n	8003b2e <HAL_RCC_OscConfig+0xf6>
 8003a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a8c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d102      	bne.n	8003aba <HAL_RCC_OscConfig+0x82>
 8003ab4:	4b99      	ldr	r3, [pc, #612]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0xae>
 8003aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003abe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ad6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003ae2:	4b8e      	ldr	r3, [pc, #568]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003aee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003af2:	fa92 f2a2 	rbit	r2, r2
 8003af6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003afa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003afe:	fab2 f282 	clz	r2, r2
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	f042 0220 	orr.w	r2, r2, #32
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	f002 021f 	and.w	r2, r2, #31
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f202 	lsl.w	r2, r1, r2
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8102 	beq.w	8003d20 <HAL_RCC_OscConfig+0x2e8>
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 80fc 	bne.w	8003d20 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f000 be93 	b.w	8004854 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d106      	bne.n	8003b48 <HAL_RCC_OscConfig+0x110>
 8003b3a:	4b78      	ldr	r3, [pc, #480]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a77      	ldr	r2, [pc, #476]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e030      	b.n	8003baa <HAL_RCC_OscConfig+0x172>
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x134>
 8003b52:	4b72      	ldr	r3, [pc, #456]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a71      	ldr	r2, [pc, #452]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b6f      	ldr	r3, [pc, #444]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6e      	ldr	r2, [pc, #440]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e01e      	b.n	8003baa <HAL_RCC_OscConfig+0x172>
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b76:	d10c      	bne.n	8003b92 <HAL_RCC_OscConfig+0x15a>
 8003b78:	4b68      	ldr	r3, [pc, #416]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a67      	ldr	r2, [pc, #412]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b65      	ldr	r3, [pc, #404]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a64      	ldr	r2, [pc, #400]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e00b      	b.n	8003baa <HAL_RCC_OscConfig+0x172>
 8003b92:	4b62      	ldr	r3, [pc, #392]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a61      	ldr	r2, [pc, #388]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d059      	beq.n	8003c68 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe f918 	bl	8001de8 <HAL_GetTick>
 8003bb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bbe:	f7fe f913 	bl	8001de8 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d902      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	f000 be40 	b.w	8004854 <HAL_RCC_OscConfig+0xe1c>
 8003bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003be8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_OscConfig+0x1ce>
 8003c00:	4b46      	ldr	r3, [pc, #280]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	e015      	b.n	8003c32 <HAL_RCC_OscConfig+0x1fa>
 8003c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c1e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c22:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c36:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003c3a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003c3e:	fa92 f2a2 	rbit	r2, r2
 8003c42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003c46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f002 021f 	and.w	r2, r2, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ab      	beq.n	8003bbe <HAL_RCC_OscConfig+0x186>
 8003c66:	e05c      	b.n	8003d22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe f8be 	bl	8001de8 <HAL_GetTick>
 8003c6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c72:	f7fe f8b9 	bl	8001de8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d902      	bls.n	8003c88 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	f000 bde6 	b.w	8004854 <HAL_RCC_OscConfig+0xe1c>
 8003c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c8c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003c9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_OscConfig+0x282>
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCC_OscConfig+0x2ae>
 8003cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cbe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_RCC_OscConfig+0x2e4>)
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003cee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003cf2:	fa92 f2a2 	rbit	r2, r2
 8003cf6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003cfa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f042 0220 	orr.w	r2, r2, #32
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f002 021f 	and.w	r2, r2, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ab      	bne.n	8003c72 <HAL_RCC_OscConfig+0x23a>
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_OscConfig+0x2ea>
 8003d1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d22:	1d3b      	adds	r3, r7, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8170 	beq.w	8004012 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d32:	4bd0      	ldr	r3, [pc, #832]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d3e:	4bcd      	ldr	r3, [pc, #820]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d16d      	bne.n	8003e26 <HAL_RCC_OscConfig+0x3ee>
 8003d4a:	4bca      	ldr	r3, [pc, #808]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d56:	d166      	bne.n	8003e26 <HAL_RCC_OscConfig+0x3ee>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003d6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d102      	bne.n	8003d88 <HAL_RCC_OscConfig+0x350>
 8003d82:	4bbc      	ldr	r3, [pc, #752]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	e013      	b.n	8003db0 <HAL_RCC_OscConfig+0x378>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003da0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003dac:	4bb1      	ldr	r3, [pc, #708]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	2202      	movs	r2, #2
 8003db2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003db6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003dba:	fa92 f2a2 	rbit	r2, r2
 8003dbe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003dc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003dc6:	fab2 f282 	clz	r2, r2
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	f042 0220 	orr.w	r2, r2, #32
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	f002 021f 	and.w	r2, r2, #31
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <HAL_RCC_OscConfig+0x3ba>
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d002      	beq.n	8003df2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f000 bd31 	b.w	8004854 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df2:	4ba0      	ldr	r3, [pc, #640]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	21f8      	movs	r1, #248	; 0xf8
 8003e02:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003e0a:	fa91 f1a1 	rbit	r1, r1
 8003e0e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003e12:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e16:	fab1 f181 	clz	r1, r1
 8003e1a:	b2c9      	uxtb	r1, r1
 8003e1c:	408b      	lsls	r3, r1
 8003e1e:	4995      	ldr	r1, [pc, #596]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e24:	e0f5      	b.n	8004012 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8085 	beq.w	8003f3c <HAL_RCC_OscConfig+0x504>
 8003e32:	2301      	movs	r3, #1
 8003e34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003e44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e48:	fab3 f383 	clz	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fd ffc3 	bl	8001de8 <HAL_GetTick>
 8003e62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fd ffbe 	bl	8001de8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d902      	bls.n	8003e7e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	f000 bceb 	b.w	8004854 <HAL_RCC_OscConfig+0xe1c>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003e90:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	fab3 f383 	clz	r3, r3
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d102      	bne.n	8003eae <HAL_RCC_OscConfig+0x476>
 8003ea8:	4b72      	ldr	r3, [pc, #456]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	e013      	b.n	8003ed6 <HAL_RCC_OscConfig+0x49e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ec6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ed2:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003edc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003ee0:	fa92 f2a2 	rbit	r2, r2
 8003ee4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003ee8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003eec:	fab2 f282 	clz	r2, r2
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	f042 0220 	orr.w	r2, r2, #32
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	f002 021f 	and.w	r2, r2, #31
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f202 	lsl.w	r2, r1, r2
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0af      	beq.n	8003e68 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b5a      	ldr	r3, [pc, #360]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	21f8      	movs	r1, #248	; 0xf8
 8003f18:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003f20:	fa91 f1a1 	rbit	r1, r1
 8003f24:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003f28:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f2c:	fab1 f181 	clz	r1, r1
 8003f30:	b2c9      	uxtb	r1, r1
 8003f32:	408b      	lsls	r3, r1
 8003f34:	494f      	ldr	r1, [pc, #316]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
 8003f3a:	e06a      	b.n	8004012 <HAL_RCC_OscConfig+0x5da>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003f4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	461a      	mov	r2, r3
 8003f64:	2300      	movs	r3, #0
 8003f66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd ff3e 	bl	8001de8 <HAL_GetTick>
 8003f6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fd ff39 	bl	8001de8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d902      	bls.n	8003f88 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	f000 bc66 	b.w	8004854 <HAL_RCC_OscConfig+0xe1c>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003f9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x580>
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	e013      	b.n	8003fe0 <HAL_RCC_OscConfig+0x5a8>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003fca:	2302      	movs	r3, #2
 8003fcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003fd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCC_OscConfig+0x63c>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003fe6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003fea:	fa92 f2a2 	rbit	r2, r2
 8003fee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003ff2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ff6:	fab2 f282 	clz	r2, r2
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	f042 0220 	orr.w	r2, r2, #32
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	f002 021f 	and.w	r2, r2, #31
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f202 	lsl.w	r2, r1, r2
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1af      	bne.n	8003f72 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80da 	beq.w	80041d6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d069      	beq.n	8004100 <HAL_RCC_OscConfig+0x6c8>
 800402c:	2301      	movs	r3, #1
 800402e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004036:	fa93 f3a3 	rbit	r3, r3
 800403a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800403e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x640>)
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	461a      	mov	r2, r3
 8004052:	2301      	movs	r3, #1
 8004054:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fd fec7 	bl	8001de8 <HAL_GetTick>
 800405a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	e00d      	b.n	800407c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fd fec2 	bl	8001de8 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d905      	bls.n	800407c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e3ef      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
 8004074:	40021000 	.word	0x40021000
 8004078:	10908120 	.word	0x10908120
 800407c:	2302      	movs	r3, #2
 800407e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004086:	fa93 f2a3 	rbit	r2, r3
 800408a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004094:	2202      	movs	r2, #2
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	fa93 f2a3 	rbit	r2, r3
 80040a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80040ac:	2202      	movs	r2, #2
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	fa93 f2a3 	rbit	r2, r3
 80040ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c0:	4ba4      	ldr	r3, [pc, #656]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80040c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80040c8:	2102      	movs	r1, #2
 80040ca:	6019      	str	r1, [r3, #0]
 80040cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	fa93 f1a3 	rbit	r1, r3
 80040d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040da:	6019      	str	r1, [r3, #0]
  return result;
 80040dc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	2101      	movs	r1, #1
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0b0      	beq.n	8004060 <HAL_RCC_OscConfig+0x628>
 80040fe:	e06a      	b.n	80041d6 <HAL_RCC_OscConfig+0x79e>
 8004100:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004104:	2201      	movs	r2, #1
 8004106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	fa93 f2a3 	rbit	r2, r3
 8004112:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004116:	601a      	str	r2, [r3, #0]
  return result;
 8004118:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800411c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	4b8c      	ldr	r3, [pc, #560]	; (8004358 <HAL_RCC_OscConfig+0x920>)
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	461a      	mov	r2, r3
 800412e:	2300      	movs	r3, #0
 8004130:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fd fe59 	bl	8001de8 <HAL_GetTick>
 8004136:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413a:	e009      	b.n	8004150 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413c:	f7fd fe54 	bl	8001de8 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e381      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
 8004150:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004154:	2202      	movs	r2, #2
 8004156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	fa93 f2a3 	rbit	r2, r3
 8004162:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800416c:	2202      	movs	r2, #2
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	fa93 f2a3 	rbit	r2, r3
 800417a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004184:	2202      	movs	r2, #2
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	fa93 f2a3 	rbit	r2, r3
 8004192:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004196:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b6e      	ldr	r3, [pc, #440]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 800419a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800419c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041a0:	2102      	movs	r1, #2
 80041a2:	6019      	str	r1, [r3, #0]
 80041a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	fa93 f1a3 	rbit	r1, r3
 80041ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041b2:	6019      	str	r1, [r3, #0]
  return result;
 80041b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	2101      	movs	r1, #1
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1b2      	bne.n	800413c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8157 	beq.w	8004494 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ec:	4b59      	ldr	r3, [pc, #356]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d112      	bne.n	800421e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b56      	ldr	r3, [pc, #344]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	4a55      	ldr	r2, [pc, #340]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004202:	61d3      	str	r3, [r2, #28]
 8004204:	4b53      	ldr	r3, [pc, #332]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800420c:	f107 030c 	add.w	r3, r7, #12
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	f107 030c 	add.w	r3, r7, #12
 8004216:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	4b4f      	ldr	r3, [pc, #316]	; (800435c <HAL_RCC_OscConfig+0x924>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11a      	bne.n	8004260 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422a:	4b4c      	ldr	r3, [pc, #304]	; (800435c <HAL_RCC_OscConfig+0x924>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a4b      	ldr	r2, [pc, #300]	; (800435c <HAL_RCC_OscConfig+0x924>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004236:	f7fd fdd7 	bl	8001de8 <HAL_GetTick>
 800423a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	e009      	b.n	8004254 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004240:	f7fd fdd2 	bl	8001de8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b64      	cmp	r3, #100	; 0x64
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e2ff      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCC_OscConfig+0x924>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ef      	beq.n	8004240 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d106      	bne.n	8004278 <HAL_RCC_OscConfig+0x840>
 800426a:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a39      	ldr	r2, [pc, #228]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6213      	str	r3, [r2, #32]
 8004276:	e02f      	b.n	80042d8 <HAL_RCC_OscConfig+0x8a0>
 8004278:	1d3b      	adds	r3, r7, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x864>
 8004282:	4b34      	ldr	r3, [pc, #208]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4a33      	ldr	r2, [pc, #204]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6213      	str	r3, [r2, #32]
 800428e:	4b31      	ldr	r3, [pc, #196]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4a30      	ldr	r2, [pc, #192]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	6213      	str	r3, [r2, #32]
 800429a:	e01d      	b.n	80042d8 <HAL_RCC_OscConfig+0x8a0>
 800429c:	1d3b      	adds	r3, r7, #4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x888>
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	4a2a      	ldr	r2, [pc, #168]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80042ac:	f043 0304 	orr.w	r3, r3, #4
 80042b0:	6213      	str	r3, [r2, #32]
 80042b2:	4b28      	ldr	r3, [pc, #160]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4a27      	ldr	r2, [pc, #156]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6213      	str	r3, [r2, #32]
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0x8a0>
 80042c0:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	4a23      	ldr	r2, [pc, #140]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	6213      	str	r3, [r2, #32]
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4a20      	ldr	r2, [pc, #128]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 80042d2:	f023 0304 	bic.w	r3, r3, #4
 80042d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d8:	1d3b      	adds	r3, r7, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d06a      	beq.n	80043b8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e2:	f7fd fd81 	bl	8001de8 <HAL_GetTick>
 80042e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	e00b      	b.n	8004304 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fd fd7c 	bl	8001de8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e2a7      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
 8004304:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004308:	2202      	movs	r2, #2
 800430a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	fa93 f2a3 	rbit	r2, r3
 8004316:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004320:	2202      	movs	r2, #2
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	fa93 f2a3 	rbit	r2, r3
 800432e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004332:	601a      	str	r2, [r3, #0]
  return result;
 8004334:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004338:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d108      	bne.n	8004360 <HAL_RCC_OscConfig+0x928>
 800434e:	4b01      	ldr	r3, [pc, #4]	; (8004354 <HAL_RCC_OscConfig+0x91c>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	e013      	b.n	800437c <HAL_RCC_OscConfig+0x944>
 8004354:	40021000 	.word	0x40021000
 8004358:	10908120 	.word	0x10908120
 800435c:	40007000 	.word	0x40007000
 8004360:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004364:	2202      	movs	r2, #2
 8004366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	fa93 f2a3 	rbit	r2, r3
 8004372:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	4bc0      	ldr	r3, [pc, #768]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004380:	2102      	movs	r1, #2
 8004382:	6011      	str	r1, [r2, #0]
 8004384:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	fa92 f1a2 	rbit	r1, r2
 800438e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004392:	6011      	str	r1, [r2, #0]
  return result;
 8004394:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	fab2 f282 	clz	r2, r2
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	f002 021f 	and.w	r2, r2, #31
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f202 	lsl.w	r2, r1, r2
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d09a      	beq.n	80042ec <HAL_RCC_OscConfig+0x8b4>
 80043b6:	e063      	b.n	8004480 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7fd fd16 	bl	8001de8 <HAL_GetTick>
 80043bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c0:	e00b      	b.n	80043da <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fd fd11 	bl	8001de8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e23c      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
 80043da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043de:	2202      	movs	r2, #2
 80043e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fa93 f2a3 	rbit	r2, r3
 80043ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80043f6:	2202      	movs	r2, #2
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fa93 f2a3 	rbit	r2, r3
 8004404:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004408:	601a      	str	r2, [r3, #0]
  return result;
 800440a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800440e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004410:	fab3 f383 	clz	r3, r3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f043 0302 	orr.w	r3, r3, #2
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d102      	bne.n	800442a <HAL_RCC_OscConfig+0x9f2>
 8004424:	4b95      	ldr	r3, [pc, #596]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	e00d      	b.n	8004446 <HAL_RCC_OscConfig+0xa0e>
 800442a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800442e:	2202      	movs	r2, #2
 8004430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	fa93 f2a3 	rbit	r2, r3
 800443c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	4b8e      	ldr	r3, [pc, #568]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800444a:	2102      	movs	r1, #2
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	fa92 f1a2 	rbit	r1, r2
 8004458:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800445c:	6011      	str	r1, [r2, #0]
  return result;
 800445e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	f002 021f 	and.w	r2, r2, #31
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1a0      	bne.n	80043c2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004480:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004488:	4b7c      	ldr	r3, [pc, #496]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4a7b      	ldr	r2, [pc, #492]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004492:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 81d9 	beq.w	8004852 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a0:	4b76      	ldr	r3, [pc, #472]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 030c 	and.w	r3, r3, #12
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	f000 81a6 	beq.w	80047fa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ae:	1d3b      	adds	r3, r7, #4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	f040 811e 	bne.w	80046f6 <HAL_RCC_OscConfig+0xcbe>
 80044ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80044be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	fa93 f2a3 	rbit	r2, r3
 80044ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044d2:	601a      	str	r2, [r3, #0]
  return result;
 80044d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	461a      	mov	r2, r3
 80044ec:	2300      	movs	r3, #0
 80044ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fd fc7a 	bl	8001de8 <HAL_GetTick>
 80044f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f8:	e009      	b.n	800450e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fd fc75 	bl	8001de8 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1a2      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
 800450e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	fa93 f2a3 	rbit	r2, r3
 8004522:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004526:	601a      	str	r2, [r3, #0]
  return result;
 8004528:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800452c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <HAL_RCC_OscConfig+0xb10>
 8004542:	4b4e      	ldr	r3, [pc, #312]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	e01b      	b.n	8004580 <HAL_RCC_OscConfig+0xb48>
 8004548:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800454c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	fa93 f2a3 	rbit	r2, r3
 800455c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	fa93 f2a3 	rbit	r2, r3
 8004576:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004584:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004588:	6011      	str	r1, [r2, #0]
 800458a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	fa92 f1a2 	rbit	r1, r2
 8004594:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004598:	6011      	str	r1, [r2, #0]
  return result;
 800459a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	fab2 f282 	clz	r2, r2
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	f042 0220 	orr.w	r2, r2, #32
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	f002 021f 	and.w	r2, r2, #31
 80045b0:	2101      	movs	r1, #1
 80045b2:	fa01 f202 	lsl.w	r2, r1, r2
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d19e      	bne.n	80044fa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045bc:	4b2f      	ldr	r3, [pc, #188]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	f023 020f 	bic.w	r2, r3, #15
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	492c      	ldr	r1, [pc, #176]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 80045d0:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80045d8:	1d3b      	adds	r3, r7, #4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a19      	ldr	r1, [r3, #32]
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	4925      	ldr	r1, [pc, #148]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
 80045ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	fa93 f2a3 	rbit	r2, r3
 8004600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004604:	601a      	str	r2, [r3, #0]
  return result;
 8004606:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800460a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460c:	fab3 f383 	clz	r3, r3
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004616:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	461a      	mov	r2, r3
 800461e:	2301      	movs	r3, #1
 8004620:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004622:	f7fd fbe1 	bl	8001de8 <HAL_GetTick>
 8004626:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800462a:	e009      	b.n	8004640 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462c:	f7fd fbdc 	bl	8001de8 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e109      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
 8004640:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004644:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	fa93 f2a3 	rbit	r2, r3
 8004654:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004658:	601a      	str	r2, [r3, #0]
  return result;
 800465a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800465e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_RCC_OscConfig+0xc48>
 8004674:	4b01      	ldr	r3, [pc, #4]	; (800467c <HAL_RCC_OscConfig+0xc44>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	e01e      	b.n	80046b8 <HAL_RCC_OscConfig+0xc80>
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	fa93 f2a3 	rbit	r2, r3
 8004694:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800469e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	fa93 f2a3 	rbit	r2, r3
 80046ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCC_OscConfig+0xe28>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80046bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	fa92 f1a2 	rbit	r1, r2
 80046cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046d0:	6011      	str	r1, [r2, #0]
  return result;
 80046d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	fab2 f282 	clz	r2, r2
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	f042 0220 	orr.w	r2, r2, #32
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	f002 021f 	and.w	r2, r2, #31
 80046e8:	2101      	movs	r1, #1
 80046ea:	fa01 f202 	lsl.w	r2, r1, r2
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d09b      	beq.n	800462c <HAL_RCC_OscConfig+0xbf4>
 80046f4:	e0ad      	b.n	8004852 <HAL_RCC_OscConfig+0xe1a>
 80046f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	fa93 f2a3 	rbit	r2, r3
 800470a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800470e:	601a      	str	r2, [r3, #0]
  return result;
 8004710:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004714:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004716:	fab3 f383 	clz	r3, r3
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004720:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	461a      	mov	r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fd fb5c 	bl	8001de8 <HAL_GetTick>
 8004730:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004734:	e009      	b.n	800474a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004736:	f7fd fb57 	bl	8001de8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e084      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
 800474a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800474e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	fa93 f2a3 	rbit	r2, r3
 800475e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004762:	601a      	str	r2, [r3, #0]
  return result;
 8004764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004768:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d102      	bne.n	8004784 <HAL_RCC_OscConfig+0xd4c>
 800477e:	4b38      	ldr	r3, [pc, #224]	; (8004860 <HAL_RCC_OscConfig+0xe28>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	e01b      	b.n	80047bc <HAL_RCC_OscConfig+0xd84>
 8004784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800478c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	fa93 f2a3 	rbit	r2, r3
 8004798:	f107 0320 	add.w	r3, r7, #32
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f107 031c 	add.w	r3, r7, #28
 80047a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f107 031c 	add.w	r3, r7, #28
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	fa93 f2a3 	rbit	r2, r3
 80047b2:	f107 0318 	add.w	r3, r7, #24
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	4b29      	ldr	r3, [pc, #164]	; (8004860 <HAL_RCC_OscConfig+0xe28>)
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f107 0214 	add.w	r2, r7, #20
 80047c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	f107 0214 	add.w	r2, r7, #20
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	fa92 f1a2 	rbit	r1, r2
 80047d0:	f107 0210 	add.w	r2, r7, #16
 80047d4:	6011      	str	r1, [r2, #0]
  return result;
 80047d6:	f107 0210 	add.w	r2, r7, #16
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	fab2 f282 	clz	r2, r2
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	f042 0220 	orr.w	r2, r2, #32
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f002 021f 	and.w	r2, r2, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d19e      	bne.n	8004736 <HAL_RCC_OscConfig+0xcfe>
 80047f8:	e02b      	b.n	8004852 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e025      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <HAL_RCC_OscConfig+0xe28>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <HAL_RCC_OscConfig+0xe28>)
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004818:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800481c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004820:	1d3b      	adds	r3, r7, #4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	429a      	cmp	r2, r3
 8004828:	d111      	bne.n	800484e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800482a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800482e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004838:	429a      	cmp	r2, r3
 800483a:	d108      	bne.n	800484e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800483c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004840:	f003 020f 	and.w	r2, r3, #15
 8004844:	1d3b      	adds	r3, r7, #4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800484a:	429a      	cmp	r2, r3
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000

08004864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b09e      	sub	sp, #120	; 0x78
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e162      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b90      	ldr	r3, [pc, #576]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d910      	bls.n	80048ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b8d      	ldr	r3, [pc, #564]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 0207 	bic.w	r2, r3, #7
 8004892:	498b      	ldr	r1, [pc, #556]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b89      	ldr	r3, [pc, #548]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e14a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b8:	4b82      	ldr	r3, [pc, #520]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	497f      	ldr	r1, [pc, #508]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80dc 	beq.w	8004a90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d13c      	bne.n	800495a <HAL_RCC_ClockConfig+0xf6>
 80048e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f0:	fab3 f383 	clz	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d102      	bne.n	800490a <HAL_RCC_ClockConfig+0xa6>
 8004904:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	e00f      	b.n	800492a <HAL_RCC_ClockConfig+0xc6>
 800490a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800490e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004912:	fa93 f3a3 	rbit	r3, r3
 8004916:	667b      	str	r3, [r7, #100]	; 0x64
 8004918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800491c:	663b      	str	r3, [r7, #96]	; 0x60
 800491e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004926:	4b67      	ldr	r3, [pc, #412]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800492e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004932:	fa92 f2a2 	rbit	r2, r2
 8004936:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800493a:	fab2 f282 	clz	r2, r2
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	f042 0220 	orr.w	r2, r2, #32
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	f002 021f 	and.w	r2, r2, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d17b      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0f3      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d13c      	bne.n	80049dc <HAL_RCC_ClockConfig+0x178>
 8004962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004966:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d102      	bne.n	800498c <HAL_RCC_ClockConfig+0x128>
 8004986:	4b4f      	ldr	r3, [pc, #316]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	e00f      	b.n	80049ac <HAL_RCC_ClockConfig+0x148>
 800498c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004990:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	647b      	str	r3, [r7, #68]	; 0x44
 800499a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800499e:	643b      	str	r3, [r7, #64]	; 0x40
 80049a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a8:	4b46      	ldr	r3, [pc, #280]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80049b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b4:	fa92 f2a2 	rbit	r2, r2
 80049b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80049ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049bc:	fab2 f282 	clz	r2, r2
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f042 0220 	orr.w	r2, r2, #32
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	f002 021f 	and.w	r2, r2, #31
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f202 	lsl.w	r2, r1, r2
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d13a      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b2      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
 80049dc:	2302      	movs	r3, #2
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x1a0>
 80049fe:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	e00d      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1bc>
 8004a04:	2302      	movs	r3, #2
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a10:	2302      	movs	r3, #2
 8004a12:	623b      	str	r3, [r7, #32]
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	fa93 f3a3 	rbit	r3, r3
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2202      	movs	r2, #2
 8004a22:	61ba      	str	r2, [r7, #24]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	fa92 f2a2 	rbit	r2, r2
 8004a2a:	617a      	str	r2, [r7, #20]
  return result;
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	fab2 f282 	clz	r2, r2
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	f042 0220 	orr.w	r2, r2, #32
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	f002 021f 	and.w	r2, r2, #31
 8004a3e:	2101      	movs	r1, #1
 8004a40:	fa01 f202 	lsl.w	r2, r1, r2
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e079      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	491a      	ldr	r1, [pc, #104]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a60:	f7fd f9c2 	bl	8001de8 <HAL_GetTick>
 8004a64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fd f9be 	bl	8001de8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e061      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 020c 	and.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1eb      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d214      	bcs.n	8004ac8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 0207 	bic.w	r2, r3, #7
 8004aa6:	4906      	ldr	r1, [pc, #24]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e040      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
 8004ac0:	40022000 	.word	0x40022000
 8004ac4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	491a      	ldr	r1, [pc, #104]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af2:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4912      	ldr	r1, [pc, #72]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b06:	f000 f829 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b14:	22f0      	movs	r2, #240	; 0xf0
 8004b16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	fa92 f2a2 	rbit	r2, r2
 8004b1e:	60fa      	str	r2, [r7, #12]
  return result;
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	fab2 f282 	clz	r2, r2
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	40d3      	lsrs	r3, r2
 8004b2a:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x2ec>)
 8004b2c:	5cd3      	ldrb	r3, [r2, r3]
 8004b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b32:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <HAL_RCC_ClockConfig+0x2f0>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCC_ClockConfig+0x2f4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd f910 	bl	8001d60 <HAL_InitTick>
  
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3778      	adds	r7, #120	; 0x78
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	0800a940 	.word	0x0800a940
 8004b54:	20000000 	.word	0x20000000
 8004b58:	20000004 	.word	0x20000004

08004b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b08b      	sub	sp, #44	; 0x2c
 8004b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	2300      	movs	r3, #0
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b76:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x30>
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x36>
 8004b8a:	e03f      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b8e:	623b      	str	r3, [r7, #32]
      break;
 8004b90:	e03f      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004b98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004b9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	fa92 f2a2 	rbit	r2, r2
 8004ba4:	607a      	str	r2, [r7, #4]
  return result;
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	fab2 f282 	clz	r2, r2
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	40d3      	lsrs	r3, r2
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bb2:	5cd3      	ldrb	r3, [r2, r3]
 8004bb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	220f      	movs	r2, #15
 8004bc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	fa92 f2a2 	rbit	r2, r2
 8004bc8:	60fa      	str	r2, [r7, #12]
  return result;
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	fab2 f282 	clz	r2, r2
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	40d3      	lsrs	r3, r2
 8004bd4:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004be4:	4a0f      	ldr	r2, [pc, #60]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf4:	e007      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004bf6:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	623b      	str	r3, [r7, #32]
      break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c0e:	623b      	str	r3, [r7, #32]
      break;
 8004c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	372c      	adds	r7, #44	; 0x2c
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40021000 	.word	0x40021000
 8004c24:	007a1200 	.word	0x007a1200
 8004c28:	0800a958 	.word	0x0800a958
 8004c2c:	0800a968 	.word	0x0800a968

08004c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000000 	.word	0x20000000

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004c4e:	f7ff ffef 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c52:	4601      	mov	r1, r0
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	fa92 f2a2 	rbit	r2, r2
 8004c68:	603a      	str	r2, [r7, #0]
  return result;
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	fab2 f282 	clz	r2, r2
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	40d3      	lsrs	r3, r2
 8004c74:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c76:	5cd3      	ldrb	r3, [r2, r3]
 8004c78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	0800a950 	.word	0x0800a950

08004c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c92:	f7ff ffcd 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c96:	4601      	mov	r1, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ca0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ca4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	fa92 f2a2 	rbit	r2, r2
 8004cac:	603a      	str	r2, [r7, #0]
  return result;
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	fab2 f282 	clz	r2, r2
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	40d3      	lsrs	r3, r2
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x40>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	0800a950 	.word	0x0800a950

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b092      	sub	sp, #72	; 0x48
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80d7 	beq.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
 8004d0c:	4b48      	ldr	r3, [pc, #288]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2a:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a41      	ldr	r2, [pc, #260]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fd f857 	bl	8001de8 <HAL_GetTick>
 8004d3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fd f853 	bl	8001de8 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e1d6      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d5c:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8084 	beq.w	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d07c      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	461a      	mov	r2, r3
 8004da6:	2301      	movs	r3, #1
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dce:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04b      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fd f803 	bl	8001de8 <HAL_GetTick>
 8004de2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fc ffff 	bl	8001de8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e180      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
 8004e08:	2302      	movs	r3, #2
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	61fb      	str	r3, [r7, #28]
  return result;
 8004e14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f043 0302 	orr.w	r3, r3, #2
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d108      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004e2a:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	e00d      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
 8004e38:	10908100 	.word	0x10908100
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	fa93 f3a3 	rbit	r3, r3
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	4ba0      	ldr	r3, [pc, #640]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	613a      	str	r2, [r7, #16]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	fa92 f2a2 	rbit	r2, r2
 8004e56:	60fa      	str	r2, [r7, #12]
  return result;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	f002 021f 	and.w	r2, r2, #31
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0b7      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e76:	4b95      	ldr	r3, [pc, #596]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4992      	ldr	r1, [pc, #584]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4b8e      	ldr	r3, [pc, #568]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4a8d      	ldr	r2, [pc, #564]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea8:	4b88      	ldr	r3, [pc, #544]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	f023 0203 	bic.w	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4985      	ldr	r1, [pc, #532]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec6:	4b81      	ldr	r3, [pc, #516]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	497e      	ldr	r1, [pc, #504]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee4:	4b79      	ldr	r3, [pc, #484]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	4976      	ldr	r1, [pc, #472]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f02:	4b72      	ldr	r3, [pc, #456]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	496f      	ldr	r1, [pc, #444]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f20:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	4967      	ldr	r1, [pc, #412]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f3e:	4b63      	ldr	r3, [pc, #396]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	f023 0220 	bic.w	r2, r3, #32
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	4960      	ldr	r1, [pc, #384]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f5c:	4b5b      	ldr	r3, [pc, #364]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	4958      	ldr	r1, [pc, #352]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f7a:	4b54      	ldr	r3, [pc, #336]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	4951      	ldr	r1, [pc, #324]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f98:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	4949      	ldr	r1, [pc, #292]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fb6:	4b45      	ldr	r3, [pc, #276]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	4942      	ldr	r1, [pc, #264]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fd4:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	493a      	ldr	r1, [pc, #232]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ff2:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	4933      	ldr	r1, [pc, #204]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005000:	4313      	orrs	r3, r2
 8005002:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005010:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	492b      	ldr	r1, [pc, #172]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800501e:	4313      	orrs	r3, r2
 8005020:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800502e:	4b27      	ldr	r3, [pc, #156]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	4924      	ldr	r1, [pc, #144]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800504c:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	491c      	ldr	r1, [pc, #112]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800506a:	4b18      	ldr	r3, [pc, #96]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	4915      	ldr	r1, [pc, #84]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005088:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	490d      	ldr	r1, [pc, #52]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b2:	4906      	ldr	r1, [pc, #24]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80050c4:	4b01      	ldr	r3, [pc, #4]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	e002      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d8:	490b      	ldr	r1, [pc, #44]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d008      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	4904      	ldr	r1, [pc, #16]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3748      	adds	r7, #72	; 0x48
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000

0800510c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e040      	b.n	80051a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fc fca6 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f98c 	bl	8005468 <UART_SetConfig>
 8005150:	4603      	mov	r3, r0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e022      	b.n	80051a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fb9a 	bl	800589c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fc21 	bl	80059e0 <UART_CheckIdleState>
 800519e:	4603      	mov	r3, r0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	; 0x28
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051bc:	2b20      	cmp	r3, #32
 80051be:	f040 8081 	bne.w	80052c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_UART_Transmit+0x26>
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e079      	b.n	80052c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_UART_Transmit+0x38>
 80051dc:	2302      	movs	r3, #2
 80051de:	e072      	b.n	80052c6 <HAL_UART_Transmit+0x11e>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2221      	movs	r2, #33	; 0x21
 80051f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc fdf8 	bl	8001de8 <HAL_GetTick>
 80051f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005212:	d108      	bne.n	8005226 <HAL_UART_Transmit+0x7e>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	e003      	b.n	800522e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800522e:	e02d      	b.n	800528c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fc15 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e03d      	b.n	80052c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	881a      	ldrh	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800525c:	b292      	uxth	r2, r2
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	3302      	adds	r3, #2
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e008      	b.n	800527a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	781a      	ldrb	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	b292      	uxth	r2, r2
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	3301      	adds	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1cb      	bne.n	8005230 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fbe1 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e009      	b.n	80052c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b08a      	sub	sp, #40	; 0x28
 80052d2:	af02      	add	r7, sp, #8
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	4613      	mov	r3, r2
 80052dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	f040 80bb 	bne.w	800545e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_UART_Receive+0x26>
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0b3      	b.n	8005460 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_UART_Receive+0x38>
 8005302:	2302      	movs	r3, #2
 8005304:	e0ac      	b.n	8005460 <HAL_UART_Receive+0x192>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2222      	movs	r2, #34	; 0x22
 8005318:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800531a:	f7fc fd65 	bl	8001de8 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d10e      	bne.n	8005358 <HAL_UART_Receive+0x8a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <HAL_UART_Receive+0x80>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005348:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800534c:	e02d      	b.n	80053aa <HAL_UART_Receive+0xdc>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	22ff      	movs	r2, #255	; 0xff
 8005352:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005356:	e028      	b.n	80053aa <HAL_UART_Receive+0xdc>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <HAL_UART_Receive+0xae>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_UART_Receive+0xa4>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	22ff      	movs	r2, #255	; 0xff
 800536c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005370:	e01b      	b.n	80053aa <HAL_UART_Receive+0xdc>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	227f      	movs	r2, #127	; 0x7f
 8005376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800537a:	e016      	b.n	80053aa <HAL_UART_Receive+0xdc>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005384:	d10d      	bne.n	80053a2 <HAL_UART_Receive+0xd4>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <HAL_UART_Receive+0xca>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	227f      	movs	r2, #127	; 0x7f
 8005392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005396:	e008      	b.n	80053aa <HAL_UART_Receive+0xdc>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	223f      	movs	r2, #63	; 0x3f
 800539c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053a0:	e003      	b.n	80053aa <HAL_UART_Receive+0xdc>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	d108      	bne.n	80053ce <HAL_UART_Receive+0x100>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	e003      	b.n	80053d6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80053d6:	e033      	b.n	8005440 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2200      	movs	r2, #0
 80053e0:	2120      	movs	r1, #32
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fb41 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e036      	b.n	8005460 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10c      	bne.n	8005412 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80053fe:	b29a      	uxth	r2, r3
 8005400:	8a7b      	ldrh	r3, [r7, #18]
 8005402:	4013      	ands	r3, r2
 8005404:	b29a      	uxth	r2, r3
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	3302      	adds	r3, #2
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	e00d      	b.n	800542e <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005418:	b29b      	uxth	r3, r3
 800541a:	b2da      	uxtb	r2, r3
 800541c:	8a7b      	ldrh	r3, [r7, #18]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4013      	ands	r3, r2
 8005422:	b2da      	uxtb	r2, r3
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3301      	adds	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1c5      	bne.n	80053d8 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e000      	b.n	8005460 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800545e:	2302      	movs	r3, #2
  }
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4bac      	ldr	r3, [pc, #688]	; (8005748 <UART_SetConfig+0x2e0>)
 8005498:	4013      	ands	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	6939      	ldr	r1, [r7, #16]
 80054a0:	430b      	orrs	r3, r1
 80054a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a9a      	ldr	r2, [pc, #616]	; (800574c <UART_SetConfig+0x2e4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d121      	bne.n	800552c <UART_SetConfig+0xc4>
 80054e8:	4b99      	ldr	r3, [pc, #612]	; (8005750 <UART_SetConfig+0x2e8>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d817      	bhi.n	8005524 <UART_SetConfig+0xbc>
 80054f4:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <UART_SetConfig+0x94>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	08005519 	.word	0x08005519
 8005504:	0800551f 	.word	0x0800551f
 8005508:	08005513 	.word	0x08005513
 800550c:	2301      	movs	r3, #1
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e0b2      	b.n	8005678 <UART_SetConfig+0x210>
 8005512:	2302      	movs	r3, #2
 8005514:	77fb      	strb	r3, [r7, #31]
 8005516:	e0af      	b.n	8005678 <UART_SetConfig+0x210>
 8005518:	2304      	movs	r3, #4
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e0ac      	b.n	8005678 <UART_SetConfig+0x210>
 800551e:	2308      	movs	r3, #8
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e0a9      	b.n	8005678 <UART_SetConfig+0x210>
 8005524:	2310      	movs	r3, #16
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	bf00      	nop
 800552a:	e0a5      	b.n	8005678 <UART_SetConfig+0x210>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a88      	ldr	r2, [pc, #544]	; (8005754 <UART_SetConfig+0x2ec>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d123      	bne.n	800557e <UART_SetConfig+0x116>
 8005536:	4b86      	ldr	r3, [pc, #536]	; (8005750 <UART_SetConfig+0x2e8>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800553e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005542:	d012      	beq.n	800556a <UART_SetConfig+0x102>
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005548:	d802      	bhi.n	8005550 <UART_SetConfig+0xe8>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <UART_SetConfig+0xf6>
 800554e:	e012      	b.n	8005576 <UART_SetConfig+0x10e>
 8005550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005554:	d00c      	beq.n	8005570 <UART_SetConfig+0x108>
 8005556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800555a:	d003      	beq.n	8005564 <UART_SetConfig+0xfc>
 800555c:	e00b      	b.n	8005576 <UART_SetConfig+0x10e>
 800555e:	2300      	movs	r3, #0
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e089      	b.n	8005678 <UART_SetConfig+0x210>
 8005564:	2302      	movs	r3, #2
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e086      	b.n	8005678 <UART_SetConfig+0x210>
 800556a:	2304      	movs	r3, #4
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e083      	b.n	8005678 <UART_SetConfig+0x210>
 8005570:	2308      	movs	r3, #8
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e080      	b.n	8005678 <UART_SetConfig+0x210>
 8005576:	2310      	movs	r3, #16
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	bf00      	nop
 800557c:	e07c      	b.n	8005678 <UART_SetConfig+0x210>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a75      	ldr	r2, [pc, #468]	; (8005758 <UART_SetConfig+0x2f0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d123      	bne.n	80055d0 <UART_SetConfig+0x168>
 8005588:	4b71      	ldr	r3, [pc, #452]	; (8005750 <UART_SetConfig+0x2e8>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005590:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005594:	d012      	beq.n	80055bc <UART_SetConfig+0x154>
 8005596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800559a:	d802      	bhi.n	80055a2 <UART_SetConfig+0x13a>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <UART_SetConfig+0x148>
 80055a0:	e012      	b.n	80055c8 <UART_SetConfig+0x160>
 80055a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055a6:	d00c      	beq.n	80055c2 <UART_SetConfig+0x15a>
 80055a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055ac:	d003      	beq.n	80055b6 <UART_SetConfig+0x14e>
 80055ae:	e00b      	b.n	80055c8 <UART_SetConfig+0x160>
 80055b0:	2300      	movs	r3, #0
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e060      	b.n	8005678 <UART_SetConfig+0x210>
 80055b6:	2302      	movs	r3, #2
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e05d      	b.n	8005678 <UART_SetConfig+0x210>
 80055bc:	2304      	movs	r3, #4
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e05a      	b.n	8005678 <UART_SetConfig+0x210>
 80055c2:	2308      	movs	r3, #8
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e057      	b.n	8005678 <UART_SetConfig+0x210>
 80055c8:	2310      	movs	r3, #16
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	bf00      	nop
 80055ce:	e053      	b.n	8005678 <UART_SetConfig+0x210>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a61      	ldr	r2, [pc, #388]	; (800575c <UART_SetConfig+0x2f4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d123      	bne.n	8005622 <UART_SetConfig+0x1ba>
 80055da:	4b5d      	ldr	r3, [pc, #372]	; (8005750 <UART_SetConfig+0x2e8>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80055e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e6:	d012      	beq.n	800560e <UART_SetConfig+0x1a6>
 80055e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ec:	d802      	bhi.n	80055f4 <UART_SetConfig+0x18c>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <UART_SetConfig+0x19a>
 80055f2:	e012      	b.n	800561a <UART_SetConfig+0x1b2>
 80055f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f8:	d00c      	beq.n	8005614 <UART_SetConfig+0x1ac>
 80055fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055fe:	d003      	beq.n	8005608 <UART_SetConfig+0x1a0>
 8005600:	e00b      	b.n	800561a <UART_SetConfig+0x1b2>
 8005602:	2300      	movs	r3, #0
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e037      	b.n	8005678 <UART_SetConfig+0x210>
 8005608:	2302      	movs	r3, #2
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e034      	b.n	8005678 <UART_SetConfig+0x210>
 800560e:	2304      	movs	r3, #4
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e031      	b.n	8005678 <UART_SetConfig+0x210>
 8005614:	2308      	movs	r3, #8
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e02e      	b.n	8005678 <UART_SetConfig+0x210>
 800561a:	2310      	movs	r3, #16
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	bf00      	nop
 8005620:	e02a      	b.n	8005678 <UART_SetConfig+0x210>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a4e      	ldr	r2, [pc, #312]	; (8005760 <UART_SetConfig+0x2f8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d123      	bne.n	8005674 <UART_SetConfig+0x20c>
 800562c:	4b48      	ldr	r3, [pc, #288]	; (8005750 <UART_SetConfig+0x2e8>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005638:	d012      	beq.n	8005660 <UART_SetConfig+0x1f8>
 800563a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800563e:	d802      	bhi.n	8005646 <UART_SetConfig+0x1de>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <UART_SetConfig+0x1ec>
 8005644:	e012      	b.n	800566c <UART_SetConfig+0x204>
 8005646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800564a:	d00c      	beq.n	8005666 <UART_SetConfig+0x1fe>
 800564c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005650:	d003      	beq.n	800565a <UART_SetConfig+0x1f2>
 8005652:	e00b      	b.n	800566c <UART_SetConfig+0x204>
 8005654:	2300      	movs	r3, #0
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e00e      	b.n	8005678 <UART_SetConfig+0x210>
 800565a:	2302      	movs	r3, #2
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e00b      	b.n	8005678 <UART_SetConfig+0x210>
 8005660:	2304      	movs	r3, #4
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e008      	b.n	8005678 <UART_SetConfig+0x210>
 8005666:	2308      	movs	r3, #8
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e005      	b.n	8005678 <UART_SetConfig+0x210>
 800566c:	2310      	movs	r3, #16
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	bf00      	nop
 8005672:	e001      	b.n	8005678 <UART_SetConfig+0x210>
 8005674:	2310      	movs	r3, #16
 8005676:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005680:	f040 8090 	bne.w	80057a4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8005684:	7ffb      	ldrb	r3, [r7, #31]
 8005686:	2b08      	cmp	r3, #8
 8005688:	d86c      	bhi.n	8005764 <UART_SetConfig+0x2fc>
 800568a:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <UART_SetConfig+0x228>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056d5 	.word	0x080056d5
 8005698:	080056f5 	.word	0x080056f5
 800569c:	08005765 	.word	0x08005765
 80056a0:	08005711 	.word	0x08005711
 80056a4:	08005765 	.word	0x08005765
 80056a8:	08005765 	.word	0x08005765
 80056ac:	08005765 	.word	0x08005765
 80056b0:	08005731 	.word	0x08005731
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b4:	f7ff fac8 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 80056b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	005a      	lsls	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	441a      	add	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	61bb      	str	r3, [r7, #24]
        break;
 80056d2:	e04a      	b.n	800576a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7ff fada 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 80056d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	005a      	lsls	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	441a      	add	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	61bb      	str	r3, [r7, #24]
        break;
 80056f2:	e03a      	b.n	800576a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80056fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6852      	ldr	r2, [r2, #4]
 8005706:	fbb3 f3f2 	udiv	r3, r3, r2
 800570a:	b29b      	uxth	r3, r3
 800570c:	61bb      	str	r3, [r7, #24]
        break;
 800570e:	e02c      	b.n	800576a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005710:	f7ff fa24 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8005714:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	005a      	lsls	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	fbb2 f3f3 	udiv	r3, r2, r3
 800572a:	b29b      	uxth	r3, r3
 800572c:	61bb      	str	r3, [r7, #24]
        break;
 800572e:	e01c      	b.n	800576a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005742:	b29b      	uxth	r3, r3
 8005744:	61bb      	str	r3, [r7, #24]
        break;
 8005746:	e010      	b.n	800576a <UART_SetConfig+0x302>
 8005748:	efff69f3 	.word	0xefff69f3
 800574c:	40013800 	.word	0x40013800
 8005750:	40021000 	.word	0x40021000
 8005754:	40004400 	.word	0x40004400
 8005758:	40004800 	.word	0x40004800
 800575c:	40004c00 	.word	0x40004c00
 8005760:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	75fb      	strb	r3, [r7, #23]
        break;
 8005768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2b0f      	cmp	r3, #15
 800576e:	d916      	bls.n	800579e <UART_SetConfig+0x336>
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005776:	d212      	bcs.n	800579e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f023 030f 	bic.w	r3, r3, #15
 8005780:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	b29b      	uxth	r3, r3
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	b29a      	uxth	r2, r3
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	4313      	orrs	r3, r2
 8005792:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	897a      	ldrh	r2, [r7, #10]
 800579a:	60da      	str	r2, [r3, #12]
 800579c:	e072      	b.n	8005884 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	75fb      	strb	r3, [r7, #23]
 80057a2:	e06f      	b.n	8005884 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80057a4:	7ffb      	ldrb	r3, [r7, #31]
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d85b      	bhi.n	8005862 <UART_SetConfig+0x3fa>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0x348>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057f3 	.word	0x080057f3
 80057b8:	08005811 	.word	0x08005811
 80057bc:	08005863 	.word	0x08005863
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	08005863 	.word	0x08005863
 80057c8:	08005863 	.word	0x08005863
 80057cc:	08005863 	.word	0x08005863
 80057d0:	0800584b 	.word	0x0800584b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7ff fa38 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 80057d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	085a      	lsrs	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	441a      	add	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	61bb      	str	r3, [r7, #24]
        break;
 80057f0:	e03a      	b.n	8005868 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f2:	f7ff fa4b 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 80057f6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	085a      	lsrs	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	b29b      	uxth	r3, r3
 800580c:	61bb      	str	r3, [r7, #24]
        break;
 800580e:	e02b      	b.n	8005868 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800581a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6852      	ldr	r2, [r2, #4]
 8005822:	fbb3 f3f2 	udiv	r3, r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	61bb      	str	r3, [r7, #24]
        break;
 800582a:	e01d      	b.n	8005868 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582c:	f7ff f996 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8005830:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	085a      	lsrs	r2, r3, #1
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	441a      	add	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	b29b      	uxth	r3, r3
 8005846:	61bb      	str	r3, [r7, #24]
        break;
 8005848:	e00e      	b.n	8005868 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	b29b      	uxth	r3, r3
 800585e:	61bb      	str	r3, [r7, #24]
        break;
 8005860:	e002      	b.n	8005868 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
        break;
 8005866:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b0f      	cmp	r3, #15
 800586c:	d908      	bls.n	8005880 <UART_SetConfig+0x418>
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005874:	d204      	bcs.n	8005880 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e001      	b.n	8005884 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005890:	7dfb      	ldrb	r3, [r7, #23]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01a      	beq.n	80059b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599a:	d10a      	bne.n	80059b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]
  }
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80059ee:	f7fc f9fb 	bl	8001de8 <HAL_GetTick>
 80059f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d10e      	bne.n	8005a20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f82a 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e020      	b.n	8005a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d10e      	bne.n	8005a4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f814 	bl	8005a6a <UART_WaitOnFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e00a      	b.n	8005a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	4613      	mov	r3, r2
 8005a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7a:	e05d      	b.n	8005b38 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d059      	beq.n	8005b38 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a84:	f7fc f9b0 	bl	8001de8 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d11b      	bne.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aa8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e042      	b.n	8005b58 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02b      	beq.n	8005b38 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aee:	d123      	bne.n	8005b38 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e00f      	b.n	8005b58 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4013      	ands	r3, r2
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d092      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_ZdlPvj>:
 8005b60:	f000 b800 	b.w	8005b64 <_ZdlPv>

08005b64 <_ZdlPv>:
 8005b64:	f000 ba00 	b.w	8005f68 <free>

08005b68 <_ZSt19__throw_logic_errorPKc>:
 8005b68:	b508      	push	{r3, lr}
 8005b6a:	f000 f9b1 	bl	8005ed0 <abort>

08005b6e <_ZSt24__throw_invalid_argumentPKc>:
 8005b6e:	b508      	push	{r3, lr}
 8005b70:	f000 f9ae 	bl	8005ed0 <abort>

08005b74 <_ZSt20__throw_length_errorPKc>:
 8005b74:	b508      	push	{r3, lr}
 8005b76:	f000 f9ab 	bl	8005ed0 <abort>

08005b7a <_ZSt20__throw_out_of_rangePKc>:
 8005b7a:	b508      	push	{r3, lr}
 8005b7c:	f000 f9a8 	bl	8005ed0 <abort>

08005b80 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8005b80:	b40f      	push	{r0, r1, r2, r3}
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	f107 0410 	add.w	r4, r7, #16
 8005b8c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005b90:	4628      	mov	r0, r5
 8005b92:	f7fa fb75 	bl	8000280 <strlen>
 8005b96:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8005b9a:	f023 0307 	bic.w	r3, r3, #7
 8005b9e:	ebad 0d03 	sub.w	sp, sp, r3
 8005ba2:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	462a      	mov	r2, r5
 8005baa:	4668      	mov	r0, sp
 8005bac:	607c      	str	r4, [r7, #4]
 8005bae:	f000 f94f 	bl	8005e50 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8005bb2:	f000 f98d 	bl	8005ed0 <abort>

08005bb6 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005bb6:	b10a      	cbz	r2, 8005bbc <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8005bb8:	f000 b9de 	b.w	8005f78 <memcpy>
 8005bbc:	4770      	bx	lr
	...

08005bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005bc0:	b508      	push	{r3, lr}
 8005bc2:	680b      	ldr	r3, [r1, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	da02      	bge.n	8005bce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005bc8:	4809      	ldr	r0, [pc, #36]	; (8005bf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8005bca:	f7ff ffd3 	bl	8005b74 <_ZSt20__throw_length_errorPKc>
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d908      	bls.n	8005be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005bd2:	0052      	lsls	r2, r2, #1
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d205      	bcs.n	8005be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	bfb6      	itet	lt
 8005bdc:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8005be0:	600a      	strge	r2, [r1, #0]
 8005be2:	600b      	strlt	r3, [r1, #0]
 8005be4:	6808      	ldr	r0, [r1, #0]
 8005be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005bea:	3001      	adds	r0, #1
 8005bec:	f000 b8c8 	b.w	8005d80 <_Znwj>
 8005bf0:	0800a9c3 	.word	0x0800a9c3

08005bf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f853 0b08 	ldr.w	r0, [r3], #8
 8005bfa:	4298      	cmp	r0, r3
 8005bfc:	d001      	beq.n	8005c02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8005bfe:	f7ff bfb1 	b.w	8005b64 <_ZdlPv>
 8005c02:	4770      	bx	lr

08005c04 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	6843      	ldr	r3, [r0, #4]
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	4614      	mov	r4, r2
 8005c0c:	d904      	bls.n	8005c18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8005c0e:	460a      	mov	r2, r1
 8005c10:	4802      	ldr	r0, [pc, #8]	; (8005c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8005c12:	4621      	mov	r1, r4
 8005c14:	f7ff ffb4 	bl	8005b80 <_ZSt24__throw_out_of_range_fmtPKcz>
 8005c18:	4608      	mov	r0, r1
 8005c1a:	bd10      	pop	{r4, pc}
 8005c1c:	0800a978 	.word	0x0800a978

08005c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005c20:	2a01      	cmp	r2, #1
 8005c22:	b510      	push	{r4, lr}
 8005c24:	d102      	bne.n	8005c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005c26:	780a      	ldrb	r2, [r1, #0]
 8005c28:	7002      	strb	r2, [r0, #0]
 8005c2a:	bd10      	pop	{r4, pc}
 8005c2c:	f7ff ffc3 	bl	8005bb6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005c30:	e7fb      	b.n	8005c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005c32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8005c32:	2a01      	cmp	r2, #1
 8005c34:	b430      	push	{r4, r5}
 8005c36:	d103      	bne.n	8005c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8005c38:	780b      	ldrb	r3, [r1, #0]
 8005c3a:	7003      	strb	r3, [r0, #0]
 8005c3c:	bc30      	pop	{r4, r5}
 8005c3e:	4770      	bx	lr
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d0fb      	beq.n	8005c3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8005c44:	bc30      	pop	{r4, r5}
 8005c46:	f000 b9a2 	b.w	8005f8e <memmove>

08005c4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8005c4a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8005c52:	4616      	mov	r6, r2
 8005c54:	6842      	ldr	r2, [r0, #4]
 8005c56:	469a      	mov	sl, r3
 8005c58:	eba8 0306 	sub.w	r3, r8, r6
 8005c5c:	1a57      	subs	r7, r2, r1
 8005c5e:	4413      	add	r3, r2
 8005c60:	6802      	ldr	r2, [r0, #0]
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	f100 0308 	add.w	r3, r0, #8
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	460d      	mov	r5, r1
 8005c6c:	bf14      	ite	ne
 8005c6e:	6882      	ldrne	r2, [r0, #8]
 8005c70:	220f      	moveq	r2, #15
 8005c72:	a901      	add	r1, sp, #4
 8005c74:	4604      	mov	r4, r0
 8005c76:	f7ff ffa3 	bl	8005bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005c7a:	1bbf      	subs	r7, r7, r6
 8005c7c:	4681      	mov	r9, r0
 8005c7e:	b11d      	cbz	r5, 8005c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8005c80:	462a      	mov	r2, r5
 8005c82:	6821      	ldr	r1, [r4, #0]
 8005c84:	f7ff ffcc 	bl	8005c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005c88:	f1ba 0f00 	cmp.w	sl, #0
 8005c8c:	d008      	beq.n	8005ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	d005      	beq.n	8005ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8005c94:	4642      	mov	r2, r8
 8005c96:	4651      	mov	r1, sl
 8005c98:	eb09 0005 	add.w	r0, r9, r5
 8005c9c:	f7ff ffc0 	bl	8005c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005ca0:	b147      	cbz	r7, 8005cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8005ca2:	6821      	ldr	r1, [r4, #0]
 8005ca4:	442e      	add	r6, r5
 8005ca6:	eb05 0008 	add.w	r0, r5, r8
 8005caa:	463a      	mov	r2, r7
 8005cac:	4431      	add	r1, r6
 8005cae:	4448      	add	r0, r9
 8005cb0:	f7ff ffb6 	bl	8005c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f7ff ff9d 	bl	8005bf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005cba:	9b01      	ldr	r3, [sp, #4]
 8005cbc:	f8c4 9000 	str.w	r9, [r4]
 8005cc0:	60a3      	str	r3, [r4, #8]
 8005cc2:	b002      	add	sp, #8
 8005cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4615      	mov	r5, r2
 8005ccc:	6842      	ldr	r2, [r0, #4]
 8005cce:	1a52      	subs	r2, r2, r1
 8005cd0:	1b52      	subs	r2, r2, r5
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	d006      	beq.n	8005ce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1e>
 8005cd8:	b12d      	cbz	r5, 8005ce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1e>
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	4429      	add	r1, r5
 8005cde:	4401      	add	r1, r0
 8005ce0:	4418      	add	r0, r3
 8005ce2:	f7ff ffa6 	bl	8005c32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	1b5d      	subs	r5, r3, r5
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	6065      	str	r5, [r4, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	555a      	strb	r2, [r3, r5]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}

08005cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8005cf4:	f100 0208 	add.w	r2, r0, #8
 8005cf8:	6002      	str	r2, [r0, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	6042      	str	r2, [r0, #4]
 8005cfe:	7202      	strb	r2, [r0, #8]
 8005d00:	4770      	bx	lr

08005d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8005d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d04:	6802      	ldr	r2, [r0, #0]
 8005d06:	6846      	ldr	r6, [r0, #4]
 8005d08:	f100 0308 	add.w	r3, r0, #8
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	bf18      	it	ne
 8005d10:	6883      	ldrne	r3, [r0, #8]
 8005d12:	f106 0501 	add.w	r5, r6, #1
 8005d16:	bf08      	it	eq
 8005d18:	230f      	moveq	r3, #15
 8005d1a:	429d      	cmp	r5, r3
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	460f      	mov	r7, r1
 8005d20:	d906      	bls.n	8005d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 8005d22:	2301      	movs	r3, #1
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2300      	movs	r3, #0
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	f7ff ff8d 	bl	8005c4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	559f      	strb	r7, [r3, r6]
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	6065      	str	r5, [r4, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	555a      	strb	r2, [r3, r5]
 8005d3c:	b003      	add	sp, #12
 8005d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	4616      	mov	r6, r2
 8005d44:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x38>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	460d      	mov	r5, r1
 8005d4a:	f7ff ff5b 	bl	8005c04 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8005d4e:	1c73      	adds	r3, r6, #1
 8005d50:	d105      	bne.n	8005d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1e>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	6065      	str	r5, [r4, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	555a      	strb	r2, [r3, r5]
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d0fb      	beq.n	8005d5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 8005d62:	6862      	ldr	r2, [r4, #4]
 8005d64:	1b52      	subs	r2, r2, r5
 8005d66:	42b2      	cmp	r2, r6
 8005d68:	bf28      	it	cs
 8005d6a:	4632      	movcs	r2, r6
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f7ff ffaa 	bl	8005cc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8005d74:	e7f1      	b.n	8005d5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 8005d76:	bf00      	nop
 8005d78:	0800a9af 	.word	0x0800a9af

08005d7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	4770      	bx	lr

08005d80 <_Znwj>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	2800      	cmp	r0, #0
 8005d84:	bf14      	ite	ne
 8005d86:	4604      	movne	r4, r0
 8005d88:	2401      	moveq	r4, #1
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 f8e4 	bl	8005f58 <malloc>
 8005d90:	b930      	cbnz	r0, 8005da0 <_Znwj+0x20>
 8005d92:	f000 f807 	bl	8005da4 <_ZSt15get_new_handlerv>
 8005d96:	b908      	cbnz	r0, 8005d9c <_Znwj+0x1c>
 8005d98:	f000 f89a 	bl	8005ed0 <abort>
 8005d9c:	4780      	blx	r0
 8005d9e:	e7f4      	b.n	8005d8a <_Znwj+0xa>
 8005da0:	bd10      	pop	{r4, pc}
	...

08005da4 <_ZSt15get_new_handlerv>:
 8005da4:	4b02      	ldr	r3, [pc, #8]	; (8005db0 <_ZSt15get_new_handlerv+0xc>)
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	f3bf 8f5b 	dmb	ish
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	2000035c 	.word	0x2000035c

08005db4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b09c      	sub	sp, #112	; 0x70
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	1a0e      	subs	r6, r1, r0
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	2269      	movs	r2, #105	; 0x69
 8005dc0:	490e      	ldr	r1, [pc, #56]	; (8005dfc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8005dc2:	1d38      	adds	r0, r7, #4
 8005dc4:	f000 f8d8 	bl	8005f78 <memcpy>
 8005dc8:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	ebad 0d03 	sub.w	sp, sp, r3
 8005dd4:	466c      	mov	r4, sp
 8005dd6:	2268      	movs	r2, #104	; 0x68
 8005dd8:	1d39      	adds	r1, r7, #4
 8005dda:	1c75      	adds	r5, r6, #1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 f8cb 	bl	8005f78 <memcpy>
 8005de2:	4425      	add	r5, r4
 8005de4:	4632      	mov	r2, r6
 8005de6:	4641      	mov	r1, r8
 8005de8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005dec:	f000 f8c4 	bl	8005f78 <memcpy>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8005df6:	4620      	mov	r0, r4
 8005df8:	f7ff feb6 	bl	8005b68 <_ZSt19__throw_logic_errorPKc>
 8005dfc:	0800a9e6 	.word	0x0800a9e6

08005e00 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	b086      	sub	sp, #24
 8005e06:	466d      	mov	r5, sp
 8005e08:	f105 040c 	add.w	r4, r5, #12
 8005e0c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005e4c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8005e10:	4623      	mov	r3, r4
 8005e12:	f04f 0c0a 	mov.w	ip, #10
 8005e16:	fbb2 f6fc 	udiv	r6, r2, ip
 8005e1a:	fb0c 2216 	mls	r2, ip, r6, r2
 8005e1e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8005e22:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8005e26:	4632      	mov	r2, r6
 8005e28:	2e00      	cmp	r6, #0
 8005e2a:	d1f4      	bne.n	8005e16 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8005e2c:	1ae4      	subs	r4, r4, r3
 8005e2e:	428c      	cmp	r4, r1
 8005e30:	d808      	bhi.n	8005e44 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8005e32:	f1c4 010c 	rsb	r1, r4, #12
 8005e36:	4622      	mov	r2, r4
 8005e38:	4429      	add	r1, r5
 8005e3a:	f000 f89d 	bl	8005f78 <memcpy>
 8005e3e:	4620      	mov	r0, r4
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e44:	f04f 34ff 	mov.w	r4, #4294967295
 8005e48:	e7f9      	b.n	8005e3e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8005e4a:	bf00      	nop
 8005e4c:	0800a9db 	.word	0x0800a9db

08005e50 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8005e50:	3901      	subs	r1, #1
 8005e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	4606      	mov	r6, r0
 8005e58:	4615      	mov	r5, r2
 8005e5a:	1847      	adds	r7, r0, r1
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	782a      	ldrb	r2, [r5, #0]
 8005e60:	b392      	cbz	r2, 8005ec8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 8005e62:	42bc      	cmp	r4, r7
 8005e64:	d22c      	bcs.n	8005ec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8005e66:	2a25      	cmp	r2, #37	; 0x25
 8005e68:	d107      	bne.n	8005e7a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8005e6a:	786a      	ldrb	r2, [r5, #1]
 8005e6c:	2a73      	cmp	r2, #115	; 0x73
 8005e6e:	d009      	beq.n	8005e84 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 8005e70:	2a7a      	cmp	r2, #122	; 0x7a
 8005e72:	d012      	beq.n	8005e9a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 8005e74:	2a25      	cmp	r2, #37	; 0x25
 8005e76:	d100      	bne.n	8005e7a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8005e78:	3501      	adds	r5, #1
 8005e7a:	782a      	ldrb	r2, [r5, #0]
 8005e7c:	7022      	strb	r2, [r4, #0]
 8005e7e:	3501      	adds	r5, #1
 8005e80:	3401      	adds	r4, #1
 8005e82:	e7ec      	b.n	8005e5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005e84:	1d19      	adds	r1, r3, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005e8e:	b1a2      	cbz	r2, 8005eba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 8005e90:	42bc      	cmp	r4, r7
 8005e92:	d015      	beq.n	8005ec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8005e94:	f804 2b01 	strb.w	r2, [r4], #1
 8005e98:	e7f7      	b.n	8005e8a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 8005e9a:	78aa      	ldrb	r2, [r5, #2]
 8005e9c:	2a75      	cmp	r2, #117	; 0x75
 8005e9e:	d1ec      	bne.n	8005e7a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	1b39      	subs	r1, r7, r4
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f103 0804 	add.w	r8, r3, #4
 8005eaa:	f7ff ffa9 	bl	8005e00 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	dd06      	ble.n	8005ec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8005eb2:	4404      	add	r4, r0
 8005eb4:	3503      	adds	r5, #3
 8005eb6:	4643      	mov	r3, r8
 8005eb8:	e7d1      	b.n	8005e5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005eba:	3502      	adds	r5, #2
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	e7ce      	b.n	8005e5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7ff ff76 	bl	8005db4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8005ec8:	7022      	strb	r2, [r4, #0]
 8005eca:	1ba0      	subs	r0, r4, r6
 8005ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ed0 <abort>:
 8005ed0:	b508      	push	{r3, lr}
 8005ed2:	2006      	movs	r0, #6
 8005ed4:	f001 f830 	bl	8006f38 <raise>
 8005ed8:	2001      	movs	r0, #1
 8005eda:	f7fb fe81 	bl	8001be0 <_exit>
	...

08005ee0 <__errno>:
 8005ee0:	4b01      	ldr	r3, [pc, #4]	; (8005ee8 <__errno+0x8>)
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	2000000c 	.word	0x2000000c

08005eec <getchar>:
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <getchar+0x20>)
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	681c      	ldr	r4, [r3, #0]
 8005ef2:	b124      	cbz	r4, 8005efe <getchar+0x12>
 8005ef4:	69a3      	ldr	r3, [r4, #24]
 8005ef6:	b913      	cbnz	r3, 8005efe <getchar+0x12>
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f002 ff23 	bl	8008d44 <__sinit>
 8005efe:	6861      	ldr	r1, [r4, #4]
 8005f00:	4620      	mov	r0, r4
 8005f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f06:	f003 bae9 	b.w	80094dc <_getc_r>
 8005f0a:	bf00      	nop
 8005f0c:	2000000c 	.word	0x2000000c

08005f10 <__libc_init_array>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4e0d      	ldr	r6, [pc, #52]	; (8005f48 <__libc_init_array+0x38>)
 8005f14:	4c0d      	ldr	r4, [pc, #52]	; (8005f4c <__libc_init_array+0x3c>)
 8005f16:	1ba4      	subs	r4, r4, r6
 8005f18:	10a4      	asrs	r4, r4, #2
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	42a5      	cmp	r5, r4
 8005f1e:	d109      	bne.n	8005f34 <__libc_init_array+0x24>
 8005f20:	4e0b      	ldr	r6, [pc, #44]	; (8005f50 <__libc_init_array+0x40>)
 8005f22:	4c0c      	ldr	r4, [pc, #48]	; (8005f54 <__libc_init_array+0x44>)
 8005f24:	f004 fc22 	bl	800a76c <_init>
 8005f28:	1ba4      	subs	r4, r4, r6
 8005f2a:	10a4      	asrs	r4, r4, #2
 8005f2c:	2500      	movs	r5, #0
 8005f2e:	42a5      	cmp	r5, r4
 8005f30:	d105      	bne.n	8005f3e <__libc_init_array+0x2e>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f38:	4798      	blx	r3
 8005f3a:	3501      	adds	r5, #1
 8005f3c:	e7ee      	b.n	8005f1c <__libc_init_array+0xc>
 8005f3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f42:	4798      	blx	r3
 8005f44:	3501      	adds	r5, #1
 8005f46:	e7f2      	b.n	8005f2e <__libc_init_array+0x1e>
 8005f48:	0800ad70 	.word	0x0800ad70
 8005f4c:	0800ad70 	.word	0x0800ad70
 8005f50:	0800ad70 	.word	0x0800ad70
 8005f54:	0800ad78 	.word	0x0800ad78

08005f58 <malloc>:
 8005f58:	4b02      	ldr	r3, [pc, #8]	; (8005f64 <malloc+0xc>)
 8005f5a:	4601      	mov	r1, r0
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	f000 b885 	b.w	800606c <_malloc_r>
 8005f62:	bf00      	nop
 8005f64:	2000000c 	.word	0x2000000c

08005f68 <free>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <free+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f000 b82f 	b.w	8005fd0 <_free_r>
 8005f72:	bf00      	nop
 8005f74:	2000000c 	.word	0x2000000c

08005f78 <memcpy>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	1e43      	subs	r3, r0, #1
 8005f7c:	440a      	add	r2, r1
 8005f7e:	4291      	cmp	r1, r2
 8005f80:	d100      	bne.n	8005f84 <memcpy+0xc>
 8005f82:	bd10      	pop	{r4, pc}
 8005f84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f8c:	e7f7      	b.n	8005f7e <memcpy+0x6>

08005f8e <memmove>:
 8005f8e:	4288      	cmp	r0, r1
 8005f90:	b510      	push	{r4, lr}
 8005f92:	eb01 0302 	add.w	r3, r1, r2
 8005f96:	d807      	bhi.n	8005fa8 <memmove+0x1a>
 8005f98:	1e42      	subs	r2, r0, #1
 8005f9a:	4299      	cmp	r1, r3
 8005f9c:	d00a      	beq.n	8005fb4 <memmove+0x26>
 8005f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fa2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005fa6:	e7f8      	b.n	8005f9a <memmove+0xc>
 8005fa8:	4283      	cmp	r3, r0
 8005faa:	d9f5      	bls.n	8005f98 <memmove+0xa>
 8005fac:	1881      	adds	r1, r0, r2
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	42d3      	cmn	r3, r2
 8005fb2:	d100      	bne.n	8005fb6 <memmove+0x28>
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005fbe:	e7f7      	b.n	8005fb0 <memmove+0x22>

08005fc0 <memset>:
 8005fc0:	4402      	add	r2, r0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d100      	bne.n	8005fca <memset+0xa>
 8005fc8:	4770      	bx	lr
 8005fca:	f803 1b01 	strb.w	r1, [r3], #1
 8005fce:	e7f9      	b.n	8005fc4 <memset+0x4>

08005fd0 <_free_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	d045      	beq.n	8006064 <_free_r+0x94>
 8005fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fdc:	1f0c      	subs	r4, r1, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bfb8      	it	lt
 8005fe2:	18e4      	addlt	r4, r4, r3
 8005fe4:	f003 fb30 	bl	8009648 <__malloc_lock>
 8005fe8:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <_free_r+0x98>)
 8005fea:	6813      	ldr	r3, [r2, #0]
 8005fec:	4610      	mov	r0, r2
 8005fee:	b933      	cbnz	r3, 8005ffe <_free_r+0x2e>
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	6014      	str	r4, [r2, #0]
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ffa:	f003 bb26 	b.w	800964a <__malloc_unlock>
 8005ffe:	42a3      	cmp	r3, r4
 8006000:	d90c      	bls.n	800601c <_free_r+0x4c>
 8006002:	6821      	ldr	r1, [r4, #0]
 8006004:	1862      	adds	r2, r4, r1
 8006006:	4293      	cmp	r3, r2
 8006008:	bf04      	itt	eq
 800600a:	681a      	ldreq	r2, [r3, #0]
 800600c:	685b      	ldreq	r3, [r3, #4]
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	bf04      	itt	eq
 8006012:	1852      	addeq	r2, r2, r1
 8006014:	6022      	streq	r2, [r4, #0]
 8006016:	6004      	str	r4, [r0, #0]
 8006018:	e7ec      	b.n	8005ff4 <_free_r+0x24>
 800601a:	4613      	mov	r3, r2
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	b10a      	cbz	r2, 8006024 <_free_r+0x54>
 8006020:	42a2      	cmp	r2, r4
 8006022:	d9fa      	bls.n	800601a <_free_r+0x4a>
 8006024:	6819      	ldr	r1, [r3, #0]
 8006026:	1858      	adds	r0, r3, r1
 8006028:	42a0      	cmp	r0, r4
 800602a:	d10b      	bne.n	8006044 <_free_r+0x74>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	4401      	add	r1, r0
 8006030:	1858      	adds	r0, r3, r1
 8006032:	4282      	cmp	r2, r0
 8006034:	6019      	str	r1, [r3, #0]
 8006036:	d1dd      	bne.n	8005ff4 <_free_r+0x24>
 8006038:	6810      	ldr	r0, [r2, #0]
 800603a:	6852      	ldr	r2, [r2, #4]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	4401      	add	r1, r0
 8006040:	6019      	str	r1, [r3, #0]
 8006042:	e7d7      	b.n	8005ff4 <_free_r+0x24>
 8006044:	d902      	bls.n	800604c <_free_r+0x7c>
 8006046:	230c      	movs	r3, #12
 8006048:	602b      	str	r3, [r5, #0]
 800604a:	e7d3      	b.n	8005ff4 <_free_r+0x24>
 800604c:	6820      	ldr	r0, [r4, #0]
 800604e:	1821      	adds	r1, r4, r0
 8006050:	428a      	cmp	r2, r1
 8006052:	bf04      	itt	eq
 8006054:	6811      	ldreq	r1, [r2, #0]
 8006056:	6852      	ldreq	r2, [r2, #4]
 8006058:	6062      	str	r2, [r4, #4]
 800605a:	bf04      	itt	eq
 800605c:	1809      	addeq	r1, r1, r0
 800605e:	6021      	streq	r1, [r4, #0]
 8006060:	605c      	str	r4, [r3, #4]
 8006062:	e7c7      	b.n	8005ff4 <_free_r+0x24>
 8006064:	bd38      	pop	{r3, r4, r5, pc}
 8006066:	bf00      	nop
 8006068:	20000360 	.word	0x20000360

0800606c <_malloc_r>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	1ccd      	adds	r5, r1, #3
 8006070:	f025 0503 	bic.w	r5, r5, #3
 8006074:	3508      	adds	r5, #8
 8006076:	2d0c      	cmp	r5, #12
 8006078:	bf38      	it	cc
 800607a:	250c      	movcc	r5, #12
 800607c:	2d00      	cmp	r5, #0
 800607e:	4606      	mov	r6, r0
 8006080:	db01      	blt.n	8006086 <_malloc_r+0x1a>
 8006082:	42a9      	cmp	r1, r5
 8006084:	d903      	bls.n	800608e <_malloc_r+0x22>
 8006086:	230c      	movs	r3, #12
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	2000      	movs	r0, #0
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	f003 fadb 	bl	8009648 <__malloc_lock>
 8006092:	4a21      	ldr	r2, [pc, #132]	; (8006118 <_malloc_r+0xac>)
 8006094:	6814      	ldr	r4, [r2, #0]
 8006096:	4621      	mov	r1, r4
 8006098:	b991      	cbnz	r1, 80060c0 <_malloc_r+0x54>
 800609a:	4c20      	ldr	r4, [pc, #128]	; (800611c <_malloc_r+0xb0>)
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	b91b      	cbnz	r3, 80060a8 <_malloc_r+0x3c>
 80060a0:	4630      	mov	r0, r6
 80060a2:	f000 ff0b 	bl	8006ebc <_sbrk_r>
 80060a6:	6020      	str	r0, [r4, #0]
 80060a8:	4629      	mov	r1, r5
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 ff06 	bl	8006ebc <_sbrk_r>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d124      	bne.n	80060fe <_malloc_r+0x92>
 80060b4:	230c      	movs	r3, #12
 80060b6:	6033      	str	r3, [r6, #0]
 80060b8:	4630      	mov	r0, r6
 80060ba:	f003 fac6 	bl	800964a <__malloc_unlock>
 80060be:	e7e4      	b.n	800608a <_malloc_r+0x1e>
 80060c0:	680b      	ldr	r3, [r1, #0]
 80060c2:	1b5b      	subs	r3, r3, r5
 80060c4:	d418      	bmi.n	80060f8 <_malloc_r+0x8c>
 80060c6:	2b0b      	cmp	r3, #11
 80060c8:	d90f      	bls.n	80060ea <_malloc_r+0x7e>
 80060ca:	600b      	str	r3, [r1, #0]
 80060cc:	50cd      	str	r5, [r1, r3]
 80060ce:	18cc      	adds	r4, r1, r3
 80060d0:	4630      	mov	r0, r6
 80060d2:	f003 faba 	bl	800964a <__malloc_unlock>
 80060d6:	f104 000b 	add.w	r0, r4, #11
 80060da:	1d23      	adds	r3, r4, #4
 80060dc:	f020 0007 	bic.w	r0, r0, #7
 80060e0:	1ac3      	subs	r3, r0, r3
 80060e2:	d0d3      	beq.n	800608c <_malloc_r+0x20>
 80060e4:	425a      	negs	r2, r3
 80060e6:	50e2      	str	r2, [r4, r3]
 80060e8:	e7d0      	b.n	800608c <_malloc_r+0x20>
 80060ea:	428c      	cmp	r4, r1
 80060ec:	684b      	ldr	r3, [r1, #4]
 80060ee:	bf16      	itet	ne
 80060f0:	6063      	strne	r3, [r4, #4]
 80060f2:	6013      	streq	r3, [r2, #0]
 80060f4:	460c      	movne	r4, r1
 80060f6:	e7eb      	b.n	80060d0 <_malloc_r+0x64>
 80060f8:	460c      	mov	r4, r1
 80060fa:	6849      	ldr	r1, [r1, #4]
 80060fc:	e7cc      	b.n	8006098 <_malloc_r+0x2c>
 80060fe:	1cc4      	adds	r4, r0, #3
 8006100:	f024 0403 	bic.w	r4, r4, #3
 8006104:	42a0      	cmp	r0, r4
 8006106:	d005      	beq.n	8006114 <_malloc_r+0xa8>
 8006108:	1a21      	subs	r1, r4, r0
 800610a:	4630      	mov	r0, r6
 800610c:	f000 fed6 	bl	8006ebc <_sbrk_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d0cf      	beq.n	80060b4 <_malloc_r+0x48>
 8006114:	6025      	str	r5, [r4, #0]
 8006116:	e7db      	b.n	80060d0 <_malloc_r+0x64>
 8006118:	20000360 	.word	0x20000360
 800611c:	20000364 	.word	0x20000364

08006120 <__cvt>:
 8006120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006124:	ec55 4b10 	vmov	r4, r5, d0
 8006128:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800612a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800612e:	2d00      	cmp	r5, #0
 8006130:	460e      	mov	r6, r1
 8006132:	4691      	mov	r9, r2
 8006134:	4619      	mov	r1, r3
 8006136:	bfb8      	it	lt
 8006138:	4622      	movlt	r2, r4
 800613a:	462b      	mov	r3, r5
 800613c:	f027 0720 	bic.w	r7, r7, #32
 8006140:	bfbb      	ittet	lt
 8006142:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006146:	461d      	movlt	r5, r3
 8006148:	2300      	movge	r3, #0
 800614a:	232d      	movlt	r3, #45	; 0x2d
 800614c:	bfb8      	it	lt
 800614e:	4614      	movlt	r4, r2
 8006150:	2f46      	cmp	r7, #70	; 0x46
 8006152:	700b      	strb	r3, [r1, #0]
 8006154:	d004      	beq.n	8006160 <__cvt+0x40>
 8006156:	2f45      	cmp	r7, #69	; 0x45
 8006158:	d100      	bne.n	800615c <__cvt+0x3c>
 800615a:	3601      	adds	r6, #1
 800615c:	2102      	movs	r1, #2
 800615e:	e000      	b.n	8006162 <__cvt+0x42>
 8006160:	2103      	movs	r1, #3
 8006162:	ab03      	add	r3, sp, #12
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	ab02      	add	r3, sp, #8
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	4632      	mov	r2, r6
 800616c:	4653      	mov	r3, sl
 800616e:	ec45 4b10 	vmov	d0, r4, r5
 8006172:	f001 ff2d 	bl	8007fd0 <_dtoa_r>
 8006176:	2f47      	cmp	r7, #71	; 0x47
 8006178:	4680      	mov	r8, r0
 800617a:	d102      	bne.n	8006182 <__cvt+0x62>
 800617c:	f019 0f01 	tst.w	r9, #1
 8006180:	d026      	beq.n	80061d0 <__cvt+0xb0>
 8006182:	2f46      	cmp	r7, #70	; 0x46
 8006184:	eb08 0906 	add.w	r9, r8, r6
 8006188:	d111      	bne.n	80061ae <__cvt+0x8e>
 800618a:	f898 3000 	ldrb.w	r3, [r8]
 800618e:	2b30      	cmp	r3, #48	; 0x30
 8006190:	d10a      	bne.n	80061a8 <__cvt+0x88>
 8006192:	2200      	movs	r2, #0
 8006194:	2300      	movs	r3, #0
 8006196:	4620      	mov	r0, r4
 8006198:	4629      	mov	r1, r5
 800619a:	f7fa fc9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800619e:	b918      	cbnz	r0, 80061a8 <__cvt+0x88>
 80061a0:	f1c6 0601 	rsb	r6, r6, #1
 80061a4:	f8ca 6000 	str.w	r6, [sl]
 80061a8:	f8da 3000 	ldr.w	r3, [sl]
 80061ac:	4499      	add	r9, r3
 80061ae:	2200      	movs	r2, #0
 80061b0:	2300      	movs	r3, #0
 80061b2:	4620      	mov	r0, r4
 80061b4:	4629      	mov	r1, r5
 80061b6:	f7fa fc8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80061ba:	b938      	cbnz	r0, 80061cc <__cvt+0xac>
 80061bc:	2230      	movs	r2, #48	; 0x30
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	454b      	cmp	r3, r9
 80061c2:	d205      	bcs.n	80061d0 <__cvt+0xb0>
 80061c4:	1c59      	adds	r1, r3, #1
 80061c6:	9103      	str	r1, [sp, #12]
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e7f8      	b.n	80061be <__cvt+0x9e>
 80061cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061d4:	eba3 0308 	sub.w	r3, r3, r8
 80061d8:	4640      	mov	r0, r8
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	b004      	add	sp, #16
 80061de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080061e2 <__exponent>:
 80061e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e4:	2900      	cmp	r1, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	bfba      	itte	lt
 80061ea:	4249      	neglt	r1, r1
 80061ec:	232d      	movlt	r3, #45	; 0x2d
 80061ee:	232b      	movge	r3, #43	; 0x2b
 80061f0:	2909      	cmp	r1, #9
 80061f2:	f804 2b02 	strb.w	r2, [r4], #2
 80061f6:	7043      	strb	r3, [r0, #1]
 80061f8:	dd20      	ble.n	800623c <__exponent+0x5a>
 80061fa:	f10d 0307 	add.w	r3, sp, #7
 80061fe:	461f      	mov	r7, r3
 8006200:	260a      	movs	r6, #10
 8006202:	fb91 f5f6 	sdiv	r5, r1, r6
 8006206:	fb06 1115 	mls	r1, r6, r5, r1
 800620a:	3130      	adds	r1, #48	; 0x30
 800620c:	2d09      	cmp	r5, #9
 800620e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006212:	f103 32ff 	add.w	r2, r3, #4294967295
 8006216:	4629      	mov	r1, r5
 8006218:	dc09      	bgt.n	800622e <__exponent+0x4c>
 800621a:	3130      	adds	r1, #48	; 0x30
 800621c:	3b02      	subs	r3, #2
 800621e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006222:	42bb      	cmp	r3, r7
 8006224:	4622      	mov	r2, r4
 8006226:	d304      	bcc.n	8006232 <__exponent+0x50>
 8006228:	1a10      	subs	r0, r2, r0
 800622a:	b003      	add	sp, #12
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622e:	4613      	mov	r3, r2
 8006230:	e7e7      	b.n	8006202 <__exponent+0x20>
 8006232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006236:	f804 2b01 	strb.w	r2, [r4], #1
 800623a:	e7f2      	b.n	8006222 <__exponent+0x40>
 800623c:	2330      	movs	r3, #48	; 0x30
 800623e:	4419      	add	r1, r3
 8006240:	7083      	strb	r3, [r0, #2]
 8006242:	1d02      	adds	r2, r0, #4
 8006244:	70c1      	strb	r1, [r0, #3]
 8006246:	e7ef      	b.n	8006228 <__exponent+0x46>

08006248 <_printf_float>:
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	b08d      	sub	sp, #52	; 0x34
 800624e:	460c      	mov	r4, r1
 8006250:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006254:	4616      	mov	r6, r2
 8006256:	461f      	mov	r7, r3
 8006258:	4605      	mov	r5, r0
 800625a:	f003 f971 	bl	8009540 <_localeconv_r>
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	9304      	str	r3, [sp, #16]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa f80c 	bl	8000280 <strlen>
 8006268:	2300      	movs	r3, #0
 800626a:	930a      	str	r3, [sp, #40]	; 0x28
 800626c:	f8d8 3000 	ldr.w	r3, [r8]
 8006270:	9005      	str	r0, [sp, #20]
 8006272:	3307      	adds	r3, #7
 8006274:	f023 0307 	bic.w	r3, r3, #7
 8006278:	f103 0208 	add.w	r2, r3, #8
 800627c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006280:	f8d4 b000 	ldr.w	fp, [r4]
 8006284:	f8c8 2000 	str.w	r2, [r8]
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006290:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006294:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006298:	9307      	str	r3, [sp, #28]
 800629a:	f8cd 8018 	str.w	r8, [sp, #24]
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	4ba7      	ldr	r3, [pc, #668]	; (8006540 <_printf_float+0x2f8>)
 80062a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a8:	f7fa fc48 	bl	8000b3c <__aeabi_dcmpun>
 80062ac:	bb70      	cbnz	r0, 800630c <_printf_float+0xc4>
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	4ba3      	ldr	r3, [pc, #652]	; (8006540 <_printf_float+0x2f8>)
 80062b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062b8:	f7fa fc22 	bl	8000b00 <__aeabi_dcmple>
 80062bc:	bb30      	cbnz	r0, 800630c <_printf_float+0xc4>
 80062be:	2200      	movs	r2, #0
 80062c0:	2300      	movs	r3, #0
 80062c2:	4640      	mov	r0, r8
 80062c4:	4649      	mov	r1, r9
 80062c6:	f7fa fc11 	bl	8000aec <__aeabi_dcmplt>
 80062ca:	b110      	cbz	r0, 80062d2 <_printf_float+0x8a>
 80062cc:	232d      	movs	r3, #45	; 0x2d
 80062ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d2:	4a9c      	ldr	r2, [pc, #624]	; (8006544 <_printf_float+0x2fc>)
 80062d4:	4b9c      	ldr	r3, [pc, #624]	; (8006548 <_printf_float+0x300>)
 80062d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80062da:	bf8c      	ite	hi
 80062dc:	4690      	movhi	r8, r2
 80062de:	4698      	movls	r8, r3
 80062e0:	2303      	movs	r3, #3
 80062e2:	f02b 0204 	bic.w	r2, fp, #4
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	f04f 0900 	mov.w	r9, #0
 80062ee:	9700      	str	r7, [sp, #0]
 80062f0:	4633      	mov	r3, r6
 80062f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80062f4:	4621      	mov	r1, r4
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 f9e6 	bl	80066c8 <_printf_common>
 80062fc:	3001      	adds	r0, #1
 80062fe:	f040 808d 	bne.w	800641c <_printf_float+0x1d4>
 8006302:	f04f 30ff 	mov.w	r0, #4294967295
 8006306:	b00d      	add	sp, #52	; 0x34
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	4642      	mov	r2, r8
 800630e:	464b      	mov	r3, r9
 8006310:	4640      	mov	r0, r8
 8006312:	4649      	mov	r1, r9
 8006314:	f7fa fc12 	bl	8000b3c <__aeabi_dcmpun>
 8006318:	b110      	cbz	r0, 8006320 <_printf_float+0xd8>
 800631a:	4a8c      	ldr	r2, [pc, #560]	; (800654c <_printf_float+0x304>)
 800631c:	4b8c      	ldr	r3, [pc, #560]	; (8006550 <_printf_float+0x308>)
 800631e:	e7da      	b.n	80062d6 <_printf_float+0x8e>
 8006320:	6861      	ldr	r1, [r4, #4]
 8006322:	1c4b      	adds	r3, r1, #1
 8006324:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006328:	a80a      	add	r0, sp, #40	; 0x28
 800632a:	d13e      	bne.n	80063aa <_printf_float+0x162>
 800632c:	2306      	movs	r3, #6
 800632e:	6063      	str	r3, [r4, #4]
 8006330:	2300      	movs	r3, #0
 8006332:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006336:	ab09      	add	r3, sp, #36	; 0x24
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	ec49 8b10 	vmov	d0, r8, r9
 800633e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006342:	6022      	str	r2, [r4, #0]
 8006344:	f8cd a004 	str.w	sl, [sp, #4]
 8006348:	6861      	ldr	r1, [r4, #4]
 800634a:	4628      	mov	r0, r5
 800634c:	f7ff fee8 	bl	8006120 <__cvt>
 8006350:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006354:	2b47      	cmp	r3, #71	; 0x47
 8006356:	4680      	mov	r8, r0
 8006358:	d109      	bne.n	800636e <_printf_float+0x126>
 800635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635c:	1cd8      	adds	r0, r3, #3
 800635e:	db02      	blt.n	8006366 <_printf_float+0x11e>
 8006360:	6862      	ldr	r2, [r4, #4]
 8006362:	4293      	cmp	r3, r2
 8006364:	dd47      	ble.n	80063f6 <_printf_float+0x1ae>
 8006366:	f1aa 0a02 	sub.w	sl, sl, #2
 800636a:	fa5f fa8a 	uxtb.w	sl, sl
 800636e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006372:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006374:	d824      	bhi.n	80063c0 <_printf_float+0x178>
 8006376:	3901      	subs	r1, #1
 8006378:	4652      	mov	r2, sl
 800637a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800637e:	9109      	str	r1, [sp, #36]	; 0x24
 8006380:	f7ff ff2f 	bl	80061e2 <__exponent>
 8006384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006386:	1813      	adds	r3, r2, r0
 8006388:	2a01      	cmp	r2, #1
 800638a:	4681      	mov	r9, r0
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	dc02      	bgt.n	8006396 <_printf_float+0x14e>
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	07d1      	lsls	r1, r2, #31
 8006394:	d501      	bpl.n	800639a <_printf_float+0x152>
 8006396:	3301      	adds	r3, #1
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0a5      	beq.n	80062ee <_printf_float+0xa6>
 80063a2:	232d      	movs	r3, #45	; 0x2d
 80063a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a8:	e7a1      	b.n	80062ee <_printf_float+0xa6>
 80063aa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80063ae:	f000 8177 	beq.w	80066a0 <_printf_float+0x458>
 80063b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80063b6:	d1bb      	bne.n	8006330 <_printf_float+0xe8>
 80063b8:	2900      	cmp	r1, #0
 80063ba:	d1b9      	bne.n	8006330 <_printf_float+0xe8>
 80063bc:	2301      	movs	r3, #1
 80063be:	e7b6      	b.n	800632e <_printf_float+0xe6>
 80063c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80063c4:	d119      	bne.n	80063fa <_printf_float+0x1b2>
 80063c6:	2900      	cmp	r1, #0
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	dd0c      	ble.n	80063e6 <_printf_float+0x19e>
 80063cc:	6121      	str	r1, [r4, #16]
 80063ce:	b913      	cbnz	r3, 80063d6 <_printf_float+0x18e>
 80063d0:	6822      	ldr	r2, [r4, #0]
 80063d2:	07d2      	lsls	r2, r2, #31
 80063d4:	d502      	bpl.n	80063dc <_printf_float+0x194>
 80063d6:	3301      	adds	r3, #1
 80063d8:	440b      	add	r3, r1
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	65a3      	str	r3, [r4, #88]	; 0x58
 80063e0:	f04f 0900 	mov.w	r9, #0
 80063e4:	e7d9      	b.n	800639a <_printf_float+0x152>
 80063e6:	b913      	cbnz	r3, 80063ee <_printf_float+0x1a6>
 80063e8:	6822      	ldr	r2, [r4, #0]
 80063ea:	07d0      	lsls	r0, r2, #31
 80063ec:	d501      	bpl.n	80063f2 <_printf_float+0x1aa>
 80063ee:	3302      	adds	r3, #2
 80063f0:	e7f3      	b.n	80063da <_printf_float+0x192>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e7f1      	b.n	80063da <_printf_float+0x192>
 80063f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80063fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063fe:	4293      	cmp	r3, r2
 8006400:	db05      	blt.n	800640e <_printf_float+0x1c6>
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	07d1      	lsls	r1, r2, #31
 8006408:	d5e8      	bpl.n	80063dc <_printf_float+0x194>
 800640a:	3301      	adds	r3, #1
 800640c:	e7e5      	b.n	80063da <_printf_float+0x192>
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfd4      	ite	le
 8006412:	f1c3 0302 	rsble	r3, r3, #2
 8006416:	2301      	movgt	r3, #1
 8006418:	4413      	add	r3, r2
 800641a:	e7de      	b.n	80063da <_printf_float+0x192>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	055a      	lsls	r2, r3, #21
 8006420:	d407      	bmi.n	8006432 <_printf_float+0x1ea>
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	4642      	mov	r2, r8
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	d12b      	bne.n	8006488 <_printf_float+0x240>
 8006430:	e767      	b.n	8006302 <_printf_float+0xba>
 8006432:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006436:	f240 80dc 	bls.w	80065f2 <_printf_float+0x3aa>
 800643a:	2200      	movs	r2, #0
 800643c:	2300      	movs	r3, #0
 800643e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006442:	f7fa fb49 	bl	8000ad8 <__aeabi_dcmpeq>
 8006446:	2800      	cmp	r0, #0
 8006448:	d033      	beq.n	80064b2 <_printf_float+0x26a>
 800644a:	2301      	movs	r3, #1
 800644c:	4a41      	ldr	r2, [pc, #260]	; (8006554 <_printf_float+0x30c>)
 800644e:	4631      	mov	r1, r6
 8006450:	4628      	mov	r0, r5
 8006452:	47b8      	blx	r7
 8006454:	3001      	adds	r0, #1
 8006456:	f43f af54 	beq.w	8006302 <_printf_float+0xba>
 800645a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800645e:	429a      	cmp	r2, r3
 8006460:	db02      	blt.n	8006468 <_printf_float+0x220>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	07d8      	lsls	r0, r3, #31
 8006466:	d50f      	bpl.n	8006488 <_printf_float+0x240>
 8006468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	f43f af45 	beq.w	8006302 <_printf_float+0xba>
 8006478:	f04f 0800 	mov.w	r8, #0
 800647c:	f104 091a 	add.w	r9, r4, #26
 8006480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006482:	3b01      	subs	r3, #1
 8006484:	4543      	cmp	r3, r8
 8006486:	dc09      	bgt.n	800649c <_printf_float+0x254>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	079b      	lsls	r3, r3, #30
 800648c:	f100 8103 	bmi.w	8006696 <_printf_float+0x44e>
 8006490:	68e0      	ldr	r0, [r4, #12]
 8006492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006494:	4298      	cmp	r0, r3
 8006496:	bfb8      	it	lt
 8006498:	4618      	movlt	r0, r3
 800649a:	e734      	b.n	8006306 <_printf_float+0xbe>
 800649c:	2301      	movs	r3, #1
 800649e:	464a      	mov	r2, r9
 80064a0:	4631      	mov	r1, r6
 80064a2:	4628      	mov	r0, r5
 80064a4:	47b8      	blx	r7
 80064a6:	3001      	adds	r0, #1
 80064a8:	f43f af2b 	beq.w	8006302 <_printf_float+0xba>
 80064ac:	f108 0801 	add.w	r8, r8, #1
 80064b0:	e7e6      	b.n	8006480 <_printf_float+0x238>
 80064b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	dc2b      	bgt.n	8006510 <_printf_float+0x2c8>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4a26      	ldr	r2, [pc, #152]	; (8006554 <_printf_float+0x30c>)
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f af1d 	beq.w	8006302 <_printf_float+0xba>
 80064c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ca:	b923      	cbnz	r3, 80064d6 <_printf_float+0x28e>
 80064cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ce:	b913      	cbnz	r3, 80064d6 <_printf_float+0x28e>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	07d9      	lsls	r1, r3, #31
 80064d4:	d5d8      	bpl.n	8006488 <_printf_float+0x240>
 80064d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f af0e 	beq.w	8006302 <_printf_float+0xba>
 80064e6:	f04f 0900 	mov.w	r9, #0
 80064ea:	f104 0a1a 	add.w	sl, r4, #26
 80064ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f0:	425b      	negs	r3, r3
 80064f2:	454b      	cmp	r3, r9
 80064f4:	dc01      	bgt.n	80064fa <_printf_float+0x2b2>
 80064f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f8:	e794      	b.n	8006424 <_printf_float+0x1dc>
 80064fa:	2301      	movs	r3, #1
 80064fc:	4652      	mov	r2, sl
 80064fe:	4631      	mov	r1, r6
 8006500:	4628      	mov	r0, r5
 8006502:	47b8      	blx	r7
 8006504:	3001      	adds	r0, #1
 8006506:	f43f aefc 	beq.w	8006302 <_printf_float+0xba>
 800650a:	f109 0901 	add.w	r9, r9, #1
 800650e:	e7ee      	b.n	80064ee <_printf_float+0x2a6>
 8006510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006514:	429a      	cmp	r2, r3
 8006516:	bfa8      	it	ge
 8006518:	461a      	movge	r2, r3
 800651a:	2a00      	cmp	r2, #0
 800651c:	4691      	mov	r9, r2
 800651e:	dd07      	ble.n	8006530 <_printf_float+0x2e8>
 8006520:	4613      	mov	r3, r2
 8006522:	4631      	mov	r1, r6
 8006524:	4642      	mov	r2, r8
 8006526:	4628      	mov	r0, r5
 8006528:	47b8      	blx	r7
 800652a:	3001      	adds	r0, #1
 800652c:	f43f aee9 	beq.w	8006302 <_printf_float+0xba>
 8006530:	f104 031a 	add.w	r3, r4, #26
 8006534:	f04f 0b00 	mov.w	fp, #0
 8006538:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800653c:	9306      	str	r3, [sp, #24]
 800653e:	e015      	b.n	800656c <_printf_float+0x324>
 8006540:	7fefffff 	.word	0x7fefffff
 8006544:	0800aa58 	.word	0x0800aa58
 8006548:	0800aa54 	.word	0x0800aa54
 800654c:	0800aa60 	.word	0x0800aa60
 8006550:	0800aa5c 	.word	0x0800aa5c
 8006554:	0800aa64 	.word	0x0800aa64
 8006558:	2301      	movs	r3, #1
 800655a:	9a06      	ldr	r2, [sp, #24]
 800655c:	4631      	mov	r1, r6
 800655e:	4628      	mov	r0, r5
 8006560:	47b8      	blx	r7
 8006562:	3001      	adds	r0, #1
 8006564:	f43f aecd 	beq.w	8006302 <_printf_float+0xba>
 8006568:	f10b 0b01 	add.w	fp, fp, #1
 800656c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006570:	ebaa 0309 	sub.w	r3, sl, r9
 8006574:	455b      	cmp	r3, fp
 8006576:	dcef      	bgt.n	8006558 <_printf_float+0x310>
 8006578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800657c:	429a      	cmp	r2, r3
 800657e:	44d0      	add	r8, sl
 8006580:	db15      	blt.n	80065ae <_printf_float+0x366>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	07da      	lsls	r2, r3, #31
 8006586:	d412      	bmi.n	80065ae <_printf_float+0x366>
 8006588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800658c:	eba3 020a 	sub.w	r2, r3, sl
 8006590:	eba3 0a01 	sub.w	sl, r3, r1
 8006594:	4592      	cmp	sl, r2
 8006596:	bfa8      	it	ge
 8006598:	4692      	movge	sl, r2
 800659a:	f1ba 0f00 	cmp.w	sl, #0
 800659e:	dc0e      	bgt.n	80065be <_printf_float+0x376>
 80065a0:	f04f 0800 	mov.w	r8, #0
 80065a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065a8:	f104 091a 	add.w	r9, r4, #26
 80065ac:	e019      	b.n	80065e2 <_printf_float+0x39a>
 80065ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065b2:	4631      	mov	r1, r6
 80065b4:	4628      	mov	r0, r5
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	d1e5      	bne.n	8006588 <_printf_float+0x340>
 80065bc:	e6a1      	b.n	8006302 <_printf_float+0xba>
 80065be:	4653      	mov	r3, sl
 80065c0:	4642      	mov	r2, r8
 80065c2:	4631      	mov	r1, r6
 80065c4:	4628      	mov	r0, r5
 80065c6:	47b8      	blx	r7
 80065c8:	3001      	adds	r0, #1
 80065ca:	d1e9      	bne.n	80065a0 <_printf_float+0x358>
 80065cc:	e699      	b.n	8006302 <_printf_float+0xba>
 80065ce:	2301      	movs	r3, #1
 80065d0:	464a      	mov	r2, r9
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f ae92 	beq.w	8006302 <_printf_float+0xba>
 80065de:	f108 0801 	add.w	r8, r8, #1
 80065e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	eba3 030a 	sub.w	r3, r3, sl
 80065ec:	4543      	cmp	r3, r8
 80065ee:	dcee      	bgt.n	80065ce <_printf_float+0x386>
 80065f0:	e74a      	b.n	8006488 <_printf_float+0x240>
 80065f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f4:	2a01      	cmp	r2, #1
 80065f6:	dc01      	bgt.n	80065fc <_printf_float+0x3b4>
 80065f8:	07db      	lsls	r3, r3, #31
 80065fa:	d53a      	bpl.n	8006672 <_printf_float+0x42a>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4642      	mov	r2, r8
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	f43f ae7b 	beq.w	8006302 <_printf_float+0xba>
 800660c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006610:	4631      	mov	r1, r6
 8006612:	4628      	mov	r0, r5
 8006614:	47b8      	blx	r7
 8006616:	3001      	adds	r0, #1
 8006618:	f108 0801 	add.w	r8, r8, #1
 800661c:	f43f ae71 	beq.w	8006302 <_printf_float+0xba>
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	2200      	movs	r2, #0
 8006624:	f103 3aff 	add.w	sl, r3, #4294967295
 8006628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800662c:	2300      	movs	r3, #0
 800662e:	f7fa fa53 	bl	8000ad8 <__aeabi_dcmpeq>
 8006632:	b9c8      	cbnz	r0, 8006668 <_printf_float+0x420>
 8006634:	4653      	mov	r3, sl
 8006636:	4642      	mov	r2, r8
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	d10e      	bne.n	8006660 <_printf_float+0x418>
 8006642:	e65e      	b.n	8006302 <_printf_float+0xba>
 8006644:	2301      	movs	r3, #1
 8006646:	4652      	mov	r2, sl
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f ae57 	beq.w	8006302 <_printf_float+0xba>
 8006654:	f108 0801 	add.w	r8, r8, #1
 8006658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665a:	3b01      	subs	r3, #1
 800665c:	4543      	cmp	r3, r8
 800665e:	dcf1      	bgt.n	8006644 <_printf_float+0x3fc>
 8006660:	464b      	mov	r3, r9
 8006662:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006666:	e6de      	b.n	8006426 <_printf_float+0x1de>
 8006668:	f04f 0800 	mov.w	r8, #0
 800666c:	f104 0a1a 	add.w	sl, r4, #26
 8006670:	e7f2      	b.n	8006658 <_printf_float+0x410>
 8006672:	2301      	movs	r3, #1
 8006674:	e7df      	b.n	8006636 <_printf_float+0x3ee>
 8006676:	2301      	movs	r3, #1
 8006678:	464a      	mov	r2, r9
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f ae3e 	beq.w	8006302 <_printf_float+0xba>
 8006686:	f108 0801 	add.w	r8, r8, #1
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	4543      	cmp	r3, r8
 8006692:	dcf0      	bgt.n	8006676 <_printf_float+0x42e>
 8006694:	e6fc      	b.n	8006490 <_printf_float+0x248>
 8006696:	f04f 0800 	mov.w	r8, #0
 800669a:	f104 0919 	add.w	r9, r4, #25
 800669e:	e7f4      	b.n	800668a <_printf_float+0x442>
 80066a0:	2900      	cmp	r1, #0
 80066a2:	f43f ae8b 	beq.w	80063bc <_printf_float+0x174>
 80066a6:	2300      	movs	r3, #0
 80066a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80066ac:	ab09      	add	r3, sp, #36	; 0x24
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	ec49 8b10 	vmov	d0, r8, r9
 80066b4:	6022      	str	r2, [r4, #0]
 80066b6:	f8cd a004 	str.w	sl, [sp, #4]
 80066ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066be:	4628      	mov	r0, r5
 80066c0:	f7ff fd2e 	bl	8006120 <__cvt>
 80066c4:	4680      	mov	r8, r0
 80066c6:	e648      	b.n	800635a <_printf_float+0x112>

080066c8 <_printf_common>:
 80066c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066cc:	4691      	mov	r9, r2
 80066ce:	461f      	mov	r7, r3
 80066d0:	688a      	ldr	r2, [r1, #8]
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066d8:	4293      	cmp	r3, r2
 80066da:	bfb8      	it	lt
 80066dc:	4613      	movlt	r3, r2
 80066de:	f8c9 3000 	str.w	r3, [r9]
 80066e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066e6:	4606      	mov	r6, r0
 80066e8:	460c      	mov	r4, r1
 80066ea:	b112      	cbz	r2, 80066f2 <_printf_common+0x2a>
 80066ec:	3301      	adds	r3, #1
 80066ee:	f8c9 3000 	str.w	r3, [r9]
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	0699      	lsls	r1, r3, #26
 80066f6:	bf42      	ittt	mi
 80066f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066fc:	3302      	addmi	r3, #2
 80066fe:	f8c9 3000 	strmi.w	r3, [r9]
 8006702:	6825      	ldr	r5, [r4, #0]
 8006704:	f015 0506 	ands.w	r5, r5, #6
 8006708:	d107      	bne.n	800671a <_printf_common+0x52>
 800670a:	f104 0a19 	add.w	sl, r4, #25
 800670e:	68e3      	ldr	r3, [r4, #12]
 8006710:	f8d9 2000 	ldr.w	r2, [r9]
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	42ab      	cmp	r3, r5
 8006718:	dc28      	bgt.n	800676c <_printf_common+0xa4>
 800671a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	3300      	adds	r3, #0
 8006722:	bf18      	it	ne
 8006724:	2301      	movne	r3, #1
 8006726:	0692      	lsls	r2, r2, #26
 8006728:	d42d      	bmi.n	8006786 <_printf_common+0xbe>
 800672a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800672e:	4639      	mov	r1, r7
 8006730:	4630      	mov	r0, r6
 8006732:	47c0      	blx	r8
 8006734:	3001      	adds	r0, #1
 8006736:	d020      	beq.n	800677a <_printf_common+0xb2>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	68e5      	ldr	r5, [r4, #12]
 800673c:	f8d9 2000 	ldr.w	r2, [r9]
 8006740:	f003 0306 	and.w	r3, r3, #6
 8006744:	2b04      	cmp	r3, #4
 8006746:	bf08      	it	eq
 8006748:	1aad      	subeq	r5, r5, r2
 800674a:	68a3      	ldr	r3, [r4, #8]
 800674c:	6922      	ldr	r2, [r4, #16]
 800674e:	bf0c      	ite	eq
 8006750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006754:	2500      	movne	r5, #0
 8006756:	4293      	cmp	r3, r2
 8006758:	bfc4      	itt	gt
 800675a:	1a9b      	subgt	r3, r3, r2
 800675c:	18ed      	addgt	r5, r5, r3
 800675e:	f04f 0900 	mov.w	r9, #0
 8006762:	341a      	adds	r4, #26
 8006764:	454d      	cmp	r5, r9
 8006766:	d11a      	bne.n	800679e <_printf_common+0xd6>
 8006768:	2000      	movs	r0, #0
 800676a:	e008      	b.n	800677e <_printf_common+0xb6>
 800676c:	2301      	movs	r3, #1
 800676e:	4652      	mov	r2, sl
 8006770:	4639      	mov	r1, r7
 8006772:	4630      	mov	r0, r6
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d103      	bne.n	8006782 <_printf_common+0xba>
 800677a:	f04f 30ff 	mov.w	r0, #4294967295
 800677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006782:	3501      	adds	r5, #1
 8006784:	e7c3      	b.n	800670e <_printf_common+0x46>
 8006786:	18e1      	adds	r1, r4, r3
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	2030      	movs	r0, #48	; 0x30
 800678c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006790:	4422      	add	r2, r4
 8006792:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006796:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800679a:	3302      	adds	r3, #2
 800679c:	e7c5      	b.n	800672a <_printf_common+0x62>
 800679e:	2301      	movs	r3, #1
 80067a0:	4622      	mov	r2, r4
 80067a2:	4639      	mov	r1, r7
 80067a4:	4630      	mov	r0, r6
 80067a6:	47c0      	blx	r8
 80067a8:	3001      	adds	r0, #1
 80067aa:	d0e6      	beq.n	800677a <_printf_common+0xb2>
 80067ac:	f109 0901 	add.w	r9, r9, #1
 80067b0:	e7d8      	b.n	8006764 <_printf_common+0x9c>
	...

080067b4 <_printf_i>:
 80067b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067bc:	460c      	mov	r4, r1
 80067be:	7e09      	ldrb	r1, [r1, #24]
 80067c0:	b085      	sub	sp, #20
 80067c2:	296e      	cmp	r1, #110	; 0x6e
 80067c4:	4617      	mov	r7, r2
 80067c6:	4606      	mov	r6, r0
 80067c8:	4698      	mov	r8, r3
 80067ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067cc:	f000 80b3 	beq.w	8006936 <_printf_i+0x182>
 80067d0:	d822      	bhi.n	8006818 <_printf_i+0x64>
 80067d2:	2963      	cmp	r1, #99	; 0x63
 80067d4:	d036      	beq.n	8006844 <_printf_i+0x90>
 80067d6:	d80a      	bhi.n	80067ee <_printf_i+0x3a>
 80067d8:	2900      	cmp	r1, #0
 80067da:	f000 80b9 	beq.w	8006950 <_printf_i+0x19c>
 80067de:	2958      	cmp	r1, #88	; 0x58
 80067e0:	f000 8083 	beq.w	80068ea <_printf_i+0x136>
 80067e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067ec:	e032      	b.n	8006854 <_printf_i+0xa0>
 80067ee:	2964      	cmp	r1, #100	; 0x64
 80067f0:	d001      	beq.n	80067f6 <_printf_i+0x42>
 80067f2:	2969      	cmp	r1, #105	; 0x69
 80067f4:	d1f6      	bne.n	80067e4 <_printf_i+0x30>
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	6813      	ldr	r3, [r2, #0]
 80067fa:	0605      	lsls	r5, r0, #24
 80067fc:	f103 0104 	add.w	r1, r3, #4
 8006800:	d52a      	bpl.n	8006858 <_printf_i+0xa4>
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6011      	str	r1, [r2, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	da03      	bge.n	8006812 <_printf_i+0x5e>
 800680a:	222d      	movs	r2, #45	; 0x2d
 800680c:	425b      	negs	r3, r3
 800680e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006812:	486f      	ldr	r0, [pc, #444]	; (80069d0 <_printf_i+0x21c>)
 8006814:	220a      	movs	r2, #10
 8006816:	e039      	b.n	800688c <_printf_i+0xd8>
 8006818:	2973      	cmp	r1, #115	; 0x73
 800681a:	f000 809d 	beq.w	8006958 <_printf_i+0x1a4>
 800681e:	d808      	bhi.n	8006832 <_printf_i+0x7e>
 8006820:	296f      	cmp	r1, #111	; 0x6f
 8006822:	d020      	beq.n	8006866 <_printf_i+0xb2>
 8006824:	2970      	cmp	r1, #112	; 0x70
 8006826:	d1dd      	bne.n	80067e4 <_printf_i+0x30>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	f043 0320 	orr.w	r3, r3, #32
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	e003      	b.n	800683a <_printf_i+0x86>
 8006832:	2975      	cmp	r1, #117	; 0x75
 8006834:	d017      	beq.n	8006866 <_printf_i+0xb2>
 8006836:	2978      	cmp	r1, #120	; 0x78
 8006838:	d1d4      	bne.n	80067e4 <_printf_i+0x30>
 800683a:	2378      	movs	r3, #120	; 0x78
 800683c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006840:	4864      	ldr	r0, [pc, #400]	; (80069d4 <_printf_i+0x220>)
 8006842:	e055      	b.n	80068f0 <_printf_i+0x13c>
 8006844:	6813      	ldr	r3, [r2, #0]
 8006846:	1d19      	adds	r1, r3, #4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6011      	str	r1, [r2, #0]
 800684c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006854:	2301      	movs	r3, #1
 8006856:	e08c      	b.n	8006972 <_printf_i+0x1be>
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6011      	str	r1, [r2, #0]
 800685c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006860:	bf18      	it	ne
 8006862:	b21b      	sxthne	r3, r3
 8006864:	e7cf      	b.n	8006806 <_printf_i+0x52>
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	6825      	ldr	r5, [r4, #0]
 800686a:	1d18      	adds	r0, r3, #4
 800686c:	6010      	str	r0, [r2, #0]
 800686e:	0628      	lsls	r0, r5, #24
 8006870:	d501      	bpl.n	8006876 <_printf_i+0xc2>
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	e002      	b.n	800687c <_printf_i+0xc8>
 8006876:	0668      	lsls	r0, r5, #25
 8006878:	d5fb      	bpl.n	8006872 <_printf_i+0xbe>
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	4854      	ldr	r0, [pc, #336]	; (80069d0 <_printf_i+0x21c>)
 800687e:	296f      	cmp	r1, #111	; 0x6f
 8006880:	bf14      	ite	ne
 8006882:	220a      	movne	r2, #10
 8006884:	2208      	moveq	r2, #8
 8006886:	2100      	movs	r1, #0
 8006888:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800688c:	6865      	ldr	r5, [r4, #4]
 800688e:	60a5      	str	r5, [r4, #8]
 8006890:	2d00      	cmp	r5, #0
 8006892:	f2c0 8095 	blt.w	80069c0 <_printf_i+0x20c>
 8006896:	6821      	ldr	r1, [r4, #0]
 8006898:	f021 0104 	bic.w	r1, r1, #4
 800689c:	6021      	str	r1, [r4, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d13d      	bne.n	800691e <_printf_i+0x16a>
 80068a2:	2d00      	cmp	r5, #0
 80068a4:	f040 808e 	bne.w	80069c4 <_printf_i+0x210>
 80068a8:	4665      	mov	r5, ip
 80068aa:	2a08      	cmp	r2, #8
 80068ac:	d10b      	bne.n	80068c6 <_printf_i+0x112>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	07db      	lsls	r3, r3, #31
 80068b2:	d508      	bpl.n	80068c6 <_printf_i+0x112>
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	6862      	ldr	r2, [r4, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	bfde      	ittt	le
 80068bc:	2330      	movle	r3, #48	; 0x30
 80068be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068c6:	ebac 0305 	sub.w	r3, ip, r5
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	f8cd 8000 	str.w	r8, [sp]
 80068d0:	463b      	mov	r3, r7
 80068d2:	aa03      	add	r2, sp, #12
 80068d4:	4621      	mov	r1, r4
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7ff fef6 	bl	80066c8 <_printf_common>
 80068dc:	3001      	adds	r0, #1
 80068de:	d14d      	bne.n	800697c <_printf_i+0x1c8>
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	b005      	add	sp, #20
 80068e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068ea:	4839      	ldr	r0, [pc, #228]	; (80069d0 <_printf_i+0x21c>)
 80068ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068f0:	6813      	ldr	r3, [r2, #0]
 80068f2:	6821      	ldr	r1, [r4, #0]
 80068f4:	1d1d      	adds	r5, r3, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6015      	str	r5, [r2, #0]
 80068fa:	060a      	lsls	r2, r1, #24
 80068fc:	d50b      	bpl.n	8006916 <_printf_i+0x162>
 80068fe:	07ca      	lsls	r2, r1, #31
 8006900:	bf44      	itt	mi
 8006902:	f041 0120 	orrmi.w	r1, r1, #32
 8006906:	6021      	strmi	r1, [r4, #0]
 8006908:	b91b      	cbnz	r3, 8006912 <_printf_i+0x15e>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	f022 0220 	bic.w	r2, r2, #32
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	2210      	movs	r2, #16
 8006914:	e7b7      	b.n	8006886 <_printf_i+0xd2>
 8006916:	064d      	lsls	r5, r1, #25
 8006918:	bf48      	it	mi
 800691a:	b29b      	uxthmi	r3, r3
 800691c:	e7ef      	b.n	80068fe <_printf_i+0x14a>
 800691e:	4665      	mov	r5, ip
 8006920:	fbb3 f1f2 	udiv	r1, r3, r2
 8006924:	fb02 3311 	mls	r3, r2, r1, r3
 8006928:	5cc3      	ldrb	r3, [r0, r3]
 800692a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800692e:	460b      	mov	r3, r1
 8006930:	2900      	cmp	r1, #0
 8006932:	d1f5      	bne.n	8006920 <_printf_i+0x16c>
 8006934:	e7b9      	b.n	80068aa <_printf_i+0xf6>
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	6825      	ldr	r5, [r4, #0]
 800693a:	6961      	ldr	r1, [r4, #20]
 800693c:	1d18      	adds	r0, r3, #4
 800693e:	6010      	str	r0, [r2, #0]
 8006940:	0628      	lsls	r0, r5, #24
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	d501      	bpl.n	800694a <_printf_i+0x196>
 8006946:	6019      	str	r1, [r3, #0]
 8006948:	e002      	b.n	8006950 <_printf_i+0x19c>
 800694a:	066a      	lsls	r2, r5, #25
 800694c:	d5fb      	bpl.n	8006946 <_printf_i+0x192>
 800694e:	8019      	strh	r1, [r3, #0]
 8006950:	2300      	movs	r3, #0
 8006952:	6123      	str	r3, [r4, #16]
 8006954:	4665      	mov	r5, ip
 8006956:	e7b9      	b.n	80068cc <_printf_i+0x118>
 8006958:	6813      	ldr	r3, [r2, #0]
 800695a:	1d19      	adds	r1, r3, #4
 800695c:	6011      	str	r1, [r2, #0]
 800695e:	681d      	ldr	r5, [r3, #0]
 8006960:	6862      	ldr	r2, [r4, #4]
 8006962:	2100      	movs	r1, #0
 8006964:	4628      	mov	r0, r5
 8006966:	f7f9 fc3b 	bl	80001e0 <memchr>
 800696a:	b108      	cbz	r0, 8006970 <_printf_i+0x1bc>
 800696c:	1b40      	subs	r0, r0, r5
 800696e:	6060      	str	r0, [r4, #4]
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	2300      	movs	r3, #0
 8006976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697a:	e7a7      	b.n	80068cc <_printf_i+0x118>
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	462a      	mov	r2, r5
 8006980:	4639      	mov	r1, r7
 8006982:	4630      	mov	r0, r6
 8006984:	47c0      	blx	r8
 8006986:	3001      	adds	r0, #1
 8006988:	d0aa      	beq.n	80068e0 <_printf_i+0x12c>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	079b      	lsls	r3, r3, #30
 800698e:	d413      	bmi.n	80069b8 <_printf_i+0x204>
 8006990:	68e0      	ldr	r0, [r4, #12]
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	4298      	cmp	r0, r3
 8006996:	bfb8      	it	lt
 8006998:	4618      	movlt	r0, r3
 800699a:	e7a3      	b.n	80068e4 <_printf_i+0x130>
 800699c:	2301      	movs	r3, #1
 800699e:	464a      	mov	r2, r9
 80069a0:	4639      	mov	r1, r7
 80069a2:	4630      	mov	r0, r6
 80069a4:	47c0      	blx	r8
 80069a6:	3001      	adds	r0, #1
 80069a8:	d09a      	beq.n	80068e0 <_printf_i+0x12c>
 80069aa:	3501      	adds	r5, #1
 80069ac:	68e3      	ldr	r3, [r4, #12]
 80069ae:	9a03      	ldr	r2, [sp, #12]
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	42ab      	cmp	r3, r5
 80069b4:	dcf2      	bgt.n	800699c <_printf_i+0x1e8>
 80069b6:	e7eb      	b.n	8006990 <_printf_i+0x1dc>
 80069b8:	2500      	movs	r5, #0
 80069ba:	f104 0919 	add.w	r9, r4, #25
 80069be:	e7f5      	b.n	80069ac <_printf_i+0x1f8>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1ac      	bne.n	800691e <_printf_i+0x16a>
 80069c4:	7803      	ldrb	r3, [r0, #0]
 80069c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ce:	e76c      	b.n	80068aa <_printf_i+0xf6>
 80069d0:	0800aa66 	.word	0x0800aa66
 80069d4:	0800aa77 	.word	0x0800aa77

080069d8 <_scanf_float>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	469a      	mov	sl, r3
 80069de:	688b      	ldr	r3, [r1, #8]
 80069e0:	4616      	mov	r6, r2
 80069e2:	1e5a      	subs	r2, r3, #1
 80069e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069e8:	b087      	sub	sp, #28
 80069ea:	bf83      	ittte	hi
 80069ec:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80069f0:	189b      	addhi	r3, r3, r2
 80069f2:	9301      	strhi	r3, [sp, #4]
 80069f4:	2300      	movls	r3, #0
 80069f6:	bf86      	itte	hi
 80069f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80069fc:	608b      	strhi	r3, [r1, #8]
 80069fe:	9301      	strls	r3, [sp, #4]
 8006a00:	680b      	ldr	r3, [r1, #0]
 8006a02:	4688      	mov	r8, r1
 8006a04:	f04f 0b00 	mov.w	fp, #0
 8006a08:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a0c:	f848 3b1c 	str.w	r3, [r8], #28
 8006a10:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006a14:	4607      	mov	r7, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	4645      	mov	r5, r8
 8006a1a:	465a      	mov	r2, fp
 8006a1c:	46d9      	mov	r9, fp
 8006a1e:	f8cd b008 	str.w	fp, [sp, #8]
 8006a22:	68a1      	ldr	r1, [r4, #8]
 8006a24:	b181      	cbz	r1, 8006a48 <_scanf_float+0x70>
 8006a26:	6833      	ldr	r3, [r6, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b49      	cmp	r3, #73	; 0x49
 8006a2c:	d071      	beq.n	8006b12 <_scanf_float+0x13a>
 8006a2e:	d84d      	bhi.n	8006acc <_scanf_float+0xf4>
 8006a30:	2b39      	cmp	r3, #57	; 0x39
 8006a32:	d840      	bhi.n	8006ab6 <_scanf_float+0xde>
 8006a34:	2b31      	cmp	r3, #49	; 0x31
 8006a36:	f080 8088 	bcs.w	8006b4a <_scanf_float+0x172>
 8006a3a:	2b2d      	cmp	r3, #45	; 0x2d
 8006a3c:	f000 8090 	beq.w	8006b60 <_scanf_float+0x188>
 8006a40:	d815      	bhi.n	8006a6e <_scanf_float+0x96>
 8006a42:	2b2b      	cmp	r3, #43	; 0x2b
 8006a44:	f000 808c 	beq.w	8006b60 <_scanf_float+0x188>
 8006a48:	f1b9 0f00 	cmp.w	r9, #0
 8006a4c:	d003      	beq.n	8006a56 <_scanf_float+0x7e>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	3a01      	subs	r2, #1
 8006a58:	2a01      	cmp	r2, #1
 8006a5a:	f200 80ea 	bhi.w	8006c32 <_scanf_float+0x25a>
 8006a5e:	4545      	cmp	r5, r8
 8006a60:	f200 80dc 	bhi.w	8006c1c <_scanf_float+0x244>
 8006a64:	2601      	movs	r6, #1
 8006a66:	4630      	mov	r0, r6
 8006a68:	b007      	add	sp, #28
 8006a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a70:	f000 809f 	beq.w	8006bb2 <_scanf_float+0x1da>
 8006a74:	2b30      	cmp	r3, #48	; 0x30
 8006a76:	d1e7      	bne.n	8006a48 <_scanf_float+0x70>
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006a7e:	d064      	beq.n	8006b4a <_scanf_float+0x172>
 8006a80:	9b01      	ldr	r3, [sp, #4]
 8006a82:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006a86:	6020      	str	r0, [r4, #0]
 8006a88:	f109 0901 	add.w	r9, r9, #1
 8006a8c:	b11b      	cbz	r3, 8006a96 <_scanf_float+0xbe>
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	3101      	adds	r1, #1
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	60a1      	str	r1, [r4, #8]
 8006a96:	68a3      	ldr	r3, [r4, #8]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	60a3      	str	r3, [r4, #8]
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	6873      	ldr	r3, [r6, #4]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	6073      	str	r3, [r6, #4]
 8006aaa:	f340 80ac 	ble.w	8006c06 <_scanf_float+0x22e>
 8006aae:	6833      	ldr	r3, [r6, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	6033      	str	r3, [r6, #0]
 8006ab4:	e7b5      	b.n	8006a22 <_scanf_float+0x4a>
 8006ab6:	2b45      	cmp	r3, #69	; 0x45
 8006ab8:	f000 8085 	beq.w	8006bc6 <_scanf_float+0x1ee>
 8006abc:	2b46      	cmp	r3, #70	; 0x46
 8006abe:	d06a      	beq.n	8006b96 <_scanf_float+0x1be>
 8006ac0:	2b41      	cmp	r3, #65	; 0x41
 8006ac2:	d1c1      	bne.n	8006a48 <_scanf_float+0x70>
 8006ac4:	2a01      	cmp	r2, #1
 8006ac6:	d1bf      	bne.n	8006a48 <_scanf_float+0x70>
 8006ac8:	2202      	movs	r2, #2
 8006aca:	e046      	b.n	8006b5a <_scanf_float+0x182>
 8006acc:	2b65      	cmp	r3, #101	; 0x65
 8006ace:	d07a      	beq.n	8006bc6 <_scanf_float+0x1ee>
 8006ad0:	d818      	bhi.n	8006b04 <_scanf_float+0x12c>
 8006ad2:	2b54      	cmp	r3, #84	; 0x54
 8006ad4:	d066      	beq.n	8006ba4 <_scanf_float+0x1cc>
 8006ad6:	d811      	bhi.n	8006afc <_scanf_float+0x124>
 8006ad8:	2b4e      	cmp	r3, #78	; 0x4e
 8006ada:	d1b5      	bne.n	8006a48 <_scanf_float+0x70>
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d146      	bne.n	8006b6e <_scanf_float+0x196>
 8006ae0:	f1b9 0f00 	cmp.w	r9, #0
 8006ae4:	d145      	bne.n	8006b72 <_scanf_float+0x19a>
 8006ae6:	6821      	ldr	r1, [r4, #0]
 8006ae8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006aec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006af0:	d13f      	bne.n	8006b72 <_scanf_float+0x19a>
 8006af2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006af6:	6021      	str	r1, [r4, #0]
 8006af8:	2201      	movs	r2, #1
 8006afa:	e02e      	b.n	8006b5a <_scanf_float+0x182>
 8006afc:	2b59      	cmp	r3, #89	; 0x59
 8006afe:	d01e      	beq.n	8006b3e <_scanf_float+0x166>
 8006b00:	2b61      	cmp	r3, #97	; 0x61
 8006b02:	e7de      	b.n	8006ac2 <_scanf_float+0xea>
 8006b04:	2b6e      	cmp	r3, #110	; 0x6e
 8006b06:	d0e9      	beq.n	8006adc <_scanf_float+0x104>
 8006b08:	d815      	bhi.n	8006b36 <_scanf_float+0x15e>
 8006b0a:	2b66      	cmp	r3, #102	; 0x66
 8006b0c:	d043      	beq.n	8006b96 <_scanf_float+0x1be>
 8006b0e:	2b69      	cmp	r3, #105	; 0x69
 8006b10:	d19a      	bne.n	8006a48 <_scanf_float+0x70>
 8006b12:	f1bb 0f00 	cmp.w	fp, #0
 8006b16:	d138      	bne.n	8006b8a <_scanf_float+0x1b2>
 8006b18:	f1b9 0f00 	cmp.w	r9, #0
 8006b1c:	d197      	bne.n	8006a4e <_scanf_float+0x76>
 8006b1e:	6821      	ldr	r1, [r4, #0]
 8006b20:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006b24:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006b28:	d195      	bne.n	8006a56 <_scanf_float+0x7e>
 8006b2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006b2e:	6021      	str	r1, [r4, #0]
 8006b30:	f04f 0b01 	mov.w	fp, #1
 8006b34:	e011      	b.n	8006b5a <_scanf_float+0x182>
 8006b36:	2b74      	cmp	r3, #116	; 0x74
 8006b38:	d034      	beq.n	8006ba4 <_scanf_float+0x1cc>
 8006b3a:	2b79      	cmp	r3, #121	; 0x79
 8006b3c:	d184      	bne.n	8006a48 <_scanf_float+0x70>
 8006b3e:	f1bb 0f07 	cmp.w	fp, #7
 8006b42:	d181      	bne.n	8006a48 <_scanf_float+0x70>
 8006b44:	f04f 0b08 	mov.w	fp, #8
 8006b48:	e007      	b.n	8006b5a <_scanf_float+0x182>
 8006b4a:	eb12 0f0b 	cmn.w	r2, fp
 8006b4e:	f47f af7b 	bne.w	8006a48 <_scanf_float+0x70>
 8006b52:	6821      	ldr	r1, [r4, #0]
 8006b54:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006b58:	6021      	str	r1, [r4, #0]
 8006b5a:	702b      	strb	r3, [r5, #0]
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	e79a      	b.n	8006a96 <_scanf_float+0xbe>
 8006b60:	6821      	ldr	r1, [r4, #0]
 8006b62:	0608      	lsls	r0, r1, #24
 8006b64:	f57f af70 	bpl.w	8006a48 <_scanf_float+0x70>
 8006b68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b6c:	e7f4      	b.n	8006b58 <_scanf_float+0x180>
 8006b6e:	2a02      	cmp	r2, #2
 8006b70:	d047      	beq.n	8006c02 <_scanf_float+0x22a>
 8006b72:	f1bb 0f01 	cmp.w	fp, #1
 8006b76:	d003      	beq.n	8006b80 <_scanf_float+0x1a8>
 8006b78:	f1bb 0f04 	cmp.w	fp, #4
 8006b7c:	f47f af64 	bne.w	8006a48 <_scanf_float+0x70>
 8006b80:	f10b 0b01 	add.w	fp, fp, #1
 8006b84:	fa5f fb8b 	uxtb.w	fp, fp
 8006b88:	e7e7      	b.n	8006b5a <_scanf_float+0x182>
 8006b8a:	f1bb 0f03 	cmp.w	fp, #3
 8006b8e:	d0f7      	beq.n	8006b80 <_scanf_float+0x1a8>
 8006b90:	f1bb 0f05 	cmp.w	fp, #5
 8006b94:	e7f2      	b.n	8006b7c <_scanf_float+0x1a4>
 8006b96:	f1bb 0f02 	cmp.w	fp, #2
 8006b9a:	f47f af55 	bne.w	8006a48 <_scanf_float+0x70>
 8006b9e:	f04f 0b03 	mov.w	fp, #3
 8006ba2:	e7da      	b.n	8006b5a <_scanf_float+0x182>
 8006ba4:	f1bb 0f06 	cmp.w	fp, #6
 8006ba8:	f47f af4e 	bne.w	8006a48 <_scanf_float+0x70>
 8006bac:	f04f 0b07 	mov.w	fp, #7
 8006bb0:	e7d3      	b.n	8006b5a <_scanf_float+0x182>
 8006bb2:	6821      	ldr	r1, [r4, #0]
 8006bb4:	0588      	lsls	r0, r1, #22
 8006bb6:	f57f af47 	bpl.w	8006a48 <_scanf_float+0x70>
 8006bba:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006bbe:	6021      	str	r1, [r4, #0]
 8006bc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006bc4:	e7c9      	b.n	8006b5a <_scanf_float+0x182>
 8006bc6:	6821      	ldr	r1, [r4, #0]
 8006bc8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006bcc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006bd0:	d006      	beq.n	8006be0 <_scanf_float+0x208>
 8006bd2:	0548      	lsls	r0, r1, #21
 8006bd4:	f57f af38 	bpl.w	8006a48 <_scanf_float+0x70>
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	f43f af3b 	beq.w	8006a56 <_scanf_float+0x7e>
 8006be0:	0588      	lsls	r0, r1, #22
 8006be2:	bf58      	it	pl
 8006be4:	9802      	ldrpl	r0, [sp, #8]
 8006be6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006bea:	bf58      	it	pl
 8006bec:	eba9 0000 	subpl.w	r0, r9, r0
 8006bf0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006bf4:	bf58      	it	pl
 8006bf6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006bfa:	6021      	str	r1, [r4, #0]
 8006bfc:	f04f 0900 	mov.w	r9, #0
 8006c00:	e7ab      	b.n	8006b5a <_scanf_float+0x182>
 8006c02:	2203      	movs	r2, #3
 8006c04:	e7a9      	b.n	8006b5a <_scanf_float+0x182>
 8006c06:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c0a:	9205      	str	r2, [sp, #20]
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4638      	mov	r0, r7
 8006c10:	4798      	blx	r3
 8006c12:	9a05      	ldr	r2, [sp, #20]
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f43f af04 	beq.w	8006a22 <_scanf_float+0x4a>
 8006c1a:	e715      	b.n	8006a48 <_scanf_float+0x70>
 8006c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006c24:	4632      	mov	r2, r6
 8006c26:	4638      	mov	r0, r7
 8006c28:	4798      	blx	r3
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	6123      	str	r3, [r4, #16]
 8006c30:	e715      	b.n	8006a5e <_scanf_float+0x86>
 8006c32:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006c36:	2b06      	cmp	r3, #6
 8006c38:	d80a      	bhi.n	8006c50 <_scanf_float+0x278>
 8006c3a:	f1bb 0f02 	cmp.w	fp, #2
 8006c3e:	d968      	bls.n	8006d12 <_scanf_float+0x33a>
 8006c40:	f1ab 0b03 	sub.w	fp, fp, #3
 8006c44:	fa5f fb8b 	uxtb.w	fp, fp
 8006c48:	eba5 0b0b 	sub.w	fp, r5, fp
 8006c4c:	455d      	cmp	r5, fp
 8006c4e:	d14b      	bne.n	8006ce8 <_scanf_float+0x310>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	05da      	lsls	r2, r3, #23
 8006c54:	d51f      	bpl.n	8006c96 <_scanf_float+0x2be>
 8006c56:	055b      	lsls	r3, r3, #21
 8006c58:	d468      	bmi.n	8006d2c <_scanf_float+0x354>
 8006c5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	2965      	cmp	r1, #101	; 0x65
 8006c62:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c66:	f105 3bff 	add.w	fp, r5, #4294967295
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	d00d      	beq.n	8006c8a <_scanf_float+0x2b2>
 8006c6e:	2945      	cmp	r1, #69	; 0x45
 8006c70:	d00b      	beq.n	8006c8a <_scanf_float+0x2b2>
 8006c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c76:	4632      	mov	r2, r6
 8006c78:	4638      	mov	r0, r7
 8006c7a:	4798      	blx	r3
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	f1a5 0b02 	sub.w	fp, r5, #2
 8006c88:	6123      	str	r3, [r4, #16]
 8006c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c8e:	4632      	mov	r2, r6
 8006c90:	4638      	mov	r0, r7
 8006c92:	4798      	blx	r3
 8006c94:	465d      	mov	r5, fp
 8006c96:	6826      	ldr	r6, [r4, #0]
 8006c98:	f016 0610 	ands.w	r6, r6, #16
 8006c9c:	d17a      	bne.n	8006d94 <_scanf_float+0x3bc>
 8006c9e:	702e      	strb	r6, [r5, #0]
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d142      	bne.n	8006d32 <_scanf_float+0x35a>
 8006cac:	9b02      	ldr	r3, [sp, #8]
 8006cae:	eba9 0303 	sub.w	r3, r9, r3
 8006cb2:	425a      	negs	r2, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d149      	bne.n	8006d4c <_scanf_float+0x374>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4641      	mov	r1, r8
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f000 ff87 	bl	8007bd0 <_strtod_r>
 8006cc2:	6825      	ldr	r5, [r4, #0]
 8006cc4:	f8da 3000 	ldr.w	r3, [sl]
 8006cc8:	f015 0f02 	tst.w	r5, #2
 8006ccc:	f103 0204 	add.w	r2, r3, #4
 8006cd0:	ec59 8b10 	vmov	r8, r9, d0
 8006cd4:	f8ca 2000 	str.w	r2, [sl]
 8006cd8:	d043      	beq.n	8006d62 <_scanf_float+0x38a>
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	e9c3 8900 	strd	r8, r9, [r3]
 8006ce0:	68e3      	ldr	r3, [r4, #12]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	60e3      	str	r3, [r4, #12]
 8006ce6:	e6be      	b.n	8006a66 <_scanf_float+0x8e>
 8006ce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	4798      	blx	r3
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	e7a6      	b.n	8006c4c <_scanf_float+0x274>
 8006cfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d02:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006d06:	4632      	mov	r2, r6
 8006d08:	4638      	mov	r0, r7
 8006d0a:	4798      	blx	r3
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	4545      	cmp	r5, r8
 8006d14:	d8f3      	bhi.n	8006cfe <_scanf_float+0x326>
 8006d16:	e6a5      	b.n	8006a64 <_scanf_float+0x8c>
 8006d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006d20:	4632      	mov	r2, r6
 8006d22:	4638      	mov	r0, r7
 8006d24:	4798      	blx	r3
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	4545      	cmp	r5, r8
 8006d2e:	d8f3      	bhi.n	8006d18 <_scanf_float+0x340>
 8006d30:	e698      	b.n	8006a64 <_scanf_float+0x8c>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0bf      	beq.n	8006cb8 <_scanf_float+0x2e0>
 8006d38:	9904      	ldr	r1, [sp, #16]
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	4632      	mov	r2, r6
 8006d3e:	3101      	adds	r1, #1
 8006d40:	4638      	mov	r0, r7
 8006d42:	f000 ffd1 	bl	8007ce8 <_strtol_r>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	9d04      	ldr	r5, [sp, #16]
 8006d4a:	1ac2      	subs	r2, r0, r3
 8006d4c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d50:	429d      	cmp	r5, r3
 8006d52:	bf28      	it	cs
 8006d54:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006d58:	490f      	ldr	r1, [pc, #60]	; (8006d98 <_scanf_float+0x3c0>)
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f908 	bl	8006f70 <siprintf>
 8006d60:	e7aa      	b.n	8006cb8 <_scanf_float+0x2e0>
 8006d62:	f015 0504 	ands.w	r5, r5, #4
 8006d66:	d1b8      	bne.n	8006cda <_scanf_float+0x302>
 8006d68:	681f      	ldr	r7, [r3, #0]
 8006d6a:	ee10 2a10 	vmov	r2, s0
 8006d6e:	464b      	mov	r3, r9
 8006d70:	ee10 0a10 	vmov	r0, s0
 8006d74:	4649      	mov	r1, r9
 8006d76:	f7f9 fee1 	bl	8000b3c <__aeabi_dcmpun>
 8006d7a:	b128      	cbz	r0, 8006d88 <_scanf_float+0x3b0>
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 f8ad 	bl	8006edc <nanf>
 8006d82:	ed87 0a00 	vstr	s0, [r7]
 8006d86:	e7ab      	b.n	8006ce0 <_scanf_float+0x308>
 8006d88:	4640      	mov	r0, r8
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	f7f9 ff34 	bl	8000bf8 <__aeabi_d2f>
 8006d90:	6038      	str	r0, [r7, #0]
 8006d92:	e7a5      	b.n	8006ce0 <_scanf_float+0x308>
 8006d94:	2600      	movs	r6, #0
 8006d96:	e666      	b.n	8006a66 <_scanf_float+0x8e>
 8006d98:	0800aa88 	.word	0x0800aa88

08006d9c <iprintf>:
 8006d9c:	b40f      	push	{r0, r1, r2, r3}
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <iprintf+0x2c>)
 8006da0:	b513      	push	{r0, r1, r4, lr}
 8006da2:	681c      	ldr	r4, [r3, #0]
 8006da4:	b124      	cbz	r4, 8006db0 <iprintf+0x14>
 8006da6:	69a3      	ldr	r3, [r4, #24]
 8006da8:	b913      	cbnz	r3, 8006db0 <iprintf+0x14>
 8006daa:	4620      	mov	r0, r4
 8006dac:	f001 ffca 	bl	8008d44 <__sinit>
 8006db0:	ab05      	add	r3, sp, #20
 8006db2:	9a04      	ldr	r2, [sp, #16]
 8006db4:	68a1      	ldr	r1, [r4, #8]
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	4620      	mov	r0, r4
 8006dba:	f003 f9d1 	bl	800a160 <_vfiprintf_r>
 8006dbe:	b002      	add	sp, #8
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc4:	b004      	add	sp, #16
 8006dc6:	4770      	bx	lr
 8006dc8:	2000000c 	.word	0x2000000c

08006dcc <putchar>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <putchar+0x24>)
 8006dd0:	681c      	ldr	r4, [r3, #0]
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	b124      	cbz	r4, 8006de0 <putchar+0x14>
 8006dd6:	69a3      	ldr	r3, [r4, #24]
 8006dd8:	b913      	cbnz	r3, 8006de0 <putchar+0x14>
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f001 ffb2 	bl	8008d44 <__sinit>
 8006de0:	68a2      	ldr	r2, [r4, #8]
 8006de2:	4629      	mov	r1, r5
 8006de4:	4620      	mov	r0, r4
 8006de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dea:	f003 bacf 	b.w	800a38c <_putc_r>
 8006dee:	bf00      	nop
 8006df0:	2000000c 	.word	0x2000000c

08006df4 <_puts_r>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	460e      	mov	r6, r1
 8006df8:	4605      	mov	r5, r0
 8006dfa:	b118      	cbz	r0, 8006e04 <_puts_r+0x10>
 8006dfc:	6983      	ldr	r3, [r0, #24]
 8006dfe:	b90b      	cbnz	r3, 8006e04 <_puts_r+0x10>
 8006e00:	f001 ffa0 	bl	8008d44 <__sinit>
 8006e04:	69ab      	ldr	r3, [r5, #24]
 8006e06:	68ac      	ldr	r4, [r5, #8]
 8006e08:	b913      	cbnz	r3, 8006e10 <_puts_r+0x1c>
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f001 ff9a 	bl	8008d44 <__sinit>
 8006e10:	4b23      	ldr	r3, [pc, #140]	; (8006ea0 <_puts_r+0xac>)
 8006e12:	429c      	cmp	r4, r3
 8006e14:	d117      	bne.n	8006e46 <_puts_r+0x52>
 8006e16:	686c      	ldr	r4, [r5, #4]
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	071b      	lsls	r3, r3, #28
 8006e1c:	d51d      	bpl.n	8006e5a <_puts_r+0x66>
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	b1db      	cbz	r3, 8006e5a <_puts_r+0x66>
 8006e22:	3e01      	subs	r6, #1
 8006e24:	68a3      	ldr	r3, [r4, #8]
 8006e26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	b9e9      	cbnz	r1, 8006e6c <_puts_r+0x78>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	da2e      	bge.n	8006e92 <_puts_r+0x9e>
 8006e34:	4622      	mov	r2, r4
 8006e36:	210a      	movs	r1, #10
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 ff7d 	bl	8007d38 <__swbuf_r>
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d011      	beq.n	8006e66 <_puts_r+0x72>
 8006e42:	200a      	movs	r0, #10
 8006e44:	e011      	b.n	8006e6a <_puts_r+0x76>
 8006e46:	4b17      	ldr	r3, [pc, #92]	; (8006ea4 <_puts_r+0xb0>)
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	d101      	bne.n	8006e50 <_puts_r+0x5c>
 8006e4c:	68ac      	ldr	r4, [r5, #8]
 8006e4e:	e7e3      	b.n	8006e18 <_puts_r+0x24>
 8006e50:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <_puts_r+0xb4>)
 8006e52:	429c      	cmp	r4, r3
 8006e54:	bf08      	it	eq
 8006e56:	68ec      	ldreq	r4, [r5, #12]
 8006e58:	e7de      	b.n	8006e18 <_puts_r+0x24>
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f000 ffbd 	bl	8007ddc <__swsetup_r>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d0dd      	beq.n	8006e22 <_puts_r+0x2e>
 8006e66:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da04      	bge.n	8006e7a <_puts_r+0x86>
 8006e70:	69a2      	ldr	r2, [r4, #24]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	dc06      	bgt.n	8006e84 <_puts_r+0x90>
 8006e76:	290a      	cmp	r1, #10
 8006e78:	d004      	beq.n	8006e84 <_puts_r+0x90>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	7019      	strb	r1, [r3, #0]
 8006e82:	e7cf      	b.n	8006e24 <_puts_r+0x30>
 8006e84:	4622      	mov	r2, r4
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 ff56 	bl	8007d38 <__swbuf_r>
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d1c9      	bne.n	8006e24 <_puts_r+0x30>
 8006e90:	e7e9      	b.n	8006e66 <_puts_r+0x72>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	200a      	movs	r0, #10
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	6022      	str	r2, [r4, #0]
 8006e9a:	7018      	strb	r0, [r3, #0]
 8006e9c:	e7e5      	b.n	8006e6a <_puts_r+0x76>
 8006e9e:	bf00      	nop
 8006ea0:	0800ab10 	.word	0x0800ab10
 8006ea4:	0800ab30 	.word	0x0800ab30
 8006ea8:	0800aaf0 	.word	0x0800aaf0

08006eac <puts>:
 8006eac:	4b02      	ldr	r3, [pc, #8]	; (8006eb8 <puts+0xc>)
 8006eae:	4601      	mov	r1, r0
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	f7ff bf9f 	b.w	8006df4 <_puts_r>
 8006eb6:	bf00      	nop
 8006eb8:	2000000c 	.word	0x2000000c

08006ebc <_sbrk_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4c06      	ldr	r4, [pc, #24]	; (8006ed8 <_sbrk_r+0x1c>)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	f7fa fec8 	bl	8001c5c <_sbrk>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_sbrk_r+0x1a>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_sbrk_r+0x1a>
 8006ed4:	602b      	str	r3, [r5, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	2000036c 	.word	0x2000036c

08006edc <nanf>:
 8006edc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ee4 <nanf+0x8>
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	7fc00000 	.word	0x7fc00000

08006ee8 <_raise_r>:
 8006ee8:	291f      	cmp	r1, #31
 8006eea:	b538      	push	{r3, r4, r5, lr}
 8006eec:	4604      	mov	r4, r0
 8006eee:	460d      	mov	r5, r1
 8006ef0:	d904      	bls.n	8006efc <_raise_r+0x14>
 8006ef2:	2316      	movs	r3, #22
 8006ef4:	6003      	str	r3, [r0, #0]
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006efe:	b112      	cbz	r2, 8006f06 <_raise_r+0x1e>
 8006f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f04:	b94b      	cbnz	r3, 8006f1a <_raise_r+0x32>
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 f830 	bl	8006f6c <_getpid_r>
 8006f0c:	462a      	mov	r2, r5
 8006f0e:	4601      	mov	r1, r0
 8006f10:	4620      	mov	r0, r4
 8006f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f16:	f000 b817 	b.w	8006f48 <_kill_r>
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d00a      	beq.n	8006f34 <_raise_r+0x4c>
 8006f1e:	1c59      	adds	r1, r3, #1
 8006f20:	d103      	bne.n	8006f2a <_raise_r+0x42>
 8006f22:	2316      	movs	r3, #22
 8006f24:	6003      	str	r3, [r0, #0]
 8006f26:	2001      	movs	r0, #1
 8006f28:	e7e7      	b.n	8006efa <_raise_r+0x12>
 8006f2a:	2400      	movs	r4, #0
 8006f2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f30:	4628      	mov	r0, r5
 8006f32:	4798      	blx	r3
 8006f34:	2000      	movs	r0, #0
 8006f36:	e7e0      	b.n	8006efa <_raise_r+0x12>

08006f38 <raise>:
 8006f38:	4b02      	ldr	r3, [pc, #8]	; (8006f44 <raise+0xc>)
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	f7ff bfd3 	b.w	8006ee8 <_raise_r>
 8006f42:	bf00      	nop
 8006f44:	2000000c 	.word	0x2000000c

08006f48 <_kill_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4c07      	ldr	r4, [pc, #28]	; (8006f68 <_kill_r+0x20>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4605      	mov	r5, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	f7fa fe33 	bl	8001bc0 <_kill>
 8006f5a:	1c43      	adds	r3, r0, #1
 8006f5c:	d102      	bne.n	8006f64 <_kill_r+0x1c>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	b103      	cbz	r3, 8006f64 <_kill_r+0x1c>
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	bd38      	pop	{r3, r4, r5, pc}
 8006f66:	bf00      	nop
 8006f68:	2000036c 	.word	0x2000036c

08006f6c <_getpid_r>:
 8006f6c:	f7fa be20 	b.w	8001bb0 <_getpid>

08006f70 <siprintf>:
 8006f70:	b40e      	push	{r1, r2, r3}
 8006f72:	b500      	push	{lr}
 8006f74:	b09c      	sub	sp, #112	; 0x70
 8006f76:	ab1d      	add	r3, sp, #116	; 0x74
 8006f78:	9002      	str	r0, [sp, #8]
 8006f7a:	9006      	str	r0, [sp, #24]
 8006f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f80:	4809      	ldr	r0, [pc, #36]	; (8006fa8 <siprintf+0x38>)
 8006f82:	9107      	str	r1, [sp, #28]
 8006f84:	9104      	str	r1, [sp, #16]
 8006f86:	4909      	ldr	r1, [pc, #36]	; (8006fac <siprintf+0x3c>)
 8006f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8c:	9105      	str	r1, [sp, #20]
 8006f8e:	6800      	ldr	r0, [r0, #0]
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	a902      	add	r1, sp, #8
 8006f94:	f002 ffc2 	bl	8009f1c <_svfiprintf_r>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	b01c      	add	sp, #112	; 0x70
 8006fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa4:	b003      	add	sp, #12
 8006fa6:	4770      	bx	lr
 8006fa8:	2000000c 	.word	0x2000000c
 8006fac:	ffff0208 	.word	0xffff0208

08006fb0 <sulp>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	ec45 4b10 	vmov	d0, r4, r5
 8006fba:	4616      	mov	r6, r2
 8006fbc:	f002 fe12 	bl	8009be4 <__ulp>
 8006fc0:	ec51 0b10 	vmov	r0, r1, d0
 8006fc4:	b17e      	cbz	r6, 8006fe6 <sulp+0x36>
 8006fc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dd09      	ble.n	8006fe6 <sulp+0x36>
 8006fd2:	051b      	lsls	r3, r3, #20
 8006fd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fd8:	2400      	movs	r4, #0
 8006fda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fde:	4622      	mov	r2, r4
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}

08006fe8 <_strtod_l>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	461f      	mov	r7, r3
 8006fee:	b0a1      	sub	sp, #132	; 0x84
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4681      	mov	r9, r0
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	460e      	mov	r6, r1
 8006ff8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ffa:	931c      	str	r3, [sp, #112]	; 0x70
 8006ffc:	f002 fa9d 	bl	800953a <__localeconv_l>
 8007000:	4680      	mov	r8, r0
 8007002:	6800      	ldr	r0, [r0, #0]
 8007004:	f7f9 f93c 	bl	8000280 <strlen>
 8007008:	f04f 0a00 	mov.w	sl, #0
 800700c:	4604      	mov	r4, r0
 800700e:	f04f 0b00 	mov.w	fp, #0
 8007012:	961b      	str	r6, [sp, #108]	; 0x6c
 8007014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007016:	781a      	ldrb	r2, [r3, #0]
 8007018:	2a0d      	cmp	r2, #13
 800701a:	d832      	bhi.n	8007082 <_strtod_l+0x9a>
 800701c:	2a09      	cmp	r2, #9
 800701e:	d236      	bcs.n	800708e <_strtod_l+0xa6>
 8007020:	2a00      	cmp	r2, #0
 8007022:	d03e      	beq.n	80070a2 <_strtod_l+0xba>
 8007024:	2300      	movs	r3, #0
 8007026:	930d      	str	r3, [sp, #52]	; 0x34
 8007028:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800702a:	782b      	ldrb	r3, [r5, #0]
 800702c:	2b30      	cmp	r3, #48	; 0x30
 800702e:	f040 80ac 	bne.w	800718a <_strtod_l+0x1a2>
 8007032:	786b      	ldrb	r3, [r5, #1]
 8007034:	2b58      	cmp	r3, #88	; 0x58
 8007036:	d001      	beq.n	800703c <_strtod_l+0x54>
 8007038:	2b78      	cmp	r3, #120	; 0x78
 800703a:	d167      	bne.n	800710c <_strtod_l+0x124>
 800703c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	ab1c      	add	r3, sp, #112	; 0x70
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	9702      	str	r7, [sp, #8]
 8007046:	ab1d      	add	r3, sp, #116	; 0x74
 8007048:	4a88      	ldr	r2, [pc, #544]	; (800726c <_strtod_l+0x284>)
 800704a:	a91b      	add	r1, sp, #108	; 0x6c
 800704c:	4648      	mov	r0, r9
 800704e:	f001 ff6e 	bl	8008f2e <__gethex>
 8007052:	f010 0407 	ands.w	r4, r0, #7
 8007056:	4606      	mov	r6, r0
 8007058:	d005      	beq.n	8007066 <_strtod_l+0x7e>
 800705a:	2c06      	cmp	r4, #6
 800705c:	d12b      	bne.n	80070b6 <_strtod_l+0xce>
 800705e:	3501      	adds	r5, #1
 8007060:	2300      	movs	r3, #0
 8007062:	951b      	str	r5, [sp, #108]	; 0x6c
 8007064:	930d      	str	r3, [sp, #52]	; 0x34
 8007066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007068:	2b00      	cmp	r3, #0
 800706a:	f040 859a 	bne.w	8007ba2 <_strtod_l+0xbba>
 800706e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007070:	b1e3      	cbz	r3, 80070ac <_strtod_l+0xc4>
 8007072:	4652      	mov	r2, sl
 8007074:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007078:	ec43 2b10 	vmov	d0, r2, r3
 800707c:	b021      	add	sp, #132	; 0x84
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	2a2b      	cmp	r2, #43	; 0x2b
 8007084:	d015      	beq.n	80070b2 <_strtod_l+0xca>
 8007086:	2a2d      	cmp	r2, #45	; 0x2d
 8007088:	d004      	beq.n	8007094 <_strtod_l+0xac>
 800708a:	2a20      	cmp	r2, #32
 800708c:	d1ca      	bne.n	8007024 <_strtod_l+0x3c>
 800708e:	3301      	adds	r3, #1
 8007090:	931b      	str	r3, [sp, #108]	; 0x6c
 8007092:	e7bf      	b.n	8007014 <_strtod_l+0x2c>
 8007094:	2201      	movs	r2, #1
 8007096:	920d      	str	r2, [sp, #52]	; 0x34
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	921b      	str	r2, [sp, #108]	; 0x6c
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1c2      	bne.n	8007028 <_strtod_l+0x40>
 80070a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f040 8579 	bne.w	8007b9e <_strtod_l+0xbb6>
 80070ac:	4652      	mov	r2, sl
 80070ae:	465b      	mov	r3, fp
 80070b0:	e7e2      	b.n	8007078 <_strtod_l+0x90>
 80070b2:	2200      	movs	r2, #0
 80070b4:	e7ef      	b.n	8007096 <_strtod_l+0xae>
 80070b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80070b8:	b13a      	cbz	r2, 80070ca <_strtod_l+0xe2>
 80070ba:	2135      	movs	r1, #53	; 0x35
 80070bc:	a81e      	add	r0, sp, #120	; 0x78
 80070be:	f002 fe89 	bl	8009dd4 <__copybits>
 80070c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070c4:	4648      	mov	r0, r9
 80070c6:	f002 faf5 	bl	80096b4 <_Bfree>
 80070ca:	3c01      	subs	r4, #1
 80070cc:	2c04      	cmp	r4, #4
 80070ce:	d806      	bhi.n	80070de <_strtod_l+0xf6>
 80070d0:	e8df f004 	tbb	[pc, r4]
 80070d4:	1714030a 	.word	0x1714030a
 80070d8:	0a          	.byte	0x0a
 80070d9:	00          	.byte	0x00
 80070da:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80070de:	0730      	lsls	r0, r6, #28
 80070e0:	d5c1      	bpl.n	8007066 <_strtod_l+0x7e>
 80070e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80070e6:	e7be      	b.n	8007066 <_strtod_l+0x7e>
 80070e8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80070ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80070ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80070fa:	e7f0      	b.n	80070de <_strtod_l+0xf6>
 80070fc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007270 <_strtod_l+0x288>
 8007100:	e7ed      	b.n	80070de <_strtod_l+0xf6>
 8007102:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007106:	f04f 3aff 	mov.w	sl, #4294967295
 800710a:	e7e8      	b.n	80070de <_strtod_l+0xf6>
 800710c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	921b      	str	r2, [sp, #108]	; 0x6c
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b30      	cmp	r3, #48	; 0x30
 8007116:	d0f9      	beq.n	800710c <_strtod_l+0x124>
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0a4      	beq.n	8007066 <_strtod_l+0x7e>
 800711c:	2301      	movs	r3, #1
 800711e:	2500      	movs	r5, #0
 8007120:	9306      	str	r3, [sp, #24]
 8007122:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007124:	9308      	str	r3, [sp, #32]
 8007126:	9507      	str	r5, [sp, #28]
 8007128:	9505      	str	r5, [sp, #20]
 800712a:	220a      	movs	r2, #10
 800712c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800712e:	7807      	ldrb	r7, [r0, #0]
 8007130:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007134:	b2d9      	uxtb	r1, r3
 8007136:	2909      	cmp	r1, #9
 8007138:	d929      	bls.n	800718e <_strtod_l+0x1a6>
 800713a:	4622      	mov	r2, r4
 800713c:	f8d8 1000 	ldr.w	r1, [r8]
 8007140:	f003 f9c9 	bl	800a4d6 <strncmp>
 8007144:	2800      	cmp	r0, #0
 8007146:	d031      	beq.n	80071ac <_strtod_l+0x1c4>
 8007148:	2000      	movs	r0, #0
 800714a:	9c05      	ldr	r4, [sp, #20]
 800714c:	9004      	str	r0, [sp, #16]
 800714e:	463b      	mov	r3, r7
 8007150:	4602      	mov	r2, r0
 8007152:	2b65      	cmp	r3, #101	; 0x65
 8007154:	d001      	beq.n	800715a <_strtod_l+0x172>
 8007156:	2b45      	cmp	r3, #69	; 0x45
 8007158:	d114      	bne.n	8007184 <_strtod_l+0x19c>
 800715a:	b924      	cbnz	r4, 8007166 <_strtod_l+0x17e>
 800715c:	b910      	cbnz	r0, 8007164 <_strtod_l+0x17c>
 800715e:	9b06      	ldr	r3, [sp, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d09e      	beq.n	80070a2 <_strtod_l+0xba>
 8007164:	2400      	movs	r4, #0
 8007166:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007168:	1c73      	adds	r3, r6, #1
 800716a:	931b      	str	r3, [sp, #108]	; 0x6c
 800716c:	7873      	ldrb	r3, [r6, #1]
 800716e:	2b2b      	cmp	r3, #43	; 0x2b
 8007170:	d078      	beq.n	8007264 <_strtod_l+0x27c>
 8007172:	2b2d      	cmp	r3, #45	; 0x2d
 8007174:	d070      	beq.n	8007258 <_strtod_l+0x270>
 8007176:	f04f 0c00 	mov.w	ip, #0
 800717a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800717e:	2f09      	cmp	r7, #9
 8007180:	d97c      	bls.n	800727c <_strtod_l+0x294>
 8007182:	961b      	str	r6, [sp, #108]	; 0x6c
 8007184:	f04f 0e00 	mov.w	lr, #0
 8007188:	e09a      	b.n	80072c0 <_strtod_l+0x2d8>
 800718a:	2300      	movs	r3, #0
 800718c:	e7c7      	b.n	800711e <_strtod_l+0x136>
 800718e:	9905      	ldr	r1, [sp, #20]
 8007190:	2908      	cmp	r1, #8
 8007192:	bfdd      	ittte	le
 8007194:	9907      	ldrle	r1, [sp, #28]
 8007196:	fb02 3301 	mlale	r3, r2, r1, r3
 800719a:	9307      	strle	r3, [sp, #28]
 800719c:	fb02 3505 	mlagt	r5, r2, r5, r3
 80071a0:	9b05      	ldr	r3, [sp, #20]
 80071a2:	3001      	adds	r0, #1
 80071a4:	3301      	adds	r3, #1
 80071a6:	9305      	str	r3, [sp, #20]
 80071a8:	901b      	str	r0, [sp, #108]	; 0x6c
 80071aa:	e7bf      	b.n	800712c <_strtod_l+0x144>
 80071ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071ae:	191a      	adds	r2, r3, r4
 80071b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80071b2:	9a05      	ldr	r2, [sp, #20]
 80071b4:	5d1b      	ldrb	r3, [r3, r4]
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	d037      	beq.n	800722a <_strtod_l+0x242>
 80071ba:	9c05      	ldr	r4, [sp, #20]
 80071bc:	4602      	mov	r2, r0
 80071be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80071c2:	2909      	cmp	r1, #9
 80071c4:	d913      	bls.n	80071ee <_strtod_l+0x206>
 80071c6:	2101      	movs	r1, #1
 80071c8:	9104      	str	r1, [sp, #16]
 80071ca:	e7c2      	b.n	8007152 <_strtod_l+0x16a>
 80071cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	3001      	adds	r0, #1
 80071d6:	2b30      	cmp	r3, #48	; 0x30
 80071d8:	d0f8      	beq.n	80071cc <_strtod_l+0x1e4>
 80071da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80071de:	2a08      	cmp	r2, #8
 80071e0:	f200 84e4 	bhi.w	8007bac <_strtod_l+0xbc4>
 80071e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071e6:	9208      	str	r2, [sp, #32]
 80071e8:	4602      	mov	r2, r0
 80071ea:	2000      	movs	r0, #0
 80071ec:	4604      	mov	r4, r0
 80071ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80071f2:	f100 0101 	add.w	r1, r0, #1
 80071f6:	d012      	beq.n	800721e <_strtod_l+0x236>
 80071f8:	440a      	add	r2, r1
 80071fa:	eb00 0c04 	add.w	ip, r0, r4
 80071fe:	4621      	mov	r1, r4
 8007200:	270a      	movs	r7, #10
 8007202:	458c      	cmp	ip, r1
 8007204:	d113      	bne.n	800722e <_strtod_l+0x246>
 8007206:	1821      	adds	r1, r4, r0
 8007208:	2908      	cmp	r1, #8
 800720a:	f104 0401 	add.w	r4, r4, #1
 800720e:	4404      	add	r4, r0
 8007210:	dc19      	bgt.n	8007246 <_strtod_l+0x25e>
 8007212:	9b07      	ldr	r3, [sp, #28]
 8007214:	210a      	movs	r1, #10
 8007216:	fb01 e303 	mla	r3, r1, r3, lr
 800721a:	9307      	str	r3, [sp, #28]
 800721c:	2100      	movs	r1, #0
 800721e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007220:	1c58      	adds	r0, r3, #1
 8007222:	901b      	str	r0, [sp, #108]	; 0x6c
 8007224:	785b      	ldrb	r3, [r3, #1]
 8007226:	4608      	mov	r0, r1
 8007228:	e7c9      	b.n	80071be <_strtod_l+0x1d6>
 800722a:	9805      	ldr	r0, [sp, #20]
 800722c:	e7d3      	b.n	80071d6 <_strtod_l+0x1ee>
 800722e:	2908      	cmp	r1, #8
 8007230:	f101 0101 	add.w	r1, r1, #1
 8007234:	dc03      	bgt.n	800723e <_strtod_l+0x256>
 8007236:	9b07      	ldr	r3, [sp, #28]
 8007238:	437b      	muls	r3, r7
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	e7e1      	b.n	8007202 <_strtod_l+0x21a>
 800723e:	2910      	cmp	r1, #16
 8007240:	bfd8      	it	le
 8007242:	437d      	mulle	r5, r7
 8007244:	e7dd      	b.n	8007202 <_strtod_l+0x21a>
 8007246:	2c10      	cmp	r4, #16
 8007248:	bfdc      	itt	le
 800724a:	210a      	movle	r1, #10
 800724c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007250:	e7e4      	b.n	800721c <_strtod_l+0x234>
 8007252:	2301      	movs	r3, #1
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	e781      	b.n	800715c <_strtod_l+0x174>
 8007258:	f04f 0c01 	mov.w	ip, #1
 800725c:	1cb3      	adds	r3, r6, #2
 800725e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007260:	78b3      	ldrb	r3, [r6, #2]
 8007262:	e78a      	b.n	800717a <_strtod_l+0x192>
 8007264:	f04f 0c00 	mov.w	ip, #0
 8007268:	e7f8      	b.n	800725c <_strtod_l+0x274>
 800726a:	bf00      	nop
 800726c:	0800aa90 	.word	0x0800aa90
 8007270:	7ff00000 	.word	0x7ff00000
 8007274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007276:	1c5f      	adds	r7, r3, #1
 8007278:	971b      	str	r7, [sp, #108]	; 0x6c
 800727a:	785b      	ldrb	r3, [r3, #1]
 800727c:	2b30      	cmp	r3, #48	; 0x30
 800727e:	d0f9      	beq.n	8007274 <_strtod_l+0x28c>
 8007280:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007284:	2f08      	cmp	r7, #8
 8007286:	f63f af7d 	bhi.w	8007184 <_strtod_l+0x19c>
 800728a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800728e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007290:	930a      	str	r3, [sp, #40]	; 0x28
 8007292:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007294:	1c5f      	adds	r7, r3, #1
 8007296:	971b      	str	r7, [sp, #108]	; 0x6c
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800729e:	f1b8 0f09 	cmp.w	r8, #9
 80072a2:	d937      	bls.n	8007314 <_strtod_l+0x32c>
 80072a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072a6:	1a7f      	subs	r7, r7, r1
 80072a8:	2f08      	cmp	r7, #8
 80072aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80072ae:	dc37      	bgt.n	8007320 <_strtod_l+0x338>
 80072b0:	45be      	cmp	lr, r7
 80072b2:	bfa8      	it	ge
 80072b4:	46be      	movge	lr, r7
 80072b6:	f1bc 0f00 	cmp.w	ip, #0
 80072ba:	d001      	beq.n	80072c0 <_strtod_l+0x2d8>
 80072bc:	f1ce 0e00 	rsb	lr, lr, #0
 80072c0:	2c00      	cmp	r4, #0
 80072c2:	d151      	bne.n	8007368 <_strtod_l+0x380>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f47f aece 	bne.w	8007066 <_strtod_l+0x7e>
 80072ca:	9a06      	ldr	r2, [sp, #24]
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	f47f aeca 	bne.w	8007066 <_strtod_l+0x7e>
 80072d2:	9a04      	ldr	r2, [sp, #16]
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	f47f aee4 	bne.w	80070a2 <_strtod_l+0xba>
 80072da:	2b4e      	cmp	r3, #78	; 0x4e
 80072dc:	d027      	beq.n	800732e <_strtod_l+0x346>
 80072de:	dc21      	bgt.n	8007324 <_strtod_l+0x33c>
 80072e0:	2b49      	cmp	r3, #73	; 0x49
 80072e2:	f47f aede 	bne.w	80070a2 <_strtod_l+0xba>
 80072e6:	49a0      	ldr	r1, [pc, #640]	; (8007568 <_strtod_l+0x580>)
 80072e8:	a81b      	add	r0, sp, #108	; 0x6c
 80072ea:	f002 f853 	bl	8009394 <__match>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f43f aed7 	beq.w	80070a2 <_strtod_l+0xba>
 80072f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072f6:	499d      	ldr	r1, [pc, #628]	; (800756c <_strtod_l+0x584>)
 80072f8:	3b01      	subs	r3, #1
 80072fa:	a81b      	add	r0, sp, #108	; 0x6c
 80072fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80072fe:	f002 f849 	bl	8009394 <__match>
 8007302:	b910      	cbnz	r0, 800730a <_strtod_l+0x322>
 8007304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007306:	3301      	adds	r3, #1
 8007308:	931b      	str	r3, [sp, #108]	; 0x6c
 800730a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007580 <_strtod_l+0x598>
 800730e:	f04f 0a00 	mov.w	sl, #0
 8007312:	e6a8      	b.n	8007066 <_strtod_l+0x7e>
 8007314:	210a      	movs	r1, #10
 8007316:	fb01 3e0e 	mla	lr, r1, lr, r3
 800731a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800731e:	e7b8      	b.n	8007292 <_strtod_l+0x2aa>
 8007320:	46be      	mov	lr, r7
 8007322:	e7c8      	b.n	80072b6 <_strtod_l+0x2ce>
 8007324:	2b69      	cmp	r3, #105	; 0x69
 8007326:	d0de      	beq.n	80072e6 <_strtod_l+0x2fe>
 8007328:	2b6e      	cmp	r3, #110	; 0x6e
 800732a:	f47f aeba 	bne.w	80070a2 <_strtod_l+0xba>
 800732e:	4990      	ldr	r1, [pc, #576]	; (8007570 <_strtod_l+0x588>)
 8007330:	a81b      	add	r0, sp, #108	; 0x6c
 8007332:	f002 f82f 	bl	8009394 <__match>
 8007336:	2800      	cmp	r0, #0
 8007338:	f43f aeb3 	beq.w	80070a2 <_strtod_l+0xba>
 800733c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b28      	cmp	r3, #40	; 0x28
 8007342:	d10e      	bne.n	8007362 <_strtod_l+0x37a>
 8007344:	aa1e      	add	r2, sp, #120	; 0x78
 8007346:	498b      	ldr	r1, [pc, #556]	; (8007574 <_strtod_l+0x58c>)
 8007348:	a81b      	add	r0, sp, #108	; 0x6c
 800734a:	f002 f837 	bl	80093bc <__hexnan>
 800734e:	2805      	cmp	r0, #5
 8007350:	d107      	bne.n	8007362 <_strtod_l+0x37a>
 8007352:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007354:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007358:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800735c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007360:	e681      	b.n	8007066 <_strtod_l+0x7e>
 8007362:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007588 <_strtod_l+0x5a0>
 8007366:	e7d2      	b.n	800730e <_strtod_l+0x326>
 8007368:	ebae 0302 	sub.w	r3, lr, r2
 800736c:	9306      	str	r3, [sp, #24]
 800736e:	9b05      	ldr	r3, [sp, #20]
 8007370:	9807      	ldr	r0, [sp, #28]
 8007372:	2b00      	cmp	r3, #0
 8007374:	bf08      	it	eq
 8007376:	4623      	moveq	r3, r4
 8007378:	2c10      	cmp	r4, #16
 800737a:	9305      	str	r3, [sp, #20]
 800737c:	46a0      	mov	r8, r4
 800737e:	bfa8      	it	ge
 8007380:	f04f 0810 	movge.w	r8, #16
 8007384:	f7f9 f8c6 	bl	8000514 <__aeabi_ui2d>
 8007388:	2c09      	cmp	r4, #9
 800738a:	4682      	mov	sl, r0
 800738c:	468b      	mov	fp, r1
 800738e:	dc13      	bgt.n	80073b8 <_strtod_l+0x3d0>
 8007390:	9b06      	ldr	r3, [sp, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f43f ae67 	beq.w	8007066 <_strtod_l+0x7e>
 8007398:	9b06      	ldr	r3, [sp, #24]
 800739a:	dd7a      	ble.n	8007492 <_strtod_l+0x4aa>
 800739c:	2b16      	cmp	r3, #22
 800739e:	dc61      	bgt.n	8007464 <_strtod_l+0x47c>
 80073a0:	4a75      	ldr	r2, [pc, #468]	; (8007578 <_strtod_l+0x590>)
 80073a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80073a6:	e9de 0100 	ldrd	r0, r1, [lr]
 80073aa:	4652      	mov	r2, sl
 80073ac:	465b      	mov	r3, fp
 80073ae:	f7f9 f92b 	bl	8000608 <__aeabi_dmul>
 80073b2:	4682      	mov	sl, r0
 80073b4:	468b      	mov	fp, r1
 80073b6:	e656      	b.n	8007066 <_strtod_l+0x7e>
 80073b8:	4b6f      	ldr	r3, [pc, #444]	; (8007578 <_strtod_l+0x590>)
 80073ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80073be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073c2:	f7f9 f921 	bl	8000608 <__aeabi_dmul>
 80073c6:	4606      	mov	r6, r0
 80073c8:	4628      	mov	r0, r5
 80073ca:	460f      	mov	r7, r1
 80073cc:	f7f9 f8a2 	bl	8000514 <__aeabi_ui2d>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4630      	mov	r0, r6
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f8 ff60 	bl	800029c <__adddf3>
 80073dc:	2c0f      	cmp	r4, #15
 80073de:	4682      	mov	sl, r0
 80073e0:	468b      	mov	fp, r1
 80073e2:	ddd5      	ble.n	8007390 <_strtod_l+0x3a8>
 80073e4:	9b06      	ldr	r3, [sp, #24]
 80073e6:	eba4 0808 	sub.w	r8, r4, r8
 80073ea:	4498      	add	r8, r3
 80073ec:	f1b8 0f00 	cmp.w	r8, #0
 80073f0:	f340 8096 	ble.w	8007520 <_strtod_l+0x538>
 80073f4:	f018 030f 	ands.w	r3, r8, #15
 80073f8:	d00a      	beq.n	8007410 <_strtod_l+0x428>
 80073fa:	495f      	ldr	r1, [pc, #380]	; (8007578 <_strtod_l+0x590>)
 80073fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007400:	4652      	mov	r2, sl
 8007402:	465b      	mov	r3, fp
 8007404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007408:	f7f9 f8fe 	bl	8000608 <__aeabi_dmul>
 800740c:	4682      	mov	sl, r0
 800740e:	468b      	mov	fp, r1
 8007410:	f038 080f 	bics.w	r8, r8, #15
 8007414:	d073      	beq.n	80074fe <_strtod_l+0x516>
 8007416:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800741a:	dd47      	ble.n	80074ac <_strtod_l+0x4c4>
 800741c:	2400      	movs	r4, #0
 800741e:	46a0      	mov	r8, r4
 8007420:	9407      	str	r4, [sp, #28]
 8007422:	9405      	str	r4, [sp, #20]
 8007424:	2322      	movs	r3, #34	; 0x22
 8007426:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007580 <_strtod_l+0x598>
 800742a:	f8c9 3000 	str.w	r3, [r9]
 800742e:	f04f 0a00 	mov.w	sl, #0
 8007432:	9b07      	ldr	r3, [sp, #28]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f43f ae16 	beq.w	8007066 <_strtod_l+0x7e>
 800743a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800743c:	4648      	mov	r0, r9
 800743e:	f002 f939 	bl	80096b4 <_Bfree>
 8007442:	9905      	ldr	r1, [sp, #20]
 8007444:	4648      	mov	r0, r9
 8007446:	f002 f935 	bl	80096b4 <_Bfree>
 800744a:	4641      	mov	r1, r8
 800744c:	4648      	mov	r0, r9
 800744e:	f002 f931 	bl	80096b4 <_Bfree>
 8007452:	9907      	ldr	r1, [sp, #28]
 8007454:	4648      	mov	r0, r9
 8007456:	f002 f92d 	bl	80096b4 <_Bfree>
 800745a:	4621      	mov	r1, r4
 800745c:	4648      	mov	r0, r9
 800745e:	f002 f929 	bl	80096b4 <_Bfree>
 8007462:	e600      	b.n	8007066 <_strtod_l+0x7e>
 8007464:	9a06      	ldr	r2, [sp, #24]
 8007466:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800746a:	4293      	cmp	r3, r2
 800746c:	dbba      	blt.n	80073e4 <_strtod_l+0x3fc>
 800746e:	4d42      	ldr	r5, [pc, #264]	; (8007578 <_strtod_l+0x590>)
 8007470:	f1c4 040f 	rsb	r4, r4, #15
 8007474:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007478:	4652      	mov	r2, sl
 800747a:	465b      	mov	r3, fp
 800747c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007480:	f7f9 f8c2 	bl	8000608 <__aeabi_dmul>
 8007484:	9b06      	ldr	r3, [sp, #24]
 8007486:	1b1c      	subs	r4, r3, r4
 8007488:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800748c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007490:	e78d      	b.n	80073ae <_strtod_l+0x3c6>
 8007492:	f113 0f16 	cmn.w	r3, #22
 8007496:	dba5      	blt.n	80073e4 <_strtod_l+0x3fc>
 8007498:	4a37      	ldr	r2, [pc, #220]	; (8007578 <_strtod_l+0x590>)
 800749a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800749e:	e9d2 2300 	ldrd	r2, r3, [r2]
 80074a2:	4650      	mov	r0, sl
 80074a4:	4659      	mov	r1, fp
 80074a6:	f7f9 f9d9 	bl	800085c <__aeabi_ddiv>
 80074aa:	e782      	b.n	80073b2 <_strtod_l+0x3ca>
 80074ac:	2300      	movs	r3, #0
 80074ae:	4e33      	ldr	r6, [pc, #204]	; (800757c <_strtod_l+0x594>)
 80074b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80074b4:	4650      	mov	r0, sl
 80074b6:	4659      	mov	r1, fp
 80074b8:	461d      	mov	r5, r3
 80074ba:	f1b8 0f01 	cmp.w	r8, #1
 80074be:	dc21      	bgt.n	8007504 <_strtod_l+0x51c>
 80074c0:	b10b      	cbz	r3, 80074c6 <_strtod_l+0x4de>
 80074c2:	4682      	mov	sl, r0
 80074c4:	468b      	mov	fp, r1
 80074c6:	4b2d      	ldr	r3, [pc, #180]	; (800757c <_strtod_l+0x594>)
 80074c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80074cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80074d0:	4652      	mov	r2, sl
 80074d2:	465b      	mov	r3, fp
 80074d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80074d8:	f7f9 f896 	bl	8000608 <__aeabi_dmul>
 80074dc:	4b28      	ldr	r3, [pc, #160]	; (8007580 <_strtod_l+0x598>)
 80074de:	460a      	mov	r2, r1
 80074e0:	400b      	ands	r3, r1
 80074e2:	4928      	ldr	r1, [pc, #160]	; (8007584 <_strtod_l+0x59c>)
 80074e4:	428b      	cmp	r3, r1
 80074e6:	4682      	mov	sl, r0
 80074e8:	d898      	bhi.n	800741c <_strtod_l+0x434>
 80074ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074ee:	428b      	cmp	r3, r1
 80074f0:	bf86      	itte	hi
 80074f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800758c <_strtod_l+0x5a4>
 80074f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80074fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80074fe:	2300      	movs	r3, #0
 8007500:	9304      	str	r3, [sp, #16]
 8007502:	e077      	b.n	80075f4 <_strtod_l+0x60c>
 8007504:	f018 0f01 	tst.w	r8, #1
 8007508:	d006      	beq.n	8007518 <_strtod_l+0x530>
 800750a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f7f9 f879 	bl	8000608 <__aeabi_dmul>
 8007516:	2301      	movs	r3, #1
 8007518:	3501      	adds	r5, #1
 800751a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800751e:	e7cc      	b.n	80074ba <_strtod_l+0x4d2>
 8007520:	d0ed      	beq.n	80074fe <_strtod_l+0x516>
 8007522:	f1c8 0800 	rsb	r8, r8, #0
 8007526:	f018 020f 	ands.w	r2, r8, #15
 800752a:	d00a      	beq.n	8007542 <_strtod_l+0x55a>
 800752c:	4b12      	ldr	r3, [pc, #72]	; (8007578 <_strtod_l+0x590>)
 800752e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007532:	4650      	mov	r0, sl
 8007534:	4659      	mov	r1, fp
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f9 f98f 	bl	800085c <__aeabi_ddiv>
 800753e:	4682      	mov	sl, r0
 8007540:	468b      	mov	fp, r1
 8007542:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007546:	d0da      	beq.n	80074fe <_strtod_l+0x516>
 8007548:	f1b8 0f1f 	cmp.w	r8, #31
 800754c:	dd20      	ble.n	8007590 <_strtod_l+0x5a8>
 800754e:	2400      	movs	r4, #0
 8007550:	46a0      	mov	r8, r4
 8007552:	9407      	str	r4, [sp, #28]
 8007554:	9405      	str	r4, [sp, #20]
 8007556:	2322      	movs	r3, #34	; 0x22
 8007558:	f04f 0a00 	mov.w	sl, #0
 800755c:	f04f 0b00 	mov.w	fp, #0
 8007560:	f8c9 3000 	str.w	r3, [r9]
 8007564:	e765      	b.n	8007432 <_strtod_l+0x44a>
 8007566:	bf00      	nop
 8007568:	0800aa59 	.word	0x0800aa59
 800756c:	0800aae3 	.word	0x0800aae3
 8007570:	0800aa61 	.word	0x0800aa61
 8007574:	0800aaa4 	.word	0x0800aaa4
 8007578:	0800ab88 	.word	0x0800ab88
 800757c:	0800ab60 	.word	0x0800ab60
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	7ca00000 	.word	0x7ca00000
 8007588:	fff80000 	.word	0xfff80000
 800758c:	7fefffff 	.word	0x7fefffff
 8007590:	f018 0310 	ands.w	r3, r8, #16
 8007594:	bf18      	it	ne
 8007596:	236a      	movne	r3, #106	; 0x6a
 8007598:	4da0      	ldr	r5, [pc, #640]	; (800781c <_strtod_l+0x834>)
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	4650      	mov	r0, sl
 800759e:	4659      	mov	r1, fp
 80075a0:	2300      	movs	r3, #0
 80075a2:	f1b8 0f00 	cmp.w	r8, #0
 80075a6:	f300 810a 	bgt.w	80077be <_strtod_l+0x7d6>
 80075aa:	b10b      	cbz	r3, 80075b0 <_strtod_l+0x5c8>
 80075ac:	4682      	mov	sl, r0
 80075ae:	468b      	mov	fp, r1
 80075b0:	9b04      	ldr	r3, [sp, #16]
 80075b2:	b1bb      	cbz	r3, 80075e4 <_strtod_l+0x5fc>
 80075b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80075b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075bc:	2b00      	cmp	r3, #0
 80075be:	4659      	mov	r1, fp
 80075c0:	dd10      	ble.n	80075e4 <_strtod_l+0x5fc>
 80075c2:	2b1f      	cmp	r3, #31
 80075c4:	f340 8107 	ble.w	80077d6 <_strtod_l+0x7ee>
 80075c8:	2b34      	cmp	r3, #52	; 0x34
 80075ca:	bfde      	ittt	le
 80075cc:	3b20      	suble	r3, #32
 80075ce:	f04f 32ff 	movle.w	r2, #4294967295
 80075d2:	fa02 f303 	lslle.w	r3, r2, r3
 80075d6:	f04f 0a00 	mov.w	sl, #0
 80075da:	bfcc      	ite	gt
 80075dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80075e0:	ea03 0b01 	andle.w	fp, r3, r1
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4650      	mov	r0, sl
 80075ea:	4659      	mov	r1, fp
 80075ec:	f7f9 fa74 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d1ac      	bne.n	800754e <_strtod_l+0x566>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	9a05      	ldr	r2, [sp, #20]
 80075fa:	9908      	ldr	r1, [sp, #32]
 80075fc:	4623      	mov	r3, r4
 80075fe:	4648      	mov	r0, r9
 8007600:	f002 f8aa 	bl	8009758 <__s2b>
 8007604:	9007      	str	r0, [sp, #28]
 8007606:	2800      	cmp	r0, #0
 8007608:	f43f af08 	beq.w	800741c <_strtod_l+0x434>
 800760c:	9a06      	ldr	r2, [sp, #24]
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	2a00      	cmp	r2, #0
 8007612:	f1c3 0300 	rsb	r3, r3, #0
 8007616:	bfa8      	it	ge
 8007618:	2300      	movge	r3, #0
 800761a:	930e      	str	r3, [sp, #56]	; 0x38
 800761c:	2400      	movs	r4, #0
 800761e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007622:	9316      	str	r3, [sp, #88]	; 0x58
 8007624:	46a0      	mov	r8, r4
 8007626:	9b07      	ldr	r3, [sp, #28]
 8007628:	4648      	mov	r0, r9
 800762a:	6859      	ldr	r1, [r3, #4]
 800762c:	f002 f80e 	bl	800964c <_Balloc>
 8007630:	9005      	str	r0, [sp, #20]
 8007632:	2800      	cmp	r0, #0
 8007634:	f43f aef6 	beq.w	8007424 <_strtod_l+0x43c>
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	3202      	adds	r2, #2
 800763e:	f103 010c 	add.w	r1, r3, #12
 8007642:	0092      	lsls	r2, r2, #2
 8007644:	300c      	adds	r0, #12
 8007646:	f7fe fc97 	bl	8005f78 <memcpy>
 800764a:	aa1e      	add	r2, sp, #120	; 0x78
 800764c:	a91d      	add	r1, sp, #116	; 0x74
 800764e:	ec4b ab10 	vmov	d0, sl, fp
 8007652:	4648      	mov	r0, r9
 8007654:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007658:	f002 fb3a 	bl	8009cd0 <__d2b>
 800765c:	901c      	str	r0, [sp, #112]	; 0x70
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f aee0 	beq.w	8007424 <_strtod_l+0x43c>
 8007664:	2101      	movs	r1, #1
 8007666:	4648      	mov	r0, r9
 8007668:	f002 f902 	bl	8009870 <__i2b>
 800766c:	4680      	mov	r8, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	f43f aed8 	beq.w	8007424 <_strtod_l+0x43c>
 8007674:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007676:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007678:	2e00      	cmp	r6, #0
 800767a:	bfab      	itete	ge
 800767c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800767e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007680:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007682:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007684:	bfac      	ite	ge
 8007686:	18f7      	addge	r7, r6, r3
 8007688:	1b9d      	sublt	r5, r3, r6
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	1af6      	subs	r6, r6, r3
 800768e:	4416      	add	r6, r2
 8007690:	4b63      	ldr	r3, [pc, #396]	; (8007820 <_strtod_l+0x838>)
 8007692:	3e01      	subs	r6, #1
 8007694:	429e      	cmp	r6, r3
 8007696:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800769a:	f280 80af 	bge.w	80077fc <_strtod_l+0x814>
 800769e:	1b9b      	subs	r3, r3, r6
 80076a0:	2b1f      	cmp	r3, #31
 80076a2:	eba2 0203 	sub.w	r2, r2, r3
 80076a6:	f04f 0101 	mov.w	r1, #1
 80076aa:	f300 809b 	bgt.w	80077e4 <_strtod_l+0x7fc>
 80076ae:	fa01 f303 	lsl.w	r3, r1, r3
 80076b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80076b4:	2300      	movs	r3, #0
 80076b6:	930a      	str	r3, [sp, #40]	; 0x28
 80076b8:	18be      	adds	r6, r7, r2
 80076ba:	9b04      	ldr	r3, [sp, #16]
 80076bc:	42b7      	cmp	r7, r6
 80076be:	4415      	add	r5, r2
 80076c0:	441d      	add	r5, r3
 80076c2:	463b      	mov	r3, r7
 80076c4:	bfa8      	it	ge
 80076c6:	4633      	movge	r3, r6
 80076c8:	42ab      	cmp	r3, r5
 80076ca:	bfa8      	it	ge
 80076cc:	462b      	movge	r3, r5
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bfc2      	ittt	gt
 80076d2:	1af6      	subgt	r6, r6, r3
 80076d4:	1aed      	subgt	r5, r5, r3
 80076d6:	1aff      	subgt	r7, r7, r3
 80076d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076da:	b1bb      	cbz	r3, 800770c <_strtod_l+0x724>
 80076dc:	4641      	mov	r1, r8
 80076de:	461a      	mov	r2, r3
 80076e0:	4648      	mov	r0, r9
 80076e2:	f002 f965 	bl	80099b0 <__pow5mult>
 80076e6:	4680      	mov	r8, r0
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f43f ae9b 	beq.w	8007424 <_strtod_l+0x43c>
 80076ee:	4601      	mov	r1, r0
 80076f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076f2:	4648      	mov	r0, r9
 80076f4:	f002 f8c5 	bl	8009882 <__multiply>
 80076f8:	900c      	str	r0, [sp, #48]	; 0x30
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f43f ae92 	beq.w	8007424 <_strtod_l+0x43c>
 8007700:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007702:	4648      	mov	r0, r9
 8007704:	f001 ffd6 	bl	80096b4 <_Bfree>
 8007708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800770a:	931c      	str	r3, [sp, #112]	; 0x70
 800770c:	2e00      	cmp	r6, #0
 800770e:	dc7a      	bgt.n	8007806 <_strtod_l+0x81e>
 8007710:	9b06      	ldr	r3, [sp, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	dd08      	ble.n	8007728 <_strtod_l+0x740>
 8007716:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007718:	9905      	ldr	r1, [sp, #20]
 800771a:	4648      	mov	r0, r9
 800771c:	f002 f948 	bl	80099b0 <__pow5mult>
 8007720:	9005      	str	r0, [sp, #20]
 8007722:	2800      	cmp	r0, #0
 8007724:	f43f ae7e 	beq.w	8007424 <_strtod_l+0x43c>
 8007728:	2d00      	cmp	r5, #0
 800772a:	dd08      	ble.n	800773e <_strtod_l+0x756>
 800772c:	462a      	mov	r2, r5
 800772e:	9905      	ldr	r1, [sp, #20]
 8007730:	4648      	mov	r0, r9
 8007732:	f002 f98b 	bl	8009a4c <__lshift>
 8007736:	9005      	str	r0, [sp, #20]
 8007738:	2800      	cmp	r0, #0
 800773a:	f43f ae73 	beq.w	8007424 <_strtod_l+0x43c>
 800773e:	2f00      	cmp	r7, #0
 8007740:	dd08      	ble.n	8007754 <_strtod_l+0x76c>
 8007742:	4641      	mov	r1, r8
 8007744:	463a      	mov	r2, r7
 8007746:	4648      	mov	r0, r9
 8007748:	f002 f980 	bl	8009a4c <__lshift>
 800774c:	4680      	mov	r8, r0
 800774e:	2800      	cmp	r0, #0
 8007750:	f43f ae68 	beq.w	8007424 <_strtod_l+0x43c>
 8007754:	9a05      	ldr	r2, [sp, #20]
 8007756:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007758:	4648      	mov	r0, r9
 800775a:	f002 f9e5 	bl	8009b28 <__mdiff>
 800775e:	4604      	mov	r4, r0
 8007760:	2800      	cmp	r0, #0
 8007762:	f43f ae5f 	beq.w	8007424 <_strtod_l+0x43c>
 8007766:	68c3      	ldr	r3, [r0, #12]
 8007768:	930c      	str	r3, [sp, #48]	; 0x30
 800776a:	2300      	movs	r3, #0
 800776c:	60c3      	str	r3, [r0, #12]
 800776e:	4641      	mov	r1, r8
 8007770:	f002 f9c0 	bl	8009af4 <__mcmp>
 8007774:	2800      	cmp	r0, #0
 8007776:	da55      	bge.n	8007824 <_strtod_l+0x83c>
 8007778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800777a:	b9e3      	cbnz	r3, 80077b6 <_strtod_l+0x7ce>
 800777c:	f1ba 0f00 	cmp.w	sl, #0
 8007780:	d119      	bne.n	80077b6 <_strtod_l+0x7ce>
 8007782:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007786:	b9b3      	cbnz	r3, 80077b6 <_strtod_l+0x7ce>
 8007788:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800778c:	0d1b      	lsrs	r3, r3, #20
 800778e:	051b      	lsls	r3, r3, #20
 8007790:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007794:	d90f      	bls.n	80077b6 <_strtod_l+0x7ce>
 8007796:	6963      	ldr	r3, [r4, #20]
 8007798:	b913      	cbnz	r3, 80077a0 <_strtod_l+0x7b8>
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	2b01      	cmp	r3, #1
 800779e:	dd0a      	ble.n	80077b6 <_strtod_l+0x7ce>
 80077a0:	4621      	mov	r1, r4
 80077a2:	2201      	movs	r2, #1
 80077a4:	4648      	mov	r0, r9
 80077a6:	f002 f951 	bl	8009a4c <__lshift>
 80077aa:	4641      	mov	r1, r8
 80077ac:	4604      	mov	r4, r0
 80077ae:	f002 f9a1 	bl	8009af4 <__mcmp>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	dc67      	bgt.n	8007886 <_strtod_l+0x89e>
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d171      	bne.n	80078a0 <_strtod_l+0x8b8>
 80077bc:	e63d      	b.n	800743a <_strtod_l+0x452>
 80077be:	f018 0f01 	tst.w	r8, #1
 80077c2:	d004      	beq.n	80077ce <_strtod_l+0x7e6>
 80077c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077c8:	f7f8 ff1e 	bl	8000608 <__aeabi_dmul>
 80077cc:	2301      	movs	r3, #1
 80077ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077d2:	3508      	adds	r5, #8
 80077d4:	e6e5      	b.n	80075a2 <_strtod_l+0x5ba>
 80077d6:	f04f 32ff 	mov.w	r2, #4294967295
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	ea03 0a0a 	and.w	sl, r3, sl
 80077e2:	e6ff      	b.n	80075e4 <_strtod_l+0x5fc>
 80077e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80077e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80077ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80077f0:	36e2      	adds	r6, #226	; 0xe2
 80077f2:	fa01 f306 	lsl.w	r3, r1, r6
 80077f6:	930a      	str	r3, [sp, #40]	; 0x28
 80077f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80077fa:	e75d      	b.n	80076b8 <_strtod_l+0x6d0>
 80077fc:	2300      	movs	r3, #0
 80077fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007800:	2301      	movs	r3, #1
 8007802:	930f      	str	r3, [sp, #60]	; 0x3c
 8007804:	e758      	b.n	80076b8 <_strtod_l+0x6d0>
 8007806:	4632      	mov	r2, r6
 8007808:	991c      	ldr	r1, [sp, #112]	; 0x70
 800780a:	4648      	mov	r0, r9
 800780c:	f002 f91e 	bl	8009a4c <__lshift>
 8007810:	901c      	str	r0, [sp, #112]	; 0x70
 8007812:	2800      	cmp	r0, #0
 8007814:	f47f af7c 	bne.w	8007710 <_strtod_l+0x728>
 8007818:	e604      	b.n	8007424 <_strtod_l+0x43c>
 800781a:	bf00      	nop
 800781c:	0800aab8 	.word	0x0800aab8
 8007820:	fffffc02 	.word	0xfffffc02
 8007824:	465d      	mov	r5, fp
 8007826:	f040 8086 	bne.w	8007936 <_strtod_l+0x94e>
 800782a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800782c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007830:	b32a      	cbz	r2, 800787e <_strtod_l+0x896>
 8007832:	4aaf      	ldr	r2, [pc, #700]	; (8007af0 <_strtod_l+0xb08>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d153      	bne.n	80078e0 <_strtod_l+0x8f8>
 8007838:	9b04      	ldr	r3, [sp, #16]
 800783a:	4650      	mov	r0, sl
 800783c:	b1d3      	cbz	r3, 8007874 <_strtod_l+0x88c>
 800783e:	4aad      	ldr	r2, [pc, #692]	; (8007af4 <_strtod_l+0xb0c>)
 8007840:	402a      	ands	r2, r5
 8007842:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007846:	f04f 31ff 	mov.w	r1, #4294967295
 800784a:	d816      	bhi.n	800787a <_strtod_l+0x892>
 800784c:	0d12      	lsrs	r2, r2, #20
 800784e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007852:	fa01 f303 	lsl.w	r3, r1, r3
 8007856:	4298      	cmp	r0, r3
 8007858:	d142      	bne.n	80078e0 <_strtod_l+0x8f8>
 800785a:	4ba7      	ldr	r3, [pc, #668]	; (8007af8 <_strtod_l+0xb10>)
 800785c:	429d      	cmp	r5, r3
 800785e:	d102      	bne.n	8007866 <_strtod_l+0x87e>
 8007860:	3001      	adds	r0, #1
 8007862:	f43f addf 	beq.w	8007424 <_strtod_l+0x43c>
 8007866:	4ba3      	ldr	r3, [pc, #652]	; (8007af4 <_strtod_l+0xb0c>)
 8007868:	402b      	ands	r3, r5
 800786a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800786e:	f04f 0a00 	mov.w	sl, #0
 8007872:	e7a0      	b.n	80077b6 <_strtod_l+0x7ce>
 8007874:	f04f 33ff 	mov.w	r3, #4294967295
 8007878:	e7ed      	b.n	8007856 <_strtod_l+0x86e>
 800787a:	460b      	mov	r3, r1
 800787c:	e7eb      	b.n	8007856 <_strtod_l+0x86e>
 800787e:	bb7b      	cbnz	r3, 80078e0 <_strtod_l+0x8f8>
 8007880:	f1ba 0f00 	cmp.w	sl, #0
 8007884:	d12c      	bne.n	80078e0 <_strtod_l+0x8f8>
 8007886:	9904      	ldr	r1, [sp, #16]
 8007888:	4a9a      	ldr	r2, [pc, #616]	; (8007af4 <_strtod_l+0xb0c>)
 800788a:	465b      	mov	r3, fp
 800788c:	b1f1      	cbz	r1, 80078cc <_strtod_l+0x8e4>
 800788e:	ea02 010b 	and.w	r1, r2, fp
 8007892:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007896:	dc19      	bgt.n	80078cc <_strtod_l+0x8e4>
 8007898:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800789c:	f77f ae5b 	ble.w	8007556 <_strtod_l+0x56e>
 80078a0:	4a96      	ldr	r2, [pc, #600]	; (8007afc <_strtod_l+0xb14>)
 80078a2:	2300      	movs	r3, #0
 80078a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80078a8:	4650      	mov	r0, sl
 80078aa:	4659      	mov	r1, fp
 80078ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078b0:	f7f8 feaa 	bl	8000608 <__aeabi_dmul>
 80078b4:	4682      	mov	sl, r0
 80078b6:	468b      	mov	fp, r1
 80078b8:	2900      	cmp	r1, #0
 80078ba:	f47f adbe 	bne.w	800743a <_strtod_l+0x452>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f47f adbb 	bne.w	800743a <_strtod_l+0x452>
 80078c4:	2322      	movs	r3, #34	; 0x22
 80078c6:	f8c9 3000 	str.w	r3, [r9]
 80078ca:	e5b6      	b.n	800743a <_strtod_l+0x452>
 80078cc:	4013      	ands	r3, r2
 80078ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80078d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80078da:	f04f 3aff 	mov.w	sl, #4294967295
 80078de:	e76a      	b.n	80077b6 <_strtod_l+0x7ce>
 80078e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e2:	b193      	cbz	r3, 800790a <_strtod_l+0x922>
 80078e4:	422b      	tst	r3, r5
 80078e6:	f43f af66 	beq.w	80077b6 <_strtod_l+0x7ce>
 80078ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ec:	9a04      	ldr	r2, [sp, #16]
 80078ee:	4650      	mov	r0, sl
 80078f0:	4659      	mov	r1, fp
 80078f2:	b173      	cbz	r3, 8007912 <_strtod_l+0x92a>
 80078f4:	f7ff fb5c 	bl	8006fb0 <sulp>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007900:	f7f8 fccc 	bl	800029c <__adddf3>
 8007904:	4682      	mov	sl, r0
 8007906:	468b      	mov	fp, r1
 8007908:	e755      	b.n	80077b6 <_strtod_l+0x7ce>
 800790a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800790c:	ea13 0f0a 	tst.w	r3, sl
 8007910:	e7e9      	b.n	80078e6 <_strtod_l+0x8fe>
 8007912:	f7ff fb4d 	bl	8006fb0 <sulp>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800791e:	f7f8 fcbb 	bl	8000298 <__aeabi_dsub>
 8007922:	2200      	movs	r2, #0
 8007924:	2300      	movs	r3, #0
 8007926:	4682      	mov	sl, r0
 8007928:	468b      	mov	fp, r1
 800792a:	f7f9 f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800792e:	2800      	cmp	r0, #0
 8007930:	f47f ae11 	bne.w	8007556 <_strtod_l+0x56e>
 8007934:	e73f      	b.n	80077b6 <_strtod_l+0x7ce>
 8007936:	4641      	mov	r1, r8
 8007938:	4620      	mov	r0, r4
 800793a:	f002 fa18 	bl	8009d6e <__ratio>
 800793e:	ec57 6b10 	vmov	r6, r7, d0
 8007942:	2200      	movs	r2, #0
 8007944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007948:	ee10 0a10 	vmov	r0, s0
 800794c:	4639      	mov	r1, r7
 800794e:	f7f9 f8d7 	bl	8000b00 <__aeabi_dcmple>
 8007952:	2800      	cmp	r0, #0
 8007954:	d077      	beq.n	8007a46 <_strtod_l+0xa5e>
 8007956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	d04a      	beq.n	80079f2 <_strtod_l+0xa0a>
 800795c:	4b68      	ldr	r3, [pc, #416]	; (8007b00 <_strtod_l+0xb18>)
 800795e:	2200      	movs	r2, #0
 8007960:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007964:	4f66      	ldr	r7, [pc, #408]	; (8007b00 <_strtod_l+0xb18>)
 8007966:	2600      	movs	r6, #0
 8007968:	4b62      	ldr	r3, [pc, #392]	; (8007af4 <_strtod_l+0xb0c>)
 800796a:	402b      	ands	r3, r5
 800796c:	930f      	str	r3, [sp, #60]	; 0x3c
 800796e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007970:	4b64      	ldr	r3, [pc, #400]	; (8007b04 <_strtod_l+0xb1c>)
 8007972:	429a      	cmp	r2, r3
 8007974:	f040 80ce 	bne.w	8007b14 <_strtod_l+0xb2c>
 8007978:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800797c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007980:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007984:	ec4b ab10 	vmov	d0, sl, fp
 8007988:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800798c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007990:	f002 f928 	bl	8009be4 <__ulp>
 8007994:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007998:	ec53 2b10 	vmov	r2, r3, d0
 800799c:	f7f8 fe34 	bl	8000608 <__aeabi_dmul>
 80079a0:	4652      	mov	r2, sl
 80079a2:	465b      	mov	r3, fp
 80079a4:	f7f8 fc7a 	bl	800029c <__adddf3>
 80079a8:	460b      	mov	r3, r1
 80079aa:	4952      	ldr	r1, [pc, #328]	; (8007af4 <_strtod_l+0xb0c>)
 80079ac:	4a56      	ldr	r2, [pc, #344]	; (8007b08 <_strtod_l+0xb20>)
 80079ae:	4019      	ands	r1, r3
 80079b0:	4291      	cmp	r1, r2
 80079b2:	4682      	mov	sl, r0
 80079b4:	d95b      	bls.n	8007a6e <_strtod_l+0xa86>
 80079b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80079bc:	4293      	cmp	r3, r2
 80079be:	d103      	bne.n	80079c8 <_strtod_l+0x9e0>
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	3301      	adds	r3, #1
 80079c4:	f43f ad2e 	beq.w	8007424 <_strtod_l+0x43c>
 80079c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007af8 <_strtod_l+0xb10>
 80079cc:	f04f 3aff 	mov.w	sl, #4294967295
 80079d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079d2:	4648      	mov	r0, r9
 80079d4:	f001 fe6e 	bl	80096b4 <_Bfree>
 80079d8:	9905      	ldr	r1, [sp, #20]
 80079da:	4648      	mov	r0, r9
 80079dc:	f001 fe6a 	bl	80096b4 <_Bfree>
 80079e0:	4641      	mov	r1, r8
 80079e2:	4648      	mov	r0, r9
 80079e4:	f001 fe66 	bl	80096b4 <_Bfree>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4648      	mov	r0, r9
 80079ec:	f001 fe62 	bl	80096b4 <_Bfree>
 80079f0:	e619      	b.n	8007626 <_strtod_l+0x63e>
 80079f2:	f1ba 0f00 	cmp.w	sl, #0
 80079f6:	d11a      	bne.n	8007a2e <_strtod_l+0xa46>
 80079f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079fc:	b9eb      	cbnz	r3, 8007a3a <_strtod_l+0xa52>
 80079fe:	2200      	movs	r2, #0
 8007a00:	4b3f      	ldr	r3, [pc, #252]	; (8007b00 <_strtod_l+0xb18>)
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f9 f871 	bl	8000aec <__aeabi_dcmplt>
 8007a0a:	b9c8      	cbnz	r0, 8007a40 <_strtod_l+0xa58>
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	2200      	movs	r2, #0
 8007a12:	4b3e      	ldr	r3, [pc, #248]	; (8007b0c <_strtod_l+0xb24>)
 8007a14:	f7f8 fdf8 	bl	8000608 <__aeabi_dmul>
 8007a18:	4606      	mov	r6, r0
 8007a1a:	460f      	mov	r7, r1
 8007a1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a20:	9618      	str	r6, [sp, #96]	; 0x60
 8007a22:	9319      	str	r3, [sp, #100]	; 0x64
 8007a24:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007a28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a2c:	e79c      	b.n	8007968 <_strtod_l+0x980>
 8007a2e:	f1ba 0f01 	cmp.w	sl, #1
 8007a32:	d102      	bne.n	8007a3a <_strtod_l+0xa52>
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	f43f ad8e 	beq.w	8007556 <_strtod_l+0x56e>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	4b34      	ldr	r3, [pc, #208]	; (8007b10 <_strtod_l+0xb28>)
 8007a3e:	e78f      	b.n	8007960 <_strtod_l+0x978>
 8007a40:	2600      	movs	r6, #0
 8007a42:	4f32      	ldr	r7, [pc, #200]	; (8007b0c <_strtod_l+0xb24>)
 8007a44:	e7ea      	b.n	8007a1c <_strtod_l+0xa34>
 8007a46:	4b31      	ldr	r3, [pc, #196]	; (8007b0c <_strtod_l+0xb24>)
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f7f8 fddb 	bl	8000608 <__aeabi_dmul>
 8007a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	b933      	cbnz	r3, 8007a68 <_strtod_l+0xa80>
 8007a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a5e:	9010      	str	r0, [sp, #64]	; 0x40
 8007a60:	9311      	str	r3, [sp, #68]	; 0x44
 8007a62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a66:	e7df      	b.n	8007a28 <_strtod_l+0xa40>
 8007a68:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007a6c:	e7f9      	b.n	8007a62 <_strtod_l+0xa7a>
 8007a6e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007a72:	9b04      	ldr	r3, [sp, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ab      	bne.n	80079d0 <_strtod_l+0x9e8>
 8007a78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a7c:	0d1b      	lsrs	r3, r3, #20
 8007a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a80:	051b      	lsls	r3, r3, #20
 8007a82:	429a      	cmp	r2, r3
 8007a84:	465d      	mov	r5, fp
 8007a86:	d1a3      	bne.n	80079d0 <_strtod_l+0x9e8>
 8007a88:	4639      	mov	r1, r7
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f7f9 f86c 	bl	8000b68 <__aeabi_d2iz>
 8007a90:	f7f8 fd50 	bl	8000534 <__aeabi_i2d>
 8007a94:	460b      	mov	r3, r1
 8007a96:	4602      	mov	r2, r0
 8007a98:	4639      	mov	r1, r7
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7f8 fbfc 	bl	8000298 <__aeabi_dsub>
 8007aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	b933      	cbnz	r3, 8007ab6 <_strtod_l+0xace>
 8007aa8:	f1ba 0f00 	cmp.w	sl, #0
 8007aac:	d103      	bne.n	8007ab6 <_strtod_l+0xace>
 8007aae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007ab2:	2d00      	cmp	r5, #0
 8007ab4:	d06d      	beq.n	8007b92 <_strtod_l+0xbaa>
 8007ab6:	a30a      	add	r3, pc, #40	; (adr r3, 8007ae0 <_strtod_l+0xaf8>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	4630      	mov	r0, r6
 8007abe:	4639      	mov	r1, r7
 8007ac0:	f7f9 f814 	bl	8000aec <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f47f acb8 	bne.w	800743a <_strtod_l+0x452>
 8007aca:	a307      	add	r3, pc, #28	; (adr r3, 8007ae8 <_strtod_l+0xb00>)
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f9 f828 	bl	8000b28 <__aeabi_dcmpgt>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	f43f af79 	beq.w	80079d0 <_strtod_l+0x9e8>
 8007ade:	e4ac      	b.n	800743a <_strtod_l+0x452>
 8007ae0:	94a03595 	.word	0x94a03595
 8007ae4:	3fdfffff 	.word	0x3fdfffff
 8007ae8:	35afe535 	.word	0x35afe535
 8007aec:	3fe00000 	.word	0x3fe00000
 8007af0:	000fffff 	.word	0x000fffff
 8007af4:	7ff00000 	.word	0x7ff00000
 8007af8:	7fefffff 	.word	0x7fefffff
 8007afc:	39500000 	.word	0x39500000
 8007b00:	3ff00000 	.word	0x3ff00000
 8007b04:	7fe00000 	.word	0x7fe00000
 8007b08:	7c9fffff 	.word	0x7c9fffff
 8007b0c:	3fe00000 	.word	0x3fe00000
 8007b10:	bff00000 	.word	0xbff00000
 8007b14:	9b04      	ldr	r3, [sp, #16]
 8007b16:	b333      	cbz	r3, 8007b66 <_strtod_l+0xb7e>
 8007b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b1e:	d822      	bhi.n	8007b66 <_strtod_l+0xb7e>
 8007b20:	a327      	add	r3, pc, #156	; (adr r3, 8007bc0 <_strtod_l+0xbd8>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 ffe9 	bl	8000b00 <__aeabi_dcmple>
 8007b2e:	b1a0      	cbz	r0, 8007b5a <_strtod_l+0xb72>
 8007b30:	4639      	mov	r1, r7
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7f9 f840 	bl	8000bb8 <__aeabi_d2uiz>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	bf08      	it	eq
 8007b3c:	2001      	moveq	r0, #1
 8007b3e:	f7f8 fce9 	bl	8000514 <__aeabi_ui2d>
 8007b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b44:	4606      	mov	r6, r0
 8007b46:	460f      	mov	r7, r1
 8007b48:	bb03      	cbnz	r3, 8007b8c <_strtod_l+0xba4>
 8007b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b4e:	9012      	str	r0, [sp, #72]	; 0x48
 8007b50:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007b56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b5e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b66:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007b6a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007b6e:	f002 f839 	bl	8009be4 <__ulp>
 8007b72:	4650      	mov	r0, sl
 8007b74:	ec53 2b10 	vmov	r2, r3, d0
 8007b78:	4659      	mov	r1, fp
 8007b7a:	f7f8 fd45 	bl	8000608 <__aeabi_dmul>
 8007b7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b82:	f7f8 fb8b 	bl	800029c <__adddf3>
 8007b86:	4682      	mov	sl, r0
 8007b88:	468b      	mov	fp, r1
 8007b8a:	e772      	b.n	8007a72 <_strtod_l+0xa8a>
 8007b8c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007b90:	e7df      	b.n	8007b52 <_strtod_l+0xb6a>
 8007b92:	a30d      	add	r3, pc, #52	; (adr r3, 8007bc8 <_strtod_l+0xbe0>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f7f8 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8007b9c:	e79c      	b.n	8007ad8 <_strtod_l+0xaf0>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	930d      	str	r3, [sp, #52]	; 0x34
 8007ba2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	f7ff ba61 	b.w	800706e <_strtod_l+0x86>
 8007bac:	2b65      	cmp	r3, #101	; 0x65
 8007bae:	f04f 0200 	mov.w	r2, #0
 8007bb2:	f43f ab4e 	beq.w	8007252 <_strtod_l+0x26a>
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	4614      	mov	r4, r2
 8007bba:	9104      	str	r1, [sp, #16]
 8007bbc:	f7ff bacb 	b.w	8007156 <_strtod_l+0x16e>
 8007bc0:	ffc00000 	.word	0xffc00000
 8007bc4:	41dfffff 	.word	0x41dfffff
 8007bc8:	94a03595 	.word	0x94a03595
 8007bcc:	3fcfffff 	.word	0x3fcfffff

08007bd0 <_strtod_r>:
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <_strtod_r+0x18>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	b410      	push	{r4}
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	4c04      	ldr	r4, [pc, #16]	; (8007bec <_strtod_r+0x1c>)
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bf08      	it	eq
 8007bde:	4623      	moveq	r3, r4
 8007be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be4:	f7ff ba00 	b.w	8006fe8 <_strtod_l>
 8007be8:	2000000c 	.word	0x2000000c
 8007bec:	20000070 	.word	0x20000070

08007bf0 <_strtol_l.isra.0>:
 8007bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf4:	4680      	mov	r8, r0
 8007bf6:	4689      	mov	r9, r1
 8007bf8:	4692      	mov	sl, r2
 8007bfa:	461e      	mov	r6, r3
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	463d      	mov	r5, r7
 8007c00:	9808      	ldr	r0, [sp, #32]
 8007c02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c06:	f001 fc95 	bl	8009534 <__locale_ctype_ptr_l>
 8007c0a:	4420      	add	r0, r4
 8007c0c:	7843      	ldrb	r3, [r0, #1]
 8007c0e:	f013 0308 	ands.w	r3, r3, #8
 8007c12:	d132      	bne.n	8007c7a <_strtol_l.isra.0+0x8a>
 8007c14:	2c2d      	cmp	r4, #45	; 0x2d
 8007c16:	d132      	bne.n	8007c7e <_strtol_l.isra.0+0x8e>
 8007c18:	787c      	ldrb	r4, [r7, #1]
 8007c1a:	1cbd      	adds	r5, r7, #2
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	d05d      	beq.n	8007cde <_strtol_l.isra.0+0xee>
 8007c22:	2e10      	cmp	r6, #16
 8007c24:	d109      	bne.n	8007c3a <_strtol_l.isra.0+0x4a>
 8007c26:	2c30      	cmp	r4, #48	; 0x30
 8007c28:	d107      	bne.n	8007c3a <_strtol_l.isra.0+0x4a>
 8007c2a:	782b      	ldrb	r3, [r5, #0]
 8007c2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c30:	2b58      	cmp	r3, #88	; 0x58
 8007c32:	d14f      	bne.n	8007cd4 <_strtol_l.isra.0+0xe4>
 8007c34:	786c      	ldrb	r4, [r5, #1]
 8007c36:	2610      	movs	r6, #16
 8007c38:	3502      	adds	r5, #2
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007c42:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007c46:	2700      	movs	r7, #0
 8007c48:	fbb1 fcf6 	udiv	ip, r1, r6
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007c52:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007c56:	2b09      	cmp	r3, #9
 8007c58:	d817      	bhi.n	8007c8a <_strtol_l.isra.0+0x9a>
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	42a6      	cmp	r6, r4
 8007c5e:	dd23      	ble.n	8007ca8 <_strtol_l.isra.0+0xb8>
 8007c60:	1c7b      	adds	r3, r7, #1
 8007c62:	d007      	beq.n	8007c74 <_strtol_l.isra.0+0x84>
 8007c64:	4584      	cmp	ip, r0
 8007c66:	d31c      	bcc.n	8007ca2 <_strtol_l.isra.0+0xb2>
 8007c68:	d101      	bne.n	8007c6e <_strtol_l.isra.0+0x7e>
 8007c6a:	45a6      	cmp	lr, r4
 8007c6c:	db19      	blt.n	8007ca2 <_strtol_l.isra.0+0xb2>
 8007c6e:	fb00 4006 	mla	r0, r0, r6, r4
 8007c72:	2701      	movs	r7, #1
 8007c74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c78:	e7eb      	b.n	8007c52 <_strtol_l.isra.0+0x62>
 8007c7a:	462f      	mov	r7, r5
 8007c7c:	e7bf      	b.n	8007bfe <_strtol_l.isra.0+0xe>
 8007c7e:	2c2b      	cmp	r4, #43	; 0x2b
 8007c80:	bf04      	itt	eq
 8007c82:	1cbd      	addeq	r5, r7, #2
 8007c84:	787c      	ldrbeq	r4, [r7, #1]
 8007c86:	461a      	mov	r2, r3
 8007c88:	e7c9      	b.n	8007c1e <_strtol_l.isra.0+0x2e>
 8007c8a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007c8e:	2b19      	cmp	r3, #25
 8007c90:	d801      	bhi.n	8007c96 <_strtol_l.isra.0+0xa6>
 8007c92:	3c37      	subs	r4, #55	; 0x37
 8007c94:	e7e2      	b.n	8007c5c <_strtol_l.isra.0+0x6c>
 8007c96:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007c9a:	2b19      	cmp	r3, #25
 8007c9c:	d804      	bhi.n	8007ca8 <_strtol_l.isra.0+0xb8>
 8007c9e:	3c57      	subs	r4, #87	; 0x57
 8007ca0:	e7dc      	b.n	8007c5c <_strtol_l.isra.0+0x6c>
 8007ca2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ca6:	e7e5      	b.n	8007c74 <_strtol_l.isra.0+0x84>
 8007ca8:	1c7b      	adds	r3, r7, #1
 8007caa:	d108      	bne.n	8007cbe <_strtol_l.isra.0+0xce>
 8007cac:	2322      	movs	r3, #34	; 0x22
 8007cae:	f8c8 3000 	str.w	r3, [r8]
 8007cb2:	4608      	mov	r0, r1
 8007cb4:	f1ba 0f00 	cmp.w	sl, #0
 8007cb8:	d107      	bne.n	8007cca <_strtol_l.isra.0+0xda>
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbe:	b102      	cbz	r2, 8007cc2 <_strtol_l.isra.0+0xd2>
 8007cc0:	4240      	negs	r0, r0
 8007cc2:	f1ba 0f00 	cmp.w	sl, #0
 8007cc6:	d0f8      	beq.n	8007cba <_strtol_l.isra.0+0xca>
 8007cc8:	b10f      	cbz	r7, 8007cce <_strtol_l.isra.0+0xde>
 8007cca:	f105 39ff 	add.w	r9, r5, #4294967295
 8007cce:	f8ca 9000 	str.w	r9, [sl]
 8007cd2:	e7f2      	b.n	8007cba <_strtol_l.isra.0+0xca>
 8007cd4:	2430      	movs	r4, #48	; 0x30
 8007cd6:	2e00      	cmp	r6, #0
 8007cd8:	d1af      	bne.n	8007c3a <_strtol_l.isra.0+0x4a>
 8007cda:	2608      	movs	r6, #8
 8007cdc:	e7ad      	b.n	8007c3a <_strtol_l.isra.0+0x4a>
 8007cde:	2c30      	cmp	r4, #48	; 0x30
 8007ce0:	d0a3      	beq.n	8007c2a <_strtol_l.isra.0+0x3a>
 8007ce2:	260a      	movs	r6, #10
 8007ce4:	e7a9      	b.n	8007c3a <_strtol_l.isra.0+0x4a>
	...

08007ce8 <_strtol_r>:
 8007ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cea:	4c06      	ldr	r4, [pc, #24]	; (8007d04 <_strtol_r+0x1c>)
 8007cec:	4d06      	ldr	r5, [pc, #24]	; (8007d08 <_strtol_r+0x20>)
 8007cee:	6824      	ldr	r4, [r4, #0]
 8007cf0:	6a24      	ldr	r4, [r4, #32]
 8007cf2:	2c00      	cmp	r4, #0
 8007cf4:	bf08      	it	eq
 8007cf6:	462c      	moveq	r4, r5
 8007cf8:	9400      	str	r4, [sp, #0]
 8007cfa:	f7ff ff79 	bl	8007bf0 <_strtol_l.isra.0>
 8007cfe:	b003      	add	sp, #12
 8007d00:	bd30      	pop	{r4, r5, pc}
 8007d02:	bf00      	nop
 8007d04:	2000000c 	.word	0x2000000c
 8007d08:	20000070 	.word	0x20000070

08007d0c <strtol>:
 8007d0c:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <strtol+0x24>)
 8007d0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d10:	681c      	ldr	r4, [r3, #0]
 8007d12:	4d08      	ldr	r5, [pc, #32]	; (8007d34 <strtol+0x28>)
 8007d14:	6a23      	ldr	r3, [r4, #32]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bf08      	it	eq
 8007d1a:	462b      	moveq	r3, r5
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	460a      	mov	r2, r1
 8007d22:	4601      	mov	r1, r0
 8007d24:	4620      	mov	r0, r4
 8007d26:	f7ff ff63 	bl	8007bf0 <_strtol_l.isra.0>
 8007d2a:	b003      	add	sp, #12
 8007d2c:	bd30      	pop	{r4, r5, pc}
 8007d2e:	bf00      	nop
 8007d30:	2000000c 	.word	0x2000000c
 8007d34:	20000070 	.word	0x20000070

08007d38 <__swbuf_r>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	460e      	mov	r6, r1
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	4605      	mov	r5, r0
 8007d40:	b118      	cbz	r0, 8007d4a <__swbuf_r+0x12>
 8007d42:	6983      	ldr	r3, [r0, #24]
 8007d44:	b90b      	cbnz	r3, 8007d4a <__swbuf_r+0x12>
 8007d46:	f000 fffd 	bl	8008d44 <__sinit>
 8007d4a:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <__swbuf_r+0x98>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d12a      	bne.n	8007da6 <__swbuf_r+0x6e>
 8007d50:	686c      	ldr	r4, [r5, #4]
 8007d52:	69a3      	ldr	r3, [r4, #24]
 8007d54:	60a3      	str	r3, [r4, #8]
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	071a      	lsls	r2, r3, #28
 8007d5a:	d52e      	bpl.n	8007dba <__swbuf_r+0x82>
 8007d5c:	6923      	ldr	r3, [r4, #16]
 8007d5e:	b363      	cbz	r3, 8007dba <__swbuf_r+0x82>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	6820      	ldr	r0, [r4, #0]
 8007d64:	1ac0      	subs	r0, r0, r3
 8007d66:	6963      	ldr	r3, [r4, #20]
 8007d68:	b2f6      	uxtb	r6, r6
 8007d6a:	4283      	cmp	r3, r0
 8007d6c:	4637      	mov	r7, r6
 8007d6e:	dc04      	bgt.n	8007d7a <__swbuf_r+0x42>
 8007d70:	4621      	mov	r1, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 ff6a 	bl	8008c4c <_fflush_r>
 8007d78:	bb28      	cbnz	r0, 8007dc6 <__swbuf_r+0x8e>
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	60a3      	str	r3, [r4, #8]
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	6022      	str	r2, [r4, #0]
 8007d86:	701e      	strb	r6, [r3, #0]
 8007d88:	6963      	ldr	r3, [r4, #20]
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	4283      	cmp	r3, r0
 8007d8e:	d004      	beq.n	8007d9a <__swbuf_r+0x62>
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	07db      	lsls	r3, r3, #31
 8007d94:	d519      	bpl.n	8007dca <__swbuf_r+0x92>
 8007d96:	2e0a      	cmp	r6, #10
 8007d98:	d117      	bne.n	8007dca <__swbuf_r+0x92>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f000 ff55 	bl	8008c4c <_fflush_r>
 8007da2:	b190      	cbz	r0, 8007dca <__swbuf_r+0x92>
 8007da4:	e00f      	b.n	8007dc6 <__swbuf_r+0x8e>
 8007da6:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <__swbuf_r+0x9c>)
 8007da8:	429c      	cmp	r4, r3
 8007daa:	d101      	bne.n	8007db0 <__swbuf_r+0x78>
 8007dac:	68ac      	ldr	r4, [r5, #8]
 8007dae:	e7d0      	b.n	8007d52 <__swbuf_r+0x1a>
 8007db0:	4b09      	ldr	r3, [pc, #36]	; (8007dd8 <__swbuf_r+0xa0>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	bf08      	it	eq
 8007db6:	68ec      	ldreq	r4, [r5, #12]
 8007db8:	e7cb      	b.n	8007d52 <__swbuf_r+0x1a>
 8007dba:	4621      	mov	r1, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f000 f80d 	bl	8007ddc <__swsetup_r>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d0cc      	beq.n	8007d60 <__swbuf_r+0x28>
 8007dc6:	f04f 37ff 	mov.w	r7, #4294967295
 8007dca:	4638      	mov	r0, r7
 8007dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	0800ab10 	.word	0x0800ab10
 8007dd4:	0800ab30 	.word	0x0800ab30
 8007dd8:	0800aaf0 	.word	0x0800aaf0

08007ddc <__swsetup_r>:
 8007ddc:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <__swsetup_r+0xcc>)
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	681d      	ldr	r5, [r3, #0]
 8007de2:	4606      	mov	r6, r0
 8007de4:	460c      	mov	r4, r1
 8007de6:	b125      	cbz	r5, 8007df2 <__swsetup_r+0x16>
 8007de8:	69ab      	ldr	r3, [r5, #24]
 8007dea:	b913      	cbnz	r3, 8007df2 <__swsetup_r+0x16>
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 ffa9 	bl	8008d44 <__sinit>
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <__swsetup_r+0xd0>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d10f      	bne.n	8007e18 <__swsetup_r+0x3c>
 8007df8:	686c      	ldr	r4, [r5, #4]
 8007dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	0715      	lsls	r5, r2, #28
 8007e02:	d42c      	bmi.n	8007e5e <__swsetup_r+0x82>
 8007e04:	06d0      	lsls	r0, r2, #27
 8007e06:	d411      	bmi.n	8007e2c <__swsetup_r+0x50>
 8007e08:	2209      	movs	r2, #9
 8007e0a:	6032      	str	r2, [r6, #0]
 8007e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	e03e      	b.n	8007e96 <__swsetup_r+0xba>
 8007e18:	4b25      	ldr	r3, [pc, #148]	; (8007eb0 <__swsetup_r+0xd4>)
 8007e1a:	429c      	cmp	r4, r3
 8007e1c:	d101      	bne.n	8007e22 <__swsetup_r+0x46>
 8007e1e:	68ac      	ldr	r4, [r5, #8]
 8007e20:	e7eb      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e22:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <__swsetup_r+0xd8>)
 8007e24:	429c      	cmp	r4, r3
 8007e26:	bf08      	it	eq
 8007e28:	68ec      	ldreq	r4, [r5, #12]
 8007e2a:	e7e6      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e2c:	0751      	lsls	r1, r2, #29
 8007e2e:	d512      	bpl.n	8007e56 <__swsetup_r+0x7a>
 8007e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e32:	b141      	cbz	r1, 8007e46 <__swsetup_r+0x6a>
 8007e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d002      	beq.n	8007e42 <__swsetup_r+0x66>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f7fe f8c7 	bl	8005fd0 <_free_r>
 8007e42:	2300      	movs	r3, #0
 8007e44:	6363      	str	r3, [r4, #52]	; 0x34
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0308 	orr.w	r3, r3, #8
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	b94b      	cbnz	r3, 8007e76 <__swsetup_r+0x9a>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6c:	d003      	beq.n	8007e76 <__swsetup_r+0x9a>
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4630      	mov	r0, r6
 8007e72:	f001 fb97 	bl	80095a4 <__smakebuf_r>
 8007e76:	89a2      	ldrh	r2, [r4, #12]
 8007e78:	f012 0301 	ands.w	r3, r2, #1
 8007e7c:	d00c      	beq.n	8007e98 <__swsetup_r+0xbc>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60a3      	str	r3, [r4, #8]
 8007e82:	6963      	ldr	r3, [r4, #20]
 8007e84:	425b      	negs	r3, r3
 8007e86:	61a3      	str	r3, [r4, #24]
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	b953      	cbnz	r3, 8007ea2 <__swsetup_r+0xc6>
 8007e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007e94:	d1ba      	bne.n	8007e0c <__swsetup_r+0x30>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	0792      	lsls	r2, r2, #30
 8007e9a:	bf58      	it	pl
 8007e9c:	6963      	ldrpl	r3, [r4, #20]
 8007e9e:	60a3      	str	r3, [r4, #8]
 8007ea0:	e7f2      	b.n	8007e88 <__swsetup_r+0xac>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7f7      	b.n	8007e96 <__swsetup_r+0xba>
 8007ea6:	bf00      	nop
 8007ea8:	2000000c 	.word	0x2000000c
 8007eac:	0800ab10 	.word	0x0800ab10
 8007eb0:	0800ab30 	.word	0x0800ab30
 8007eb4:	0800aaf0 	.word	0x0800aaf0

08007eb8 <quorem>:
 8007eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	6903      	ldr	r3, [r0, #16]
 8007ebe:	690c      	ldr	r4, [r1, #16]
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	f2c0 8082 	blt.w	8007fcc <quorem+0x114>
 8007ec8:	3c01      	subs	r4, #1
 8007eca:	f101 0714 	add.w	r7, r1, #20
 8007ece:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ed2:	f100 0614 	add.w	r6, r0, #20
 8007ed6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007eda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007ede:	eb06 030c 	add.w	r3, r6, ip
 8007ee2:	3501      	adds	r5, #1
 8007ee4:	eb07 090c 	add.w	r9, r7, ip
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	fbb0 f5f5 	udiv	r5, r0, r5
 8007eee:	b395      	cbz	r5, 8007f56 <quorem+0x9e>
 8007ef0:	f04f 0a00 	mov.w	sl, #0
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	46b6      	mov	lr, r6
 8007ef8:	46d3      	mov	fp, sl
 8007efa:	f850 2b04 	ldr.w	r2, [r0], #4
 8007efe:	b293      	uxth	r3, r2
 8007f00:	fb05 a303 	mla	r3, r5, r3, sl
 8007f04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	ebab 0303 	sub.w	r3, fp, r3
 8007f0e:	0c12      	lsrs	r2, r2, #16
 8007f10:	f8de b000 	ldr.w	fp, [lr]
 8007f14:	fb05 a202 	mla	r2, r5, r2, sl
 8007f18:	fa13 f38b 	uxtah	r3, r3, fp
 8007f1c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007f20:	fa1f fb82 	uxth.w	fp, r2
 8007f24:	f8de 2000 	ldr.w	r2, [lr]
 8007f28:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f36:	4581      	cmp	r9, r0
 8007f38:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f3c:	f84e 3b04 	str.w	r3, [lr], #4
 8007f40:	d2db      	bcs.n	8007efa <quorem+0x42>
 8007f42:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f46:	b933      	cbnz	r3, 8007f56 <quorem+0x9e>
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	3b04      	subs	r3, #4
 8007f4c:	429e      	cmp	r6, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	d330      	bcc.n	8007fb4 <quorem+0xfc>
 8007f52:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f56:	4640      	mov	r0, r8
 8007f58:	f001 fdcc 	bl	8009af4 <__mcmp>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	db25      	blt.n	8007fac <quorem+0xf4>
 8007f60:	3501      	adds	r5, #1
 8007f62:	4630      	mov	r0, r6
 8007f64:	f04f 0c00 	mov.w	ip, #0
 8007f68:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f6c:	f8d0 e000 	ldr.w	lr, [r0]
 8007f70:	b293      	uxth	r3, r2
 8007f72:	ebac 0303 	sub.w	r3, ip, r3
 8007f76:	0c12      	lsrs	r2, r2, #16
 8007f78:	fa13 f38e 	uxtah	r3, r3, lr
 8007f7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f8a:	45b9      	cmp	r9, r7
 8007f8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f90:	f840 3b04 	str.w	r3, [r0], #4
 8007f94:	d2e8      	bcs.n	8007f68 <quorem+0xb0>
 8007f96:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f9a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f9e:	b92a      	cbnz	r2, 8007fac <quorem+0xf4>
 8007fa0:	3b04      	subs	r3, #4
 8007fa2:	429e      	cmp	r6, r3
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	d30b      	bcc.n	8007fc0 <quorem+0x108>
 8007fa8:	f8c8 4010 	str.w	r4, [r8, #16]
 8007fac:	4628      	mov	r0, r5
 8007fae:	b003      	add	sp, #12
 8007fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	3b04      	subs	r3, #4
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	d1ca      	bne.n	8007f52 <quorem+0x9a>
 8007fbc:	3c01      	subs	r4, #1
 8007fbe:	e7c5      	b.n	8007f4c <quorem+0x94>
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	3b04      	subs	r3, #4
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	d1ef      	bne.n	8007fa8 <quorem+0xf0>
 8007fc8:	3c01      	subs	r4, #1
 8007fca:	e7ea      	b.n	8007fa2 <quorem+0xea>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	e7ee      	b.n	8007fae <quorem+0xf6>

08007fd0 <_dtoa_r>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	ec57 6b10 	vmov	r6, r7, d0
 8007fd8:	b097      	sub	sp, #92	; 0x5c
 8007fda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fdc:	9106      	str	r1, [sp, #24]
 8007fde:	4604      	mov	r4, r0
 8007fe0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8007fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fe8:	e9cd 6700 	strd	r6, r7, [sp]
 8007fec:	b93d      	cbnz	r5, 8007ffe <_dtoa_r+0x2e>
 8007fee:	2010      	movs	r0, #16
 8007ff0:	f7fd ffb2 	bl	8005f58 <malloc>
 8007ff4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ff6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ffa:	6005      	str	r5, [r0, #0]
 8007ffc:	60c5      	str	r5, [r0, #12]
 8007ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008000:	6819      	ldr	r1, [r3, #0]
 8008002:	b151      	cbz	r1, 800801a <_dtoa_r+0x4a>
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	604a      	str	r2, [r1, #4]
 8008008:	2301      	movs	r3, #1
 800800a:	4093      	lsls	r3, r2
 800800c:	608b      	str	r3, [r1, #8]
 800800e:	4620      	mov	r0, r4
 8008010:	f001 fb50 	bl	80096b4 <_Bfree>
 8008014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	1e3b      	subs	r3, r7, #0
 800801c:	bfbb      	ittet	lt
 800801e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008022:	9301      	strlt	r3, [sp, #4]
 8008024:	2300      	movge	r3, #0
 8008026:	2201      	movlt	r2, #1
 8008028:	bfac      	ite	ge
 800802a:	f8c8 3000 	strge.w	r3, [r8]
 800802e:	f8c8 2000 	strlt.w	r2, [r8]
 8008032:	4baf      	ldr	r3, [pc, #700]	; (80082f0 <_dtoa_r+0x320>)
 8008034:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008038:	ea33 0308 	bics.w	r3, r3, r8
 800803c:	d114      	bne.n	8008068 <_dtoa_r+0x98>
 800803e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008040:	f242 730f 	movw	r3, #9999	; 0x270f
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	b923      	cbnz	r3, 8008054 <_dtoa_r+0x84>
 800804a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800804e:	2800      	cmp	r0, #0
 8008050:	f000 8542 	beq.w	8008ad8 <_dtoa_r+0xb08>
 8008054:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008056:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008304 <_dtoa_r+0x334>
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 8544 	beq.w	8008ae8 <_dtoa_r+0xb18>
 8008060:	f10b 0303 	add.w	r3, fp, #3
 8008064:	f000 bd3e 	b.w	8008ae4 <_dtoa_r+0xb14>
 8008068:	e9dd 6700 	ldrd	r6, r7, [sp]
 800806c:	2200      	movs	r2, #0
 800806e:	2300      	movs	r3, #0
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 fd30 	bl	8000ad8 <__aeabi_dcmpeq>
 8008078:	4681      	mov	r9, r0
 800807a:	b168      	cbz	r0, 8008098 <_dtoa_r+0xc8>
 800807c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800807e:	2301      	movs	r3, #1
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8524 	beq.w	8008ad2 <_dtoa_r+0xb02>
 800808a:	4b9a      	ldr	r3, [pc, #616]	; (80082f4 <_dtoa_r+0x324>)
 800808c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800808e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	f000 bd28 	b.w	8008ae8 <_dtoa_r+0xb18>
 8008098:	aa14      	add	r2, sp, #80	; 0x50
 800809a:	a915      	add	r1, sp, #84	; 0x54
 800809c:	ec47 6b10 	vmov	d0, r6, r7
 80080a0:	4620      	mov	r0, r4
 80080a2:	f001 fe15 	bl	8009cd0 <__d2b>
 80080a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80080aa:	9004      	str	r0, [sp, #16]
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	d07c      	beq.n	80081aa <_dtoa_r+0x1da>
 80080b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80080b8:	46b2      	mov	sl, r6
 80080ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80080be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80080c6:	2200      	movs	r2, #0
 80080c8:	4b8b      	ldr	r3, [pc, #556]	; (80082f8 <_dtoa_r+0x328>)
 80080ca:	4650      	mov	r0, sl
 80080cc:	4659      	mov	r1, fp
 80080ce:	f7f8 f8e3 	bl	8000298 <__aeabi_dsub>
 80080d2:	a381      	add	r3, pc, #516	; (adr r3, 80082d8 <_dtoa_r+0x308>)
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f7f8 fa96 	bl	8000608 <__aeabi_dmul>
 80080dc:	a380      	add	r3, pc, #512	; (adr r3, 80082e0 <_dtoa_r+0x310>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 f8db 	bl	800029c <__adddf3>
 80080e6:	4606      	mov	r6, r0
 80080e8:	4628      	mov	r0, r5
 80080ea:	460f      	mov	r7, r1
 80080ec:	f7f8 fa22 	bl	8000534 <__aeabi_i2d>
 80080f0:	a37d      	add	r3, pc, #500	; (adr r3, 80082e8 <_dtoa_r+0x318>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 fa87 	bl	8000608 <__aeabi_dmul>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4630      	mov	r0, r6
 8008100:	4639      	mov	r1, r7
 8008102:	f7f8 f8cb 	bl	800029c <__adddf3>
 8008106:	4606      	mov	r6, r0
 8008108:	460f      	mov	r7, r1
 800810a:	f7f8 fd2d 	bl	8000b68 <__aeabi_d2iz>
 800810e:	2200      	movs	r2, #0
 8008110:	4682      	mov	sl, r0
 8008112:	2300      	movs	r3, #0
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 fce8 	bl	8000aec <__aeabi_dcmplt>
 800811c:	b148      	cbz	r0, 8008132 <_dtoa_r+0x162>
 800811e:	4650      	mov	r0, sl
 8008120:	f7f8 fa08 	bl	8000534 <__aeabi_i2d>
 8008124:	4632      	mov	r2, r6
 8008126:	463b      	mov	r3, r7
 8008128:	f7f8 fcd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800812c:	b908      	cbnz	r0, 8008132 <_dtoa_r+0x162>
 800812e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008132:	f1ba 0f16 	cmp.w	sl, #22
 8008136:	d859      	bhi.n	80081ec <_dtoa_r+0x21c>
 8008138:	4970      	ldr	r1, [pc, #448]	; (80082fc <_dtoa_r+0x32c>)
 800813a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800813e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008146:	f7f8 fcef 	bl	8000b28 <__aeabi_dcmpgt>
 800814a:	2800      	cmp	r0, #0
 800814c:	d050      	beq.n	80081f0 <_dtoa_r+0x220>
 800814e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008152:	2300      	movs	r3, #0
 8008154:	930f      	str	r3, [sp, #60]	; 0x3c
 8008156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008158:	1b5d      	subs	r5, r3, r5
 800815a:	f1b5 0801 	subs.w	r8, r5, #1
 800815e:	bf49      	itett	mi
 8008160:	f1c5 0301 	rsbmi	r3, r5, #1
 8008164:	2300      	movpl	r3, #0
 8008166:	9305      	strmi	r3, [sp, #20]
 8008168:	f04f 0800 	movmi.w	r8, #0
 800816c:	bf58      	it	pl
 800816e:	9305      	strpl	r3, [sp, #20]
 8008170:	f1ba 0f00 	cmp.w	sl, #0
 8008174:	db3e      	blt.n	80081f4 <_dtoa_r+0x224>
 8008176:	2300      	movs	r3, #0
 8008178:	44d0      	add	r8, sl
 800817a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800817e:	9307      	str	r3, [sp, #28]
 8008180:	9b06      	ldr	r3, [sp, #24]
 8008182:	2b09      	cmp	r3, #9
 8008184:	f200 8090 	bhi.w	80082a8 <_dtoa_r+0x2d8>
 8008188:	2b05      	cmp	r3, #5
 800818a:	bfc4      	itt	gt
 800818c:	3b04      	subgt	r3, #4
 800818e:	9306      	strgt	r3, [sp, #24]
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	f1a3 0302 	sub.w	r3, r3, #2
 8008196:	bfcc      	ite	gt
 8008198:	2500      	movgt	r5, #0
 800819a:	2501      	movle	r5, #1
 800819c:	2b03      	cmp	r3, #3
 800819e:	f200 808f 	bhi.w	80082c0 <_dtoa_r+0x2f0>
 80081a2:	e8df f003 	tbb	[pc, r3]
 80081a6:	7f7d      	.short	0x7f7d
 80081a8:	7131      	.short	0x7131
 80081aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80081ae:	441d      	add	r5, r3
 80081b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80081b4:	2820      	cmp	r0, #32
 80081b6:	dd13      	ble.n	80081e0 <_dtoa_r+0x210>
 80081b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80081bc:	9b00      	ldr	r3, [sp, #0]
 80081be:	fa08 f800 	lsl.w	r8, r8, r0
 80081c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80081c6:	fa23 f000 	lsr.w	r0, r3, r0
 80081ca:	ea48 0000 	orr.w	r0, r8, r0
 80081ce:	f7f8 f9a1 	bl	8000514 <__aeabi_ui2d>
 80081d2:	2301      	movs	r3, #1
 80081d4:	4682      	mov	sl, r0
 80081d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80081da:	3d01      	subs	r5, #1
 80081dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80081de:	e772      	b.n	80080c6 <_dtoa_r+0xf6>
 80081e0:	9b00      	ldr	r3, [sp, #0]
 80081e2:	f1c0 0020 	rsb	r0, r0, #32
 80081e6:	fa03 f000 	lsl.w	r0, r3, r0
 80081ea:	e7f0      	b.n	80081ce <_dtoa_r+0x1fe>
 80081ec:	2301      	movs	r3, #1
 80081ee:	e7b1      	b.n	8008154 <_dtoa_r+0x184>
 80081f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80081f2:	e7b0      	b.n	8008156 <_dtoa_r+0x186>
 80081f4:	9b05      	ldr	r3, [sp, #20]
 80081f6:	eba3 030a 	sub.w	r3, r3, sl
 80081fa:	9305      	str	r3, [sp, #20]
 80081fc:	f1ca 0300 	rsb	r3, sl, #0
 8008200:	9307      	str	r3, [sp, #28]
 8008202:	2300      	movs	r3, #0
 8008204:	930e      	str	r3, [sp, #56]	; 0x38
 8008206:	e7bb      	b.n	8008180 <_dtoa_r+0x1b0>
 8008208:	2301      	movs	r3, #1
 800820a:	930a      	str	r3, [sp, #40]	; 0x28
 800820c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800820e:	2b00      	cmp	r3, #0
 8008210:	dd59      	ble.n	80082c6 <_dtoa_r+0x2f6>
 8008212:	9302      	str	r3, [sp, #8]
 8008214:	4699      	mov	r9, r3
 8008216:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008218:	2200      	movs	r2, #0
 800821a:	6072      	str	r2, [r6, #4]
 800821c:	2204      	movs	r2, #4
 800821e:	f102 0014 	add.w	r0, r2, #20
 8008222:	4298      	cmp	r0, r3
 8008224:	6871      	ldr	r1, [r6, #4]
 8008226:	d953      	bls.n	80082d0 <_dtoa_r+0x300>
 8008228:	4620      	mov	r0, r4
 800822a:	f001 fa0f 	bl	800964c <_Balloc>
 800822e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008230:	6030      	str	r0, [r6, #0]
 8008232:	f1b9 0f0e 	cmp.w	r9, #14
 8008236:	f8d3 b000 	ldr.w	fp, [r3]
 800823a:	f200 80e6 	bhi.w	800840a <_dtoa_r+0x43a>
 800823e:	2d00      	cmp	r5, #0
 8008240:	f000 80e3 	beq.w	800840a <_dtoa_r+0x43a>
 8008244:	ed9d 7b00 	vldr	d7, [sp]
 8008248:	f1ba 0f00 	cmp.w	sl, #0
 800824c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008250:	dd74      	ble.n	800833c <_dtoa_r+0x36c>
 8008252:	4a2a      	ldr	r2, [pc, #168]	; (80082fc <_dtoa_r+0x32c>)
 8008254:	f00a 030f 	and.w	r3, sl, #15
 8008258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800825c:	ed93 7b00 	vldr	d7, [r3]
 8008260:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008264:	06f0      	lsls	r0, r6, #27
 8008266:	ed8d 7b08 	vstr	d7, [sp, #32]
 800826a:	d565      	bpl.n	8008338 <_dtoa_r+0x368>
 800826c:	4b24      	ldr	r3, [pc, #144]	; (8008300 <_dtoa_r+0x330>)
 800826e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008272:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008276:	f7f8 faf1 	bl	800085c <__aeabi_ddiv>
 800827a:	e9cd 0100 	strd	r0, r1, [sp]
 800827e:	f006 060f 	and.w	r6, r6, #15
 8008282:	2503      	movs	r5, #3
 8008284:	4f1e      	ldr	r7, [pc, #120]	; (8008300 <_dtoa_r+0x330>)
 8008286:	e04c      	b.n	8008322 <_dtoa_r+0x352>
 8008288:	2301      	movs	r3, #1
 800828a:	930a      	str	r3, [sp, #40]	; 0x28
 800828c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800828e:	4453      	add	r3, sl
 8008290:	f103 0901 	add.w	r9, r3, #1
 8008294:	9302      	str	r3, [sp, #8]
 8008296:	464b      	mov	r3, r9
 8008298:	2b01      	cmp	r3, #1
 800829a:	bfb8      	it	lt
 800829c:	2301      	movlt	r3, #1
 800829e:	e7ba      	b.n	8008216 <_dtoa_r+0x246>
 80082a0:	2300      	movs	r3, #0
 80082a2:	e7b2      	b.n	800820a <_dtoa_r+0x23a>
 80082a4:	2300      	movs	r3, #0
 80082a6:	e7f0      	b.n	800828a <_dtoa_r+0x2ba>
 80082a8:	2501      	movs	r5, #1
 80082aa:	2300      	movs	r3, #0
 80082ac:	9306      	str	r3, [sp, #24]
 80082ae:	950a      	str	r5, [sp, #40]	; 0x28
 80082b0:	f04f 33ff 	mov.w	r3, #4294967295
 80082b4:	9302      	str	r3, [sp, #8]
 80082b6:	4699      	mov	r9, r3
 80082b8:	2200      	movs	r2, #0
 80082ba:	2312      	movs	r3, #18
 80082bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80082be:	e7aa      	b.n	8008216 <_dtoa_r+0x246>
 80082c0:	2301      	movs	r3, #1
 80082c2:	930a      	str	r3, [sp, #40]	; 0x28
 80082c4:	e7f4      	b.n	80082b0 <_dtoa_r+0x2e0>
 80082c6:	2301      	movs	r3, #1
 80082c8:	9302      	str	r3, [sp, #8]
 80082ca:	4699      	mov	r9, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	e7f5      	b.n	80082bc <_dtoa_r+0x2ec>
 80082d0:	3101      	adds	r1, #1
 80082d2:	6071      	str	r1, [r6, #4]
 80082d4:	0052      	lsls	r2, r2, #1
 80082d6:	e7a2      	b.n	800821e <_dtoa_r+0x24e>
 80082d8:	636f4361 	.word	0x636f4361
 80082dc:	3fd287a7 	.word	0x3fd287a7
 80082e0:	8b60c8b3 	.word	0x8b60c8b3
 80082e4:	3fc68a28 	.word	0x3fc68a28
 80082e8:	509f79fb 	.word	0x509f79fb
 80082ec:	3fd34413 	.word	0x3fd34413
 80082f0:	7ff00000 	.word	0x7ff00000
 80082f4:	0800aa65 	.word	0x0800aa65
 80082f8:	3ff80000 	.word	0x3ff80000
 80082fc:	0800ab88 	.word	0x0800ab88
 8008300:	0800ab60 	.word	0x0800ab60
 8008304:	0800aae9 	.word	0x0800aae9
 8008308:	07f1      	lsls	r1, r6, #31
 800830a:	d508      	bpl.n	800831e <_dtoa_r+0x34e>
 800830c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008314:	f7f8 f978 	bl	8000608 <__aeabi_dmul>
 8008318:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800831c:	3501      	adds	r5, #1
 800831e:	1076      	asrs	r6, r6, #1
 8008320:	3708      	adds	r7, #8
 8008322:	2e00      	cmp	r6, #0
 8008324:	d1f0      	bne.n	8008308 <_dtoa_r+0x338>
 8008326:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800832a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800832e:	f7f8 fa95 	bl	800085c <__aeabi_ddiv>
 8008332:	e9cd 0100 	strd	r0, r1, [sp]
 8008336:	e01a      	b.n	800836e <_dtoa_r+0x39e>
 8008338:	2502      	movs	r5, #2
 800833a:	e7a3      	b.n	8008284 <_dtoa_r+0x2b4>
 800833c:	f000 80a0 	beq.w	8008480 <_dtoa_r+0x4b0>
 8008340:	f1ca 0600 	rsb	r6, sl, #0
 8008344:	4b9f      	ldr	r3, [pc, #636]	; (80085c4 <_dtoa_r+0x5f4>)
 8008346:	4fa0      	ldr	r7, [pc, #640]	; (80085c8 <_dtoa_r+0x5f8>)
 8008348:	f006 020f 	and.w	r2, r6, #15
 800834c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008358:	f7f8 f956 	bl	8000608 <__aeabi_dmul>
 800835c:	e9cd 0100 	strd	r0, r1, [sp]
 8008360:	1136      	asrs	r6, r6, #4
 8008362:	2300      	movs	r3, #0
 8008364:	2502      	movs	r5, #2
 8008366:	2e00      	cmp	r6, #0
 8008368:	d17f      	bne.n	800846a <_dtoa_r+0x49a>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e1      	bne.n	8008332 <_dtoa_r+0x362>
 800836e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 8087 	beq.w	8008484 <_dtoa_r+0x4b4>
 8008376:	e9dd 6700 	ldrd	r6, r7, [sp]
 800837a:	2200      	movs	r2, #0
 800837c:	4b93      	ldr	r3, [pc, #588]	; (80085cc <_dtoa_r+0x5fc>)
 800837e:	4630      	mov	r0, r6
 8008380:	4639      	mov	r1, r7
 8008382:	f7f8 fbb3 	bl	8000aec <__aeabi_dcmplt>
 8008386:	2800      	cmp	r0, #0
 8008388:	d07c      	beq.n	8008484 <_dtoa_r+0x4b4>
 800838a:	f1b9 0f00 	cmp.w	r9, #0
 800838e:	d079      	beq.n	8008484 <_dtoa_r+0x4b4>
 8008390:	9b02      	ldr	r3, [sp, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd35      	ble.n	8008402 <_dtoa_r+0x432>
 8008396:	f10a 33ff 	add.w	r3, sl, #4294967295
 800839a:	9308      	str	r3, [sp, #32]
 800839c:	4639      	mov	r1, r7
 800839e:	2200      	movs	r2, #0
 80083a0:	4b8b      	ldr	r3, [pc, #556]	; (80085d0 <_dtoa_r+0x600>)
 80083a2:	4630      	mov	r0, r6
 80083a4:	f7f8 f930 	bl	8000608 <__aeabi_dmul>
 80083a8:	e9cd 0100 	strd	r0, r1, [sp]
 80083ac:	9f02      	ldr	r7, [sp, #8]
 80083ae:	3501      	adds	r5, #1
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7f8 f8bf 	bl	8000534 <__aeabi_i2d>
 80083b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083ba:	f7f8 f925 	bl	8000608 <__aeabi_dmul>
 80083be:	2200      	movs	r2, #0
 80083c0:	4b84      	ldr	r3, [pc, #528]	; (80085d4 <_dtoa_r+0x604>)
 80083c2:	f7f7 ff6b 	bl	800029c <__adddf3>
 80083c6:	4605      	mov	r5, r0
 80083c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80083cc:	2f00      	cmp	r7, #0
 80083ce:	d15d      	bne.n	800848c <_dtoa_r+0x4bc>
 80083d0:	2200      	movs	r2, #0
 80083d2:	4b81      	ldr	r3, [pc, #516]	; (80085d8 <_dtoa_r+0x608>)
 80083d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083d8:	f7f7 ff5e 	bl	8000298 <__aeabi_dsub>
 80083dc:	462a      	mov	r2, r5
 80083de:	4633      	mov	r3, r6
 80083e0:	e9cd 0100 	strd	r0, r1, [sp]
 80083e4:	f7f8 fba0 	bl	8000b28 <__aeabi_dcmpgt>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	f040 8288 	bne.w	80088fe <_dtoa_r+0x92e>
 80083ee:	462a      	mov	r2, r5
 80083f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083f8:	f7f8 fb78 	bl	8000aec <__aeabi_dcmplt>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f040 827c 	bne.w	80088fa <_dtoa_r+0x92a>
 8008402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008406:	e9cd 2300 	strd	r2, r3, [sp]
 800840a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800840c:	2b00      	cmp	r3, #0
 800840e:	f2c0 8150 	blt.w	80086b2 <_dtoa_r+0x6e2>
 8008412:	f1ba 0f0e 	cmp.w	sl, #14
 8008416:	f300 814c 	bgt.w	80086b2 <_dtoa_r+0x6e2>
 800841a:	4b6a      	ldr	r3, [pc, #424]	; (80085c4 <_dtoa_r+0x5f4>)
 800841c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008420:	ed93 7b00 	vldr	d7, [r3]
 8008424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008426:	2b00      	cmp	r3, #0
 8008428:	ed8d 7b02 	vstr	d7, [sp, #8]
 800842c:	f280 80d8 	bge.w	80085e0 <_dtoa_r+0x610>
 8008430:	f1b9 0f00 	cmp.w	r9, #0
 8008434:	f300 80d4 	bgt.w	80085e0 <_dtoa_r+0x610>
 8008438:	f040 825e 	bne.w	80088f8 <_dtoa_r+0x928>
 800843c:	2200      	movs	r2, #0
 800843e:	4b66      	ldr	r3, [pc, #408]	; (80085d8 <_dtoa_r+0x608>)
 8008440:	ec51 0b17 	vmov	r0, r1, d7
 8008444:	f7f8 f8e0 	bl	8000608 <__aeabi_dmul>
 8008448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844c:	f7f8 fb62 	bl	8000b14 <__aeabi_dcmpge>
 8008450:	464f      	mov	r7, r9
 8008452:	464e      	mov	r6, r9
 8008454:	2800      	cmp	r0, #0
 8008456:	f040 8234 	bne.w	80088c2 <_dtoa_r+0x8f2>
 800845a:	2331      	movs	r3, #49	; 0x31
 800845c:	f10b 0501 	add.w	r5, fp, #1
 8008460:	f88b 3000 	strb.w	r3, [fp]
 8008464:	f10a 0a01 	add.w	sl, sl, #1
 8008468:	e22f      	b.n	80088ca <_dtoa_r+0x8fa>
 800846a:	07f2      	lsls	r2, r6, #31
 800846c:	d505      	bpl.n	800847a <_dtoa_r+0x4aa>
 800846e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008472:	f7f8 f8c9 	bl	8000608 <__aeabi_dmul>
 8008476:	3501      	adds	r5, #1
 8008478:	2301      	movs	r3, #1
 800847a:	1076      	asrs	r6, r6, #1
 800847c:	3708      	adds	r7, #8
 800847e:	e772      	b.n	8008366 <_dtoa_r+0x396>
 8008480:	2502      	movs	r5, #2
 8008482:	e774      	b.n	800836e <_dtoa_r+0x39e>
 8008484:	f8cd a020 	str.w	sl, [sp, #32]
 8008488:	464f      	mov	r7, r9
 800848a:	e791      	b.n	80083b0 <_dtoa_r+0x3e0>
 800848c:	4b4d      	ldr	r3, [pc, #308]	; (80085c4 <_dtoa_r+0x5f4>)
 800848e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008492:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	d047      	beq.n	800852c <_dtoa_r+0x55c>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	2000      	movs	r0, #0
 80084a2:	494e      	ldr	r1, [pc, #312]	; (80085dc <_dtoa_r+0x60c>)
 80084a4:	f7f8 f9da 	bl	800085c <__aeabi_ddiv>
 80084a8:	462a      	mov	r2, r5
 80084aa:	4633      	mov	r3, r6
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084b4:	465d      	mov	r5, fp
 80084b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ba:	f7f8 fb55 	bl	8000b68 <__aeabi_d2iz>
 80084be:	4606      	mov	r6, r0
 80084c0:	f7f8 f838 	bl	8000534 <__aeabi_i2d>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084cc:	f7f7 fee4 	bl	8000298 <__aeabi_dsub>
 80084d0:	3630      	adds	r6, #48	; 0x30
 80084d2:	f805 6b01 	strb.w	r6, [r5], #1
 80084d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084da:	e9cd 0100 	strd	r0, r1, [sp]
 80084de:	f7f8 fb05 	bl	8000aec <__aeabi_dcmplt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d163      	bne.n	80085ae <_dtoa_r+0x5de>
 80084e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ea:	2000      	movs	r0, #0
 80084ec:	4937      	ldr	r1, [pc, #220]	; (80085cc <_dtoa_r+0x5fc>)
 80084ee:	f7f7 fed3 	bl	8000298 <__aeabi_dsub>
 80084f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084f6:	f7f8 faf9 	bl	8000aec <__aeabi_dcmplt>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f040 80b7 	bne.w	800866e <_dtoa_r+0x69e>
 8008500:	eba5 030b 	sub.w	r3, r5, fp
 8008504:	429f      	cmp	r7, r3
 8008506:	f77f af7c 	ble.w	8008402 <_dtoa_r+0x432>
 800850a:	2200      	movs	r2, #0
 800850c:	4b30      	ldr	r3, [pc, #192]	; (80085d0 <_dtoa_r+0x600>)
 800850e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008512:	f7f8 f879 	bl	8000608 <__aeabi_dmul>
 8008516:	2200      	movs	r2, #0
 8008518:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800851c:	4b2c      	ldr	r3, [pc, #176]	; (80085d0 <_dtoa_r+0x600>)
 800851e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008522:	f7f8 f871 	bl	8000608 <__aeabi_dmul>
 8008526:	e9cd 0100 	strd	r0, r1, [sp]
 800852a:	e7c4      	b.n	80084b6 <_dtoa_r+0x4e6>
 800852c:	462a      	mov	r2, r5
 800852e:	4633      	mov	r3, r6
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008538:	eb0b 0507 	add.w	r5, fp, r7
 800853c:	465e      	mov	r6, fp
 800853e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008542:	f7f8 fb11 	bl	8000b68 <__aeabi_d2iz>
 8008546:	4607      	mov	r7, r0
 8008548:	f7f7 fff4 	bl	8000534 <__aeabi_i2d>
 800854c:	3730      	adds	r7, #48	; 0x30
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008556:	f7f7 fe9f 	bl	8000298 <__aeabi_dsub>
 800855a:	f806 7b01 	strb.w	r7, [r6], #1
 800855e:	42ae      	cmp	r6, r5
 8008560:	e9cd 0100 	strd	r0, r1, [sp]
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	d126      	bne.n	80085b8 <_dtoa_r+0x5e8>
 800856a:	4b1c      	ldr	r3, [pc, #112]	; (80085dc <_dtoa_r+0x60c>)
 800856c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008570:	f7f7 fe94 	bl	800029c <__adddf3>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800857c:	f7f8 fad4 	bl	8000b28 <__aeabi_dcmpgt>
 8008580:	2800      	cmp	r0, #0
 8008582:	d174      	bne.n	800866e <_dtoa_r+0x69e>
 8008584:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008588:	2000      	movs	r0, #0
 800858a:	4914      	ldr	r1, [pc, #80]	; (80085dc <_dtoa_r+0x60c>)
 800858c:	f7f7 fe84 	bl	8000298 <__aeabi_dsub>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008598:	f7f8 faa8 	bl	8000aec <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	f43f af30 	beq.w	8008402 <_dtoa_r+0x432>
 80085a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085a6:	2b30      	cmp	r3, #48	; 0x30
 80085a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80085ac:	d002      	beq.n	80085b4 <_dtoa_r+0x5e4>
 80085ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80085b2:	e04a      	b.n	800864a <_dtoa_r+0x67a>
 80085b4:	4615      	mov	r5, r2
 80085b6:	e7f4      	b.n	80085a2 <_dtoa_r+0x5d2>
 80085b8:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <_dtoa_r+0x600>)
 80085ba:	f7f8 f825 	bl	8000608 <__aeabi_dmul>
 80085be:	e9cd 0100 	strd	r0, r1, [sp]
 80085c2:	e7bc      	b.n	800853e <_dtoa_r+0x56e>
 80085c4:	0800ab88 	.word	0x0800ab88
 80085c8:	0800ab60 	.word	0x0800ab60
 80085cc:	3ff00000 	.word	0x3ff00000
 80085d0:	40240000 	.word	0x40240000
 80085d4:	401c0000 	.word	0x401c0000
 80085d8:	40140000 	.word	0x40140000
 80085dc:	3fe00000 	.word	0x3fe00000
 80085e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085e4:	465d      	mov	r5, fp
 80085e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ea:	4630      	mov	r0, r6
 80085ec:	4639      	mov	r1, r7
 80085ee:	f7f8 f935 	bl	800085c <__aeabi_ddiv>
 80085f2:	f7f8 fab9 	bl	8000b68 <__aeabi_d2iz>
 80085f6:	4680      	mov	r8, r0
 80085f8:	f7f7 ff9c 	bl	8000534 <__aeabi_i2d>
 80085fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008600:	f7f8 f802 	bl	8000608 <__aeabi_dmul>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008610:	f7f7 fe42 	bl	8000298 <__aeabi_dsub>
 8008614:	f805 6b01 	strb.w	r6, [r5], #1
 8008618:	eba5 060b 	sub.w	r6, r5, fp
 800861c:	45b1      	cmp	r9, r6
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	d139      	bne.n	8008698 <_dtoa_r+0x6c8>
 8008624:	f7f7 fe3a 	bl	800029c <__adddf3>
 8008628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800862c:	4606      	mov	r6, r0
 800862e:	460f      	mov	r7, r1
 8008630:	f7f8 fa7a 	bl	8000b28 <__aeabi_dcmpgt>
 8008634:	b9c8      	cbnz	r0, 800866a <_dtoa_r+0x69a>
 8008636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800863a:	4630      	mov	r0, r6
 800863c:	4639      	mov	r1, r7
 800863e:	f7f8 fa4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008642:	b110      	cbz	r0, 800864a <_dtoa_r+0x67a>
 8008644:	f018 0f01 	tst.w	r8, #1
 8008648:	d10f      	bne.n	800866a <_dtoa_r+0x69a>
 800864a:	9904      	ldr	r1, [sp, #16]
 800864c:	4620      	mov	r0, r4
 800864e:	f001 f831 	bl	80096b4 <_Bfree>
 8008652:	2300      	movs	r3, #0
 8008654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008656:	702b      	strb	r3, [r5, #0]
 8008658:	f10a 0301 	add.w	r3, sl, #1
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 8241 	beq.w	8008ae8 <_dtoa_r+0xb18>
 8008666:	601d      	str	r5, [r3, #0]
 8008668:	e23e      	b.n	8008ae8 <_dtoa_r+0xb18>
 800866a:	f8cd a020 	str.w	sl, [sp, #32]
 800866e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008672:	2a39      	cmp	r2, #57	; 0x39
 8008674:	f105 33ff 	add.w	r3, r5, #4294967295
 8008678:	d108      	bne.n	800868c <_dtoa_r+0x6bc>
 800867a:	459b      	cmp	fp, r3
 800867c:	d10a      	bne.n	8008694 <_dtoa_r+0x6c4>
 800867e:	9b08      	ldr	r3, [sp, #32]
 8008680:	3301      	adds	r3, #1
 8008682:	9308      	str	r3, [sp, #32]
 8008684:	2330      	movs	r3, #48	; 0x30
 8008686:	f88b 3000 	strb.w	r3, [fp]
 800868a:	465b      	mov	r3, fp
 800868c:	781a      	ldrb	r2, [r3, #0]
 800868e:	3201      	adds	r2, #1
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	e78c      	b.n	80085ae <_dtoa_r+0x5de>
 8008694:	461d      	mov	r5, r3
 8008696:	e7ea      	b.n	800866e <_dtoa_r+0x69e>
 8008698:	2200      	movs	r2, #0
 800869a:	4b9b      	ldr	r3, [pc, #620]	; (8008908 <_dtoa_r+0x938>)
 800869c:	f7f7 ffb4 	bl	8000608 <__aeabi_dmul>
 80086a0:	2200      	movs	r2, #0
 80086a2:	2300      	movs	r3, #0
 80086a4:	4606      	mov	r6, r0
 80086a6:	460f      	mov	r7, r1
 80086a8:	f7f8 fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d09a      	beq.n	80085e6 <_dtoa_r+0x616>
 80086b0:	e7cb      	b.n	800864a <_dtoa_r+0x67a>
 80086b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b4:	2a00      	cmp	r2, #0
 80086b6:	f000 808b 	beq.w	80087d0 <_dtoa_r+0x800>
 80086ba:	9a06      	ldr	r2, [sp, #24]
 80086bc:	2a01      	cmp	r2, #1
 80086be:	dc6e      	bgt.n	800879e <_dtoa_r+0x7ce>
 80086c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	d067      	beq.n	8008796 <_dtoa_r+0x7c6>
 80086c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086ca:	9f07      	ldr	r7, [sp, #28]
 80086cc:	9d05      	ldr	r5, [sp, #20]
 80086ce:	9a05      	ldr	r2, [sp, #20]
 80086d0:	2101      	movs	r1, #1
 80086d2:	441a      	add	r2, r3
 80086d4:	4620      	mov	r0, r4
 80086d6:	9205      	str	r2, [sp, #20]
 80086d8:	4498      	add	r8, r3
 80086da:	f001 f8c9 	bl	8009870 <__i2b>
 80086de:	4606      	mov	r6, r0
 80086e0:	2d00      	cmp	r5, #0
 80086e2:	dd0c      	ble.n	80086fe <_dtoa_r+0x72e>
 80086e4:	f1b8 0f00 	cmp.w	r8, #0
 80086e8:	dd09      	ble.n	80086fe <_dtoa_r+0x72e>
 80086ea:	4545      	cmp	r5, r8
 80086ec:	9a05      	ldr	r2, [sp, #20]
 80086ee:	462b      	mov	r3, r5
 80086f0:	bfa8      	it	ge
 80086f2:	4643      	movge	r3, r8
 80086f4:	1ad2      	subs	r2, r2, r3
 80086f6:	9205      	str	r2, [sp, #20]
 80086f8:	1aed      	subs	r5, r5, r3
 80086fa:	eba8 0803 	sub.w	r8, r8, r3
 80086fe:	9b07      	ldr	r3, [sp, #28]
 8008700:	b1eb      	cbz	r3, 800873e <_dtoa_r+0x76e>
 8008702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008704:	2b00      	cmp	r3, #0
 8008706:	d067      	beq.n	80087d8 <_dtoa_r+0x808>
 8008708:	b18f      	cbz	r7, 800872e <_dtoa_r+0x75e>
 800870a:	4631      	mov	r1, r6
 800870c:	463a      	mov	r2, r7
 800870e:	4620      	mov	r0, r4
 8008710:	f001 f94e 	bl	80099b0 <__pow5mult>
 8008714:	9a04      	ldr	r2, [sp, #16]
 8008716:	4601      	mov	r1, r0
 8008718:	4606      	mov	r6, r0
 800871a:	4620      	mov	r0, r4
 800871c:	f001 f8b1 	bl	8009882 <__multiply>
 8008720:	9904      	ldr	r1, [sp, #16]
 8008722:	9008      	str	r0, [sp, #32]
 8008724:	4620      	mov	r0, r4
 8008726:	f000 ffc5 	bl	80096b4 <_Bfree>
 800872a:	9b08      	ldr	r3, [sp, #32]
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	9b07      	ldr	r3, [sp, #28]
 8008730:	1bda      	subs	r2, r3, r7
 8008732:	d004      	beq.n	800873e <_dtoa_r+0x76e>
 8008734:	9904      	ldr	r1, [sp, #16]
 8008736:	4620      	mov	r0, r4
 8008738:	f001 f93a 	bl	80099b0 <__pow5mult>
 800873c:	9004      	str	r0, [sp, #16]
 800873e:	2101      	movs	r1, #1
 8008740:	4620      	mov	r0, r4
 8008742:	f001 f895 	bl	8009870 <__i2b>
 8008746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008748:	4607      	mov	r7, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 81d0 	beq.w	8008af0 <_dtoa_r+0xb20>
 8008750:	461a      	mov	r2, r3
 8008752:	4601      	mov	r1, r0
 8008754:	4620      	mov	r0, r4
 8008756:	f001 f92b 	bl	80099b0 <__pow5mult>
 800875a:	9b06      	ldr	r3, [sp, #24]
 800875c:	2b01      	cmp	r3, #1
 800875e:	4607      	mov	r7, r0
 8008760:	dc40      	bgt.n	80087e4 <_dtoa_r+0x814>
 8008762:	9b00      	ldr	r3, [sp, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d139      	bne.n	80087dc <_dtoa_r+0x80c>
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800876e:	2b00      	cmp	r3, #0
 8008770:	d136      	bne.n	80087e0 <_dtoa_r+0x810>
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008778:	0d1b      	lsrs	r3, r3, #20
 800877a:	051b      	lsls	r3, r3, #20
 800877c:	b12b      	cbz	r3, 800878a <_dtoa_r+0x7ba>
 800877e:	9b05      	ldr	r3, [sp, #20]
 8008780:	3301      	adds	r3, #1
 8008782:	9305      	str	r3, [sp, #20]
 8008784:	f108 0801 	add.w	r8, r8, #1
 8008788:	2301      	movs	r3, #1
 800878a:	9307      	str	r3, [sp, #28]
 800878c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800878e:	2b00      	cmp	r3, #0
 8008790:	d12a      	bne.n	80087e8 <_dtoa_r+0x818>
 8008792:	2001      	movs	r0, #1
 8008794:	e030      	b.n	80087f8 <_dtoa_r+0x828>
 8008796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008798:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800879c:	e795      	b.n	80086ca <_dtoa_r+0x6fa>
 800879e:	9b07      	ldr	r3, [sp, #28]
 80087a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80087a4:	42bb      	cmp	r3, r7
 80087a6:	bfbf      	itttt	lt
 80087a8:	9b07      	ldrlt	r3, [sp, #28]
 80087aa:	9707      	strlt	r7, [sp, #28]
 80087ac:	1afa      	sublt	r2, r7, r3
 80087ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80087b0:	bfbb      	ittet	lt
 80087b2:	189b      	addlt	r3, r3, r2
 80087b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80087b6:	1bdf      	subge	r7, r3, r7
 80087b8:	2700      	movlt	r7, #0
 80087ba:	f1b9 0f00 	cmp.w	r9, #0
 80087be:	bfb5      	itete	lt
 80087c0:	9b05      	ldrlt	r3, [sp, #20]
 80087c2:	9d05      	ldrge	r5, [sp, #20]
 80087c4:	eba3 0509 	sublt.w	r5, r3, r9
 80087c8:	464b      	movge	r3, r9
 80087ca:	bfb8      	it	lt
 80087cc:	2300      	movlt	r3, #0
 80087ce:	e77e      	b.n	80086ce <_dtoa_r+0x6fe>
 80087d0:	9f07      	ldr	r7, [sp, #28]
 80087d2:	9d05      	ldr	r5, [sp, #20]
 80087d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087d6:	e783      	b.n	80086e0 <_dtoa_r+0x710>
 80087d8:	9a07      	ldr	r2, [sp, #28]
 80087da:	e7ab      	b.n	8008734 <_dtoa_r+0x764>
 80087dc:	2300      	movs	r3, #0
 80087de:	e7d4      	b.n	800878a <_dtoa_r+0x7ba>
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	e7d2      	b.n	800878a <_dtoa_r+0x7ba>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9307      	str	r3, [sp, #28]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087ee:	6918      	ldr	r0, [r3, #16]
 80087f0:	f000 fff0 	bl	80097d4 <__hi0bits>
 80087f4:	f1c0 0020 	rsb	r0, r0, #32
 80087f8:	4440      	add	r0, r8
 80087fa:	f010 001f 	ands.w	r0, r0, #31
 80087fe:	d047      	beq.n	8008890 <_dtoa_r+0x8c0>
 8008800:	f1c0 0320 	rsb	r3, r0, #32
 8008804:	2b04      	cmp	r3, #4
 8008806:	dd3b      	ble.n	8008880 <_dtoa_r+0x8b0>
 8008808:	9b05      	ldr	r3, [sp, #20]
 800880a:	f1c0 001c 	rsb	r0, r0, #28
 800880e:	4403      	add	r3, r0
 8008810:	9305      	str	r3, [sp, #20]
 8008812:	4405      	add	r5, r0
 8008814:	4480      	add	r8, r0
 8008816:	9b05      	ldr	r3, [sp, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	dd05      	ble.n	8008828 <_dtoa_r+0x858>
 800881c:	461a      	mov	r2, r3
 800881e:	9904      	ldr	r1, [sp, #16]
 8008820:	4620      	mov	r0, r4
 8008822:	f001 f913 	bl	8009a4c <__lshift>
 8008826:	9004      	str	r0, [sp, #16]
 8008828:	f1b8 0f00 	cmp.w	r8, #0
 800882c:	dd05      	ble.n	800883a <_dtoa_r+0x86a>
 800882e:	4639      	mov	r1, r7
 8008830:	4642      	mov	r2, r8
 8008832:	4620      	mov	r0, r4
 8008834:	f001 f90a 	bl	8009a4c <__lshift>
 8008838:	4607      	mov	r7, r0
 800883a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800883c:	b353      	cbz	r3, 8008894 <_dtoa_r+0x8c4>
 800883e:	4639      	mov	r1, r7
 8008840:	9804      	ldr	r0, [sp, #16]
 8008842:	f001 f957 	bl	8009af4 <__mcmp>
 8008846:	2800      	cmp	r0, #0
 8008848:	da24      	bge.n	8008894 <_dtoa_r+0x8c4>
 800884a:	2300      	movs	r3, #0
 800884c:	220a      	movs	r2, #10
 800884e:	9904      	ldr	r1, [sp, #16]
 8008850:	4620      	mov	r0, r4
 8008852:	f000 ff46 	bl	80096e2 <__multadd>
 8008856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008858:	9004      	str	r0, [sp, #16]
 800885a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 814d 	beq.w	8008afe <_dtoa_r+0xb2e>
 8008864:	2300      	movs	r3, #0
 8008866:	4631      	mov	r1, r6
 8008868:	220a      	movs	r2, #10
 800886a:	4620      	mov	r0, r4
 800886c:	f000 ff39 	bl	80096e2 <__multadd>
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	4606      	mov	r6, r0
 8008876:	dc4f      	bgt.n	8008918 <_dtoa_r+0x948>
 8008878:	9b06      	ldr	r3, [sp, #24]
 800887a:	2b02      	cmp	r3, #2
 800887c:	dd4c      	ble.n	8008918 <_dtoa_r+0x948>
 800887e:	e011      	b.n	80088a4 <_dtoa_r+0x8d4>
 8008880:	d0c9      	beq.n	8008816 <_dtoa_r+0x846>
 8008882:	9a05      	ldr	r2, [sp, #20]
 8008884:	331c      	adds	r3, #28
 8008886:	441a      	add	r2, r3
 8008888:	9205      	str	r2, [sp, #20]
 800888a:	441d      	add	r5, r3
 800888c:	4498      	add	r8, r3
 800888e:	e7c2      	b.n	8008816 <_dtoa_r+0x846>
 8008890:	4603      	mov	r3, r0
 8008892:	e7f6      	b.n	8008882 <_dtoa_r+0x8b2>
 8008894:	f1b9 0f00 	cmp.w	r9, #0
 8008898:	dc38      	bgt.n	800890c <_dtoa_r+0x93c>
 800889a:	9b06      	ldr	r3, [sp, #24]
 800889c:	2b02      	cmp	r3, #2
 800889e:	dd35      	ble.n	800890c <_dtoa_r+0x93c>
 80088a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80088a4:	9b02      	ldr	r3, [sp, #8]
 80088a6:	b963      	cbnz	r3, 80088c2 <_dtoa_r+0x8f2>
 80088a8:	4639      	mov	r1, r7
 80088aa:	2205      	movs	r2, #5
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 ff18 	bl	80096e2 <__multadd>
 80088b2:	4601      	mov	r1, r0
 80088b4:	4607      	mov	r7, r0
 80088b6:	9804      	ldr	r0, [sp, #16]
 80088b8:	f001 f91c 	bl	8009af4 <__mcmp>
 80088bc:	2800      	cmp	r0, #0
 80088be:	f73f adcc 	bgt.w	800845a <_dtoa_r+0x48a>
 80088c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c4:	465d      	mov	r5, fp
 80088c6:	ea6f 0a03 	mvn.w	sl, r3
 80088ca:	f04f 0900 	mov.w	r9, #0
 80088ce:	4639      	mov	r1, r7
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 feef 	bl	80096b4 <_Bfree>
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	f43f aeb7 	beq.w	800864a <_dtoa_r+0x67a>
 80088dc:	f1b9 0f00 	cmp.w	r9, #0
 80088e0:	d005      	beq.n	80088ee <_dtoa_r+0x91e>
 80088e2:	45b1      	cmp	r9, r6
 80088e4:	d003      	beq.n	80088ee <_dtoa_r+0x91e>
 80088e6:	4649      	mov	r1, r9
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fee3 	bl	80096b4 <_Bfree>
 80088ee:	4631      	mov	r1, r6
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fedf 	bl	80096b4 <_Bfree>
 80088f6:	e6a8      	b.n	800864a <_dtoa_r+0x67a>
 80088f8:	2700      	movs	r7, #0
 80088fa:	463e      	mov	r6, r7
 80088fc:	e7e1      	b.n	80088c2 <_dtoa_r+0x8f2>
 80088fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008902:	463e      	mov	r6, r7
 8008904:	e5a9      	b.n	800845a <_dtoa_r+0x48a>
 8008906:	bf00      	nop
 8008908:	40240000 	.word	0x40240000
 800890c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 80fa 	beq.w	8008b0c <_dtoa_r+0xb3c>
 8008918:	2d00      	cmp	r5, #0
 800891a:	dd05      	ble.n	8008928 <_dtoa_r+0x958>
 800891c:	4631      	mov	r1, r6
 800891e:	462a      	mov	r2, r5
 8008920:	4620      	mov	r0, r4
 8008922:	f001 f893 	bl	8009a4c <__lshift>
 8008926:	4606      	mov	r6, r0
 8008928:	9b07      	ldr	r3, [sp, #28]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d04c      	beq.n	80089c8 <_dtoa_r+0x9f8>
 800892e:	6871      	ldr	r1, [r6, #4]
 8008930:	4620      	mov	r0, r4
 8008932:	f000 fe8b 	bl	800964c <_Balloc>
 8008936:	6932      	ldr	r2, [r6, #16]
 8008938:	3202      	adds	r2, #2
 800893a:	4605      	mov	r5, r0
 800893c:	0092      	lsls	r2, r2, #2
 800893e:	f106 010c 	add.w	r1, r6, #12
 8008942:	300c      	adds	r0, #12
 8008944:	f7fd fb18 	bl	8005f78 <memcpy>
 8008948:	2201      	movs	r2, #1
 800894a:	4629      	mov	r1, r5
 800894c:	4620      	mov	r0, r4
 800894e:	f001 f87d 	bl	8009a4c <__lshift>
 8008952:	9b00      	ldr	r3, [sp, #0]
 8008954:	f8cd b014 	str.w	fp, [sp, #20]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	46b1      	mov	r9, r6
 800895e:	9307      	str	r3, [sp, #28]
 8008960:	4606      	mov	r6, r0
 8008962:	4639      	mov	r1, r7
 8008964:	9804      	ldr	r0, [sp, #16]
 8008966:	f7ff faa7 	bl	8007eb8 <quorem>
 800896a:	4649      	mov	r1, r9
 800896c:	4605      	mov	r5, r0
 800896e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008972:	9804      	ldr	r0, [sp, #16]
 8008974:	f001 f8be 	bl	8009af4 <__mcmp>
 8008978:	4632      	mov	r2, r6
 800897a:	9000      	str	r0, [sp, #0]
 800897c:	4639      	mov	r1, r7
 800897e:	4620      	mov	r0, r4
 8008980:	f001 f8d2 	bl	8009b28 <__mdiff>
 8008984:	68c3      	ldr	r3, [r0, #12]
 8008986:	4602      	mov	r2, r0
 8008988:	bb03      	cbnz	r3, 80089cc <_dtoa_r+0x9fc>
 800898a:	4601      	mov	r1, r0
 800898c:	9008      	str	r0, [sp, #32]
 800898e:	9804      	ldr	r0, [sp, #16]
 8008990:	f001 f8b0 	bl	8009af4 <__mcmp>
 8008994:	9a08      	ldr	r2, [sp, #32]
 8008996:	4603      	mov	r3, r0
 8008998:	4611      	mov	r1, r2
 800899a:	4620      	mov	r0, r4
 800899c:	9308      	str	r3, [sp, #32]
 800899e:	f000 fe89 	bl	80096b4 <_Bfree>
 80089a2:	9b08      	ldr	r3, [sp, #32]
 80089a4:	b9a3      	cbnz	r3, 80089d0 <_dtoa_r+0xa00>
 80089a6:	9a06      	ldr	r2, [sp, #24]
 80089a8:	b992      	cbnz	r2, 80089d0 <_dtoa_r+0xa00>
 80089aa:	9a07      	ldr	r2, [sp, #28]
 80089ac:	b982      	cbnz	r2, 80089d0 <_dtoa_r+0xa00>
 80089ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089b2:	d029      	beq.n	8008a08 <_dtoa_r+0xa38>
 80089b4:	9b00      	ldr	r3, [sp, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dd01      	ble.n	80089be <_dtoa_r+0x9ee>
 80089ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80089be:	9b05      	ldr	r3, [sp, #20]
 80089c0:	1c5d      	adds	r5, r3, #1
 80089c2:	f883 8000 	strb.w	r8, [r3]
 80089c6:	e782      	b.n	80088ce <_dtoa_r+0x8fe>
 80089c8:	4630      	mov	r0, r6
 80089ca:	e7c2      	b.n	8008952 <_dtoa_r+0x982>
 80089cc:	2301      	movs	r3, #1
 80089ce:	e7e3      	b.n	8008998 <_dtoa_r+0x9c8>
 80089d0:	9a00      	ldr	r2, [sp, #0]
 80089d2:	2a00      	cmp	r2, #0
 80089d4:	db04      	blt.n	80089e0 <_dtoa_r+0xa10>
 80089d6:	d125      	bne.n	8008a24 <_dtoa_r+0xa54>
 80089d8:	9a06      	ldr	r2, [sp, #24]
 80089da:	bb1a      	cbnz	r2, 8008a24 <_dtoa_r+0xa54>
 80089dc:	9a07      	ldr	r2, [sp, #28]
 80089de:	bb0a      	cbnz	r2, 8008a24 <_dtoa_r+0xa54>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	ddec      	ble.n	80089be <_dtoa_r+0x9ee>
 80089e4:	2201      	movs	r2, #1
 80089e6:	9904      	ldr	r1, [sp, #16]
 80089e8:	4620      	mov	r0, r4
 80089ea:	f001 f82f 	bl	8009a4c <__lshift>
 80089ee:	4639      	mov	r1, r7
 80089f0:	9004      	str	r0, [sp, #16]
 80089f2:	f001 f87f 	bl	8009af4 <__mcmp>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	dc03      	bgt.n	8008a02 <_dtoa_r+0xa32>
 80089fa:	d1e0      	bne.n	80089be <_dtoa_r+0x9ee>
 80089fc:	f018 0f01 	tst.w	r8, #1
 8008a00:	d0dd      	beq.n	80089be <_dtoa_r+0x9ee>
 8008a02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a06:	d1d8      	bne.n	80089ba <_dtoa_r+0x9ea>
 8008a08:	9b05      	ldr	r3, [sp, #20]
 8008a0a:	9a05      	ldr	r2, [sp, #20]
 8008a0c:	1c5d      	adds	r5, r3, #1
 8008a0e:	2339      	movs	r3, #57	; 0x39
 8008a10:	7013      	strb	r3, [r2, #0]
 8008a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a16:	2b39      	cmp	r3, #57	; 0x39
 8008a18:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a1c:	d04f      	beq.n	8008abe <_dtoa_r+0xaee>
 8008a1e:	3301      	adds	r3, #1
 8008a20:	7013      	strb	r3, [r2, #0]
 8008a22:	e754      	b.n	80088ce <_dtoa_r+0x8fe>
 8008a24:	9a05      	ldr	r2, [sp, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f102 0501 	add.w	r5, r2, #1
 8008a2c:	dd06      	ble.n	8008a3c <_dtoa_r+0xa6c>
 8008a2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a32:	d0e9      	beq.n	8008a08 <_dtoa_r+0xa38>
 8008a34:	f108 0801 	add.w	r8, r8, #1
 8008a38:	9b05      	ldr	r3, [sp, #20]
 8008a3a:	e7c2      	b.n	80089c2 <_dtoa_r+0x9f2>
 8008a3c:	9a02      	ldr	r2, [sp, #8]
 8008a3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a42:	eba5 030b 	sub.w	r3, r5, fp
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d021      	beq.n	8008a8e <_dtoa_r+0xabe>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	9904      	ldr	r1, [sp, #16]
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 fe46 	bl	80096e2 <__multadd>
 8008a56:	45b1      	cmp	r9, r6
 8008a58:	9004      	str	r0, [sp, #16]
 8008a5a:	f04f 0300 	mov.w	r3, #0
 8008a5e:	f04f 020a 	mov.w	r2, #10
 8008a62:	4649      	mov	r1, r9
 8008a64:	4620      	mov	r0, r4
 8008a66:	d105      	bne.n	8008a74 <_dtoa_r+0xaa4>
 8008a68:	f000 fe3b 	bl	80096e2 <__multadd>
 8008a6c:	4681      	mov	r9, r0
 8008a6e:	4606      	mov	r6, r0
 8008a70:	9505      	str	r5, [sp, #20]
 8008a72:	e776      	b.n	8008962 <_dtoa_r+0x992>
 8008a74:	f000 fe35 	bl	80096e2 <__multadd>
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4681      	mov	r9, r0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	220a      	movs	r2, #10
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fe2e 	bl	80096e2 <__multadd>
 8008a86:	4606      	mov	r6, r0
 8008a88:	e7f2      	b.n	8008a70 <_dtoa_r+0xaa0>
 8008a8a:	f04f 0900 	mov.w	r9, #0
 8008a8e:	2201      	movs	r2, #1
 8008a90:	9904      	ldr	r1, [sp, #16]
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 ffda 	bl	8009a4c <__lshift>
 8008a98:	4639      	mov	r1, r7
 8008a9a:	9004      	str	r0, [sp, #16]
 8008a9c:	f001 f82a 	bl	8009af4 <__mcmp>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	dcb6      	bgt.n	8008a12 <_dtoa_r+0xa42>
 8008aa4:	d102      	bne.n	8008aac <_dtoa_r+0xadc>
 8008aa6:	f018 0f01 	tst.w	r8, #1
 8008aaa:	d1b2      	bne.n	8008a12 <_dtoa_r+0xa42>
 8008aac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ab0:	2b30      	cmp	r3, #48	; 0x30
 8008ab2:	f105 32ff 	add.w	r2, r5, #4294967295
 8008ab6:	f47f af0a 	bne.w	80088ce <_dtoa_r+0x8fe>
 8008aba:	4615      	mov	r5, r2
 8008abc:	e7f6      	b.n	8008aac <_dtoa_r+0xadc>
 8008abe:	4593      	cmp	fp, r2
 8008ac0:	d105      	bne.n	8008ace <_dtoa_r+0xafe>
 8008ac2:	2331      	movs	r3, #49	; 0x31
 8008ac4:	f10a 0a01 	add.w	sl, sl, #1
 8008ac8:	f88b 3000 	strb.w	r3, [fp]
 8008acc:	e6ff      	b.n	80088ce <_dtoa_r+0x8fe>
 8008ace:	4615      	mov	r5, r2
 8008ad0:	e79f      	b.n	8008a12 <_dtoa_r+0xa42>
 8008ad2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008b38 <_dtoa_r+0xb68>
 8008ad6:	e007      	b.n	8008ae8 <_dtoa_r+0xb18>
 8008ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ada:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008b3c <_dtoa_r+0xb6c>
 8008ade:	b11b      	cbz	r3, 8008ae8 <_dtoa_r+0xb18>
 8008ae0:	f10b 0308 	add.w	r3, fp, #8
 8008ae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	4658      	mov	r0, fp
 8008aea:	b017      	add	sp, #92	; 0x5c
 8008aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af0:	9b06      	ldr	r3, [sp, #24]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	f77f ae35 	ble.w	8008762 <_dtoa_r+0x792>
 8008af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008afa:	9307      	str	r3, [sp, #28]
 8008afc:	e649      	b.n	8008792 <_dtoa_r+0x7c2>
 8008afe:	9b02      	ldr	r3, [sp, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dc03      	bgt.n	8008b0c <_dtoa_r+0xb3c>
 8008b04:	9b06      	ldr	r3, [sp, #24]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	f73f aecc 	bgt.w	80088a4 <_dtoa_r+0x8d4>
 8008b0c:	465d      	mov	r5, fp
 8008b0e:	4639      	mov	r1, r7
 8008b10:	9804      	ldr	r0, [sp, #16]
 8008b12:	f7ff f9d1 	bl	8007eb8 <quorem>
 8008b16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b1a:	f805 8b01 	strb.w	r8, [r5], #1
 8008b1e:	9a02      	ldr	r2, [sp, #8]
 8008b20:	eba5 030b 	sub.w	r3, r5, fp
 8008b24:	429a      	cmp	r2, r3
 8008b26:	ddb0      	ble.n	8008a8a <_dtoa_r+0xaba>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	9904      	ldr	r1, [sp, #16]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fdd7 	bl	80096e2 <__multadd>
 8008b34:	9004      	str	r0, [sp, #16]
 8008b36:	e7ea      	b.n	8008b0e <_dtoa_r+0xb3e>
 8008b38:	0800aa64 	.word	0x0800aa64
 8008b3c:	0800aae0 	.word	0x0800aae0

08008b40 <__sflush_r>:
 8008b40:	898a      	ldrh	r2, [r1, #12]
 8008b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	4605      	mov	r5, r0
 8008b48:	0710      	lsls	r0, r2, #28
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	d458      	bmi.n	8008c00 <__sflush_r+0xc0>
 8008b4e:	684b      	ldr	r3, [r1, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc05      	bgt.n	8008b60 <__sflush_r+0x20>
 8008b54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	dc02      	bgt.n	8008b60 <__sflush_r+0x20>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	d0f9      	beq.n	8008b5a <__sflush_r+0x1a>
 8008b66:	2300      	movs	r3, #0
 8008b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b6c:	682f      	ldr	r7, [r5, #0]
 8008b6e:	6a21      	ldr	r1, [r4, #32]
 8008b70:	602b      	str	r3, [r5, #0]
 8008b72:	d032      	beq.n	8008bda <__sflush_r+0x9a>
 8008b74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	075a      	lsls	r2, r3, #29
 8008b7a:	d505      	bpl.n	8008b88 <__sflush_r+0x48>
 8008b7c:	6863      	ldr	r3, [r4, #4]
 8008b7e:	1ac0      	subs	r0, r0, r3
 8008b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b82:	b10b      	cbz	r3, 8008b88 <__sflush_r+0x48>
 8008b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b86:	1ac0      	subs	r0, r0, r3
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b8e:	6a21      	ldr	r1, [r4, #32]
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b0      	blx	r6
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	d106      	bne.n	8008ba8 <__sflush_r+0x68>
 8008b9a:	6829      	ldr	r1, [r5, #0]
 8008b9c:	291d      	cmp	r1, #29
 8008b9e:	d848      	bhi.n	8008c32 <__sflush_r+0xf2>
 8008ba0:	4a29      	ldr	r2, [pc, #164]	; (8008c48 <__sflush_r+0x108>)
 8008ba2:	40ca      	lsrs	r2, r1
 8008ba4:	07d6      	lsls	r6, r2, #31
 8008ba6:	d544      	bpl.n	8008c32 <__sflush_r+0xf2>
 8008ba8:	2200      	movs	r2, #0
 8008baa:	6062      	str	r2, [r4, #4]
 8008bac:	04d9      	lsls	r1, r3, #19
 8008bae:	6922      	ldr	r2, [r4, #16]
 8008bb0:	6022      	str	r2, [r4, #0]
 8008bb2:	d504      	bpl.n	8008bbe <__sflush_r+0x7e>
 8008bb4:	1c42      	adds	r2, r0, #1
 8008bb6:	d101      	bne.n	8008bbc <__sflush_r+0x7c>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b903      	cbnz	r3, 8008bbe <__sflush_r+0x7e>
 8008bbc:	6560      	str	r0, [r4, #84]	; 0x54
 8008bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bc0:	602f      	str	r7, [r5, #0]
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	d0c9      	beq.n	8008b5a <__sflush_r+0x1a>
 8008bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bca:	4299      	cmp	r1, r3
 8008bcc:	d002      	beq.n	8008bd4 <__sflush_r+0x94>
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f7fd f9fe 	bl	8005fd0 <_free_r>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	6360      	str	r0, [r4, #52]	; 0x34
 8008bd8:	e7c0      	b.n	8008b5c <__sflush_r+0x1c>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b0      	blx	r6
 8008be0:	1c41      	adds	r1, r0, #1
 8008be2:	d1c8      	bne.n	8008b76 <__sflush_r+0x36>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0c5      	beq.n	8008b76 <__sflush_r+0x36>
 8008bea:	2b1d      	cmp	r3, #29
 8008bec:	d001      	beq.n	8008bf2 <__sflush_r+0xb2>
 8008bee:	2b16      	cmp	r3, #22
 8008bf0:	d101      	bne.n	8008bf6 <__sflush_r+0xb6>
 8008bf2:	602f      	str	r7, [r5, #0]
 8008bf4:	e7b1      	b.n	8008b5a <__sflush_r+0x1a>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	e7ad      	b.n	8008b5c <__sflush_r+0x1c>
 8008c00:	690f      	ldr	r7, [r1, #16]
 8008c02:	2f00      	cmp	r7, #0
 8008c04:	d0a9      	beq.n	8008b5a <__sflush_r+0x1a>
 8008c06:	0793      	lsls	r3, r2, #30
 8008c08:	680e      	ldr	r6, [r1, #0]
 8008c0a:	bf08      	it	eq
 8008c0c:	694b      	ldreq	r3, [r1, #20]
 8008c0e:	600f      	str	r7, [r1, #0]
 8008c10:	bf18      	it	ne
 8008c12:	2300      	movne	r3, #0
 8008c14:	eba6 0807 	sub.w	r8, r6, r7
 8008c18:	608b      	str	r3, [r1, #8]
 8008c1a:	f1b8 0f00 	cmp.w	r8, #0
 8008c1e:	dd9c      	ble.n	8008b5a <__sflush_r+0x1a>
 8008c20:	4643      	mov	r3, r8
 8008c22:	463a      	mov	r2, r7
 8008c24:	6a21      	ldr	r1, [r4, #32]
 8008c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c28:	4628      	mov	r0, r5
 8008c2a:	47b0      	blx	r6
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	dc06      	bgt.n	8008c3e <__sflush_r+0xfe>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c36:	81a3      	strh	r3, [r4, #12]
 8008c38:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3c:	e78e      	b.n	8008b5c <__sflush_r+0x1c>
 8008c3e:	4407      	add	r7, r0
 8008c40:	eba8 0800 	sub.w	r8, r8, r0
 8008c44:	e7e9      	b.n	8008c1a <__sflush_r+0xda>
 8008c46:	bf00      	nop
 8008c48:	20400001 	.word	0x20400001

08008c4c <_fflush_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	690b      	ldr	r3, [r1, #16]
 8008c50:	4605      	mov	r5, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	b1db      	cbz	r3, 8008c8e <_fflush_r+0x42>
 8008c56:	b118      	cbz	r0, 8008c60 <_fflush_r+0x14>
 8008c58:	6983      	ldr	r3, [r0, #24]
 8008c5a:	b90b      	cbnz	r3, 8008c60 <_fflush_r+0x14>
 8008c5c:	f000 f872 	bl	8008d44 <__sinit>
 8008c60:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <_fflush_r+0x48>)
 8008c62:	429c      	cmp	r4, r3
 8008c64:	d109      	bne.n	8008c7a <_fflush_r+0x2e>
 8008c66:	686c      	ldr	r4, [r5, #4]
 8008c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6c:	b17b      	cbz	r3, 8008c8e <_fflush_r+0x42>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c76:	f7ff bf63 	b.w	8008b40 <__sflush_r>
 8008c7a:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <_fflush_r+0x4c>)
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	d101      	bne.n	8008c84 <_fflush_r+0x38>
 8008c80:	68ac      	ldr	r4, [r5, #8]
 8008c82:	e7f1      	b.n	8008c68 <_fflush_r+0x1c>
 8008c84:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <_fflush_r+0x50>)
 8008c86:	429c      	cmp	r4, r3
 8008c88:	bf08      	it	eq
 8008c8a:	68ec      	ldreq	r4, [r5, #12]
 8008c8c:	e7ec      	b.n	8008c68 <_fflush_r+0x1c>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	bf00      	nop
 8008c94:	0800ab10 	.word	0x0800ab10
 8008c98:	0800ab30 	.word	0x0800ab30
 8008c9c:	0800aaf0 	.word	0x0800aaf0

08008ca0 <fflush>:
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	b920      	cbnz	r0, 8008cae <fflush+0xe>
 8008ca4:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <fflush+0x18>)
 8008ca6:	4905      	ldr	r1, [pc, #20]	; (8008cbc <fflush+0x1c>)
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f000 b8d3 	b.w	8008e54 <_fwalk_reent>
 8008cae:	4b04      	ldr	r3, [pc, #16]	; (8008cc0 <fflush+0x20>)
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	f7ff bfcb 	b.w	8008c4c <_fflush_r>
 8008cb6:	bf00      	nop
 8008cb8:	0800aa50 	.word	0x0800aa50
 8008cbc:	08008c4d 	.word	0x08008c4d
 8008cc0:	2000000c 	.word	0x2000000c

08008cc4 <std>:
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	b510      	push	{r4, lr}
 8008cc8:	4604      	mov	r4, r0
 8008cca:	e9c0 3300 	strd	r3, r3, [r0]
 8008cce:	6083      	str	r3, [r0, #8]
 8008cd0:	8181      	strh	r1, [r0, #12]
 8008cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8008cd4:	81c2      	strh	r2, [r0, #14]
 8008cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cda:	6183      	str	r3, [r0, #24]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	2208      	movs	r2, #8
 8008ce0:	305c      	adds	r0, #92	; 0x5c
 8008ce2:	f7fd f96d 	bl	8005fc0 <memset>
 8008ce6:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <std+0x38>)
 8008ce8:	6263      	str	r3, [r4, #36]	; 0x24
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <std+0x3c>)
 8008cec:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <std+0x40>)
 8008cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <std+0x44>)
 8008cf4:	6224      	str	r4, [r4, #32]
 8008cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	bf00      	nop
 8008cfc:	0800a451 	.word	0x0800a451
 8008d00:	0800a473 	.word	0x0800a473
 8008d04:	0800a4ab 	.word	0x0800a4ab
 8008d08:	0800a4cf 	.word	0x0800a4cf

08008d0c <_cleanup_r>:
 8008d0c:	4901      	ldr	r1, [pc, #4]	; (8008d14 <_cleanup_r+0x8>)
 8008d0e:	f000 b8a1 	b.w	8008e54 <_fwalk_reent>
 8008d12:	bf00      	nop
 8008d14:	08008c4d 	.word	0x08008c4d

08008d18 <__sfmoreglue>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	1e4a      	subs	r2, r1, #1
 8008d1c:	2568      	movs	r5, #104	; 0x68
 8008d1e:	4355      	muls	r5, r2
 8008d20:	460e      	mov	r6, r1
 8008d22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d26:	f7fd f9a1 	bl	800606c <_malloc_r>
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	b140      	cbz	r0, 8008d40 <__sfmoreglue+0x28>
 8008d2e:	2100      	movs	r1, #0
 8008d30:	e9c0 1600 	strd	r1, r6, [r0]
 8008d34:	300c      	adds	r0, #12
 8008d36:	60a0      	str	r0, [r4, #8]
 8008d38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d3c:	f7fd f940 	bl	8005fc0 <memset>
 8008d40:	4620      	mov	r0, r4
 8008d42:	bd70      	pop	{r4, r5, r6, pc}

08008d44 <__sinit>:
 8008d44:	6983      	ldr	r3, [r0, #24]
 8008d46:	b510      	push	{r4, lr}
 8008d48:	4604      	mov	r4, r0
 8008d4a:	bb33      	cbnz	r3, 8008d9a <__sinit+0x56>
 8008d4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008d50:	6503      	str	r3, [r0, #80]	; 0x50
 8008d52:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <__sinit+0x58>)
 8008d54:	4a12      	ldr	r2, [pc, #72]	; (8008da0 <__sinit+0x5c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6282      	str	r2, [r0, #40]	; 0x28
 8008d5a:	4298      	cmp	r0, r3
 8008d5c:	bf04      	itt	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	6183      	streq	r3, [r0, #24]
 8008d62:	f000 f81f 	bl	8008da4 <__sfp>
 8008d66:	6060      	str	r0, [r4, #4]
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 f81b 	bl	8008da4 <__sfp>
 8008d6e:	60a0      	str	r0, [r4, #8]
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 f817 	bl	8008da4 <__sfp>
 8008d76:	2200      	movs	r2, #0
 8008d78:	60e0      	str	r0, [r4, #12]
 8008d7a:	2104      	movs	r1, #4
 8008d7c:	6860      	ldr	r0, [r4, #4]
 8008d7e:	f7ff ffa1 	bl	8008cc4 <std>
 8008d82:	2201      	movs	r2, #1
 8008d84:	2109      	movs	r1, #9
 8008d86:	68a0      	ldr	r0, [r4, #8]
 8008d88:	f7ff ff9c 	bl	8008cc4 <std>
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	2112      	movs	r1, #18
 8008d90:	68e0      	ldr	r0, [r4, #12]
 8008d92:	f7ff ff97 	bl	8008cc4 <std>
 8008d96:	2301      	movs	r3, #1
 8008d98:	61a3      	str	r3, [r4, #24]
 8008d9a:	bd10      	pop	{r4, pc}
 8008d9c:	0800aa50 	.word	0x0800aa50
 8008da0:	08008d0d 	.word	0x08008d0d

08008da4 <__sfp>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	4b1b      	ldr	r3, [pc, #108]	; (8008e14 <__sfp+0x70>)
 8008da8:	681e      	ldr	r6, [r3, #0]
 8008daa:	69b3      	ldr	r3, [r6, #24]
 8008dac:	4607      	mov	r7, r0
 8008dae:	b913      	cbnz	r3, 8008db6 <__sfp+0x12>
 8008db0:	4630      	mov	r0, r6
 8008db2:	f7ff ffc7 	bl	8008d44 <__sinit>
 8008db6:	3648      	adds	r6, #72	; 0x48
 8008db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	d503      	bpl.n	8008dc8 <__sfp+0x24>
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	b133      	cbz	r3, 8008dd2 <__sfp+0x2e>
 8008dc4:	6836      	ldr	r6, [r6, #0]
 8008dc6:	e7f7      	b.n	8008db8 <__sfp+0x14>
 8008dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dcc:	b16d      	cbz	r5, 8008dea <__sfp+0x46>
 8008dce:	3468      	adds	r4, #104	; 0x68
 8008dd0:	e7f4      	b.n	8008dbc <__sfp+0x18>
 8008dd2:	2104      	movs	r1, #4
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7ff ff9f 	bl	8008d18 <__sfmoreglue>
 8008dda:	6030      	str	r0, [r6, #0]
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d1f1      	bne.n	8008dc4 <__sfp+0x20>
 8008de0:	230c      	movs	r3, #12
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	4604      	mov	r4, r0
 8008de6:	4620      	mov	r0, r4
 8008de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dea:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <__sfp+0x74>)
 8008dec:	6665      	str	r5, [r4, #100]	; 0x64
 8008dee:	e9c4 5500 	strd	r5, r5, [r4]
 8008df2:	60a5      	str	r5, [r4, #8]
 8008df4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008df8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	4629      	mov	r1, r5
 8008e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e04:	f7fd f8dc 	bl	8005fc0 <memset>
 8008e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e10:	e7e9      	b.n	8008de6 <__sfp+0x42>
 8008e12:	bf00      	nop
 8008e14:	0800aa50 	.word	0x0800aa50
 8008e18:	ffff0001 	.word	0xffff0001

08008e1c <_fwalk>:
 8008e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e20:	4688      	mov	r8, r1
 8008e22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e26:	2600      	movs	r6, #0
 8008e28:	b914      	cbnz	r4, 8008e30 <_fwalk+0x14>
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e30:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008e34:	3f01      	subs	r7, #1
 8008e36:	d501      	bpl.n	8008e3c <_fwalk+0x20>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	e7f5      	b.n	8008e28 <_fwalk+0xc>
 8008e3c:	89ab      	ldrh	r3, [r5, #12]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d906      	bls.n	8008e50 <_fwalk+0x34>
 8008e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e46:	3301      	adds	r3, #1
 8008e48:	d002      	beq.n	8008e50 <_fwalk+0x34>
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47c0      	blx	r8
 8008e4e:	4306      	orrs	r6, r0
 8008e50:	3568      	adds	r5, #104	; 0x68
 8008e52:	e7ef      	b.n	8008e34 <_fwalk+0x18>

08008e54 <_fwalk_reent>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	4680      	mov	r8, r0
 8008e5a:	4689      	mov	r9, r1
 8008e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e60:	2600      	movs	r6, #0
 8008e62:	b914      	cbnz	r4, 8008e6a <_fwalk_reent+0x16>
 8008e64:	4630      	mov	r0, r6
 8008e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e6a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008e6e:	3f01      	subs	r7, #1
 8008e70:	d501      	bpl.n	8008e76 <_fwalk_reent+0x22>
 8008e72:	6824      	ldr	r4, [r4, #0]
 8008e74:	e7f5      	b.n	8008e62 <_fwalk_reent+0xe>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d907      	bls.n	8008e8c <_fwalk_reent+0x38>
 8008e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e80:	3301      	adds	r3, #1
 8008e82:	d003      	beq.n	8008e8c <_fwalk_reent+0x38>
 8008e84:	4629      	mov	r1, r5
 8008e86:	4640      	mov	r0, r8
 8008e88:	47c8      	blx	r9
 8008e8a:	4306      	orrs	r6, r0
 8008e8c:	3568      	adds	r5, #104	; 0x68
 8008e8e:	e7ee      	b.n	8008e6e <_fwalk_reent+0x1a>

08008e90 <rshift>:
 8008e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e92:	6906      	ldr	r6, [r0, #16]
 8008e94:	114b      	asrs	r3, r1, #5
 8008e96:	429e      	cmp	r6, r3
 8008e98:	f100 0414 	add.w	r4, r0, #20
 8008e9c:	dd30      	ble.n	8008f00 <rshift+0x70>
 8008e9e:	f011 011f 	ands.w	r1, r1, #31
 8008ea2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008ea6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008eaa:	d108      	bne.n	8008ebe <rshift+0x2e>
 8008eac:	4621      	mov	r1, r4
 8008eae:	42b2      	cmp	r2, r6
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	d211      	bcs.n	8008ed8 <rshift+0x48>
 8008eb4:	f852 3b04 	ldr.w	r3, [r2], #4
 8008eb8:	f841 3b04 	str.w	r3, [r1], #4
 8008ebc:	e7f7      	b.n	8008eae <rshift+0x1e>
 8008ebe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008ec2:	f1c1 0c20 	rsb	ip, r1, #32
 8008ec6:	40cd      	lsrs	r5, r1
 8008ec8:	3204      	adds	r2, #4
 8008eca:	4623      	mov	r3, r4
 8008ecc:	42b2      	cmp	r2, r6
 8008ece:	4617      	mov	r7, r2
 8008ed0:	d30c      	bcc.n	8008eec <rshift+0x5c>
 8008ed2:	601d      	str	r5, [r3, #0]
 8008ed4:	b105      	cbz	r5, 8008ed8 <rshift+0x48>
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	1b1a      	subs	r2, r3, r4
 8008eda:	42a3      	cmp	r3, r4
 8008edc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ee0:	bf08      	it	eq
 8008ee2:	2300      	moveq	r3, #0
 8008ee4:	6102      	str	r2, [r0, #16]
 8008ee6:	bf08      	it	eq
 8008ee8:	6143      	streq	r3, [r0, #20]
 8008eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eec:	683f      	ldr	r7, [r7, #0]
 8008eee:	fa07 f70c 	lsl.w	r7, r7, ip
 8008ef2:	433d      	orrs	r5, r7
 8008ef4:	f843 5b04 	str.w	r5, [r3], #4
 8008ef8:	f852 5b04 	ldr.w	r5, [r2], #4
 8008efc:	40cd      	lsrs	r5, r1
 8008efe:	e7e5      	b.n	8008ecc <rshift+0x3c>
 8008f00:	4623      	mov	r3, r4
 8008f02:	e7e9      	b.n	8008ed8 <rshift+0x48>

08008f04 <__hexdig_fun>:
 8008f04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f08:	2b09      	cmp	r3, #9
 8008f0a:	d802      	bhi.n	8008f12 <__hexdig_fun+0xe>
 8008f0c:	3820      	subs	r0, #32
 8008f0e:	b2c0      	uxtb	r0, r0
 8008f10:	4770      	bx	lr
 8008f12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d801      	bhi.n	8008f1e <__hexdig_fun+0x1a>
 8008f1a:	3847      	subs	r0, #71	; 0x47
 8008f1c:	e7f7      	b.n	8008f0e <__hexdig_fun+0xa>
 8008f1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f22:	2b05      	cmp	r3, #5
 8008f24:	d801      	bhi.n	8008f2a <__hexdig_fun+0x26>
 8008f26:	3827      	subs	r0, #39	; 0x27
 8008f28:	e7f1      	b.n	8008f0e <__hexdig_fun+0xa>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	4770      	bx	lr

08008f2e <__gethex>:
 8008f2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f32:	b08b      	sub	sp, #44	; 0x2c
 8008f34:	468a      	mov	sl, r1
 8008f36:	9002      	str	r0, [sp, #8]
 8008f38:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008f3a:	9306      	str	r3, [sp, #24]
 8008f3c:	4690      	mov	r8, r2
 8008f3e:	f000 fafc 	bl	800953a <__localeconv_l>
 8008f42:	6803      	ldr	r3, [r0, #0]
 8008f44:	9303      	str	r3, [sp, #12]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f7 f99a 	bl	8000280 <strlen>
 8008f4c:	9b03      	ldr	r3, [sp, #12]
 8008f4e:	9001      	str	r0, [sp, #4]
 8008f50:	4403      	add	r3, r0
 8008f52:	f04f 0b00 	mov.w	fp, #0
 8008f56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	f8da 3000 	ldr.w	r3, [sl]
 8008f60:	3302      	adds	r3, #2
 8008f62:	461f      	mov	r7, r3
 8008f64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f68:	2830      	cmp	r0, #48	; 0x30
 8008f6a:	d06c      	beq.n	8009046 <__gethex+0x118>
 8008f6c:	f7ff ffca 	bl	8008f04 <__hexdig_fun>
 8008f70:	4604      	mov	r4, r0
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d16a      	bne.n	800904c <__gethex+0x11e>
 8008f76:	9a01      	ldr	r2, [sp, #4]
 8008f78:	9903      	ldr	r1, [sp, #12]
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	f001 faab 	bl	800a4d6 <strncmp>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d166      	bne.n	8009052 <__gethex+0x124>
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	5cf8      	ldrb	r0, [r7, r3]
 8008f88:	18fe      	adds	r6, r7, r3
 8008f8a:	f7ff ffbb 	bl	8008f04 <__hexdig_fun>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d062      	beq.n	8009058 <__gethex+0x12a>
 8008f92:	4633      	mov	r3, r6
 8008f94:	7818      	ldrb	r0, [r3, #0]
 8008f96:	2830      	cmp	r0, #48	; 0x30
 8008f98:	461f      	mov	r7, r3
 8008f9a:	f103 0301 	add.w	r3, r3, #1
 8008f9e:	d0f9      	beq.n	8008f94 <__gethex+0x66>
 8008fa0:	f7ff ffb0 	bl	8008f04 <__hexdig_fun>
 8008fa4:	fab0 f580 	clz	r5, r0
 8008fa8:	096d      	lsrs	r5, r5, #5
 8008faa:	4634      	mov	r4, r6
 8008fac:	f04f 0b01 	mov.w	fp, #1
 8008fb0:	463a      	mov	r2, r7
 8008fb2:	4616      	mov	r6, r2
 8008fb4:	3201      	adds	r2, #1
 8008fb6:	7830      	ldrb	r0, [r6, #0]
 8008fb8:	f7ff ffa4 	bl	8008f04 <__hexdig_fun>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d1f8      	bne.n	8008fb2 <__gethex+0x84>
 8008fc0:	9a01      	ldr	r2, [sp, #4]
 8008fc2:	9903      	ldr	r1, [sp, #12]
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f001 fa86 	bl	800a4d6 <strncmp>
 8008fca:	b950      	cbnz	r0, 8008fe2 <__gethex+0xb4>
 8008fcc:	b954      	cbnz	r4, 8008fe4 <__gethex+0xb6>
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	18f4      	adds	r4, r6, r3
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	4616      	mov	r6, r2
 8008fd6:	3201      	adds	r2, #1
 8008fd8:	7830      	ldrb	r0, [r6, #0]
 8008fda:	f7ff ff93 	bl	8008f04 <__hexdig_fun>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d1f8      	bne.n	8008fd4 <__gethex+0xa6>
 8008fe2:	b10c      	cbz	r4, 8008fe8 <__gethex+0xba>
 8008fe4:	1ba4      	subs	r4, r4, r6
 8008fe6:	00a4      	lsls	r4, r4, #2
 8008fe8:	7833      	ldrb	r3, [r6, #0]
 8008fea:	2b50      	cmp	r3, #80	; 0x50
 8008fec:	d001      	beq.n	8008ff2 <__gethex+0xc4>
 8008fee:	2b70      	cmp	r3, #112	; 0x70
 8008ff0:	d140      	bne.n	8009074 <__gethex+0x146>
 8008ff2:	7873      	ldrb	r3, [r6, #1]
 8008ff4:	2b2b      	cmp	r3, #43	; 0x2b
 8008ff6:	d031      	beq.n	800905c <__gethex+0x12e>
 8008ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8008ffa:	d033      	beq.n	8009064 <__gethex+0x136>
 8008ffc:	1c71      	adds	r1, r6, #1
 8008ffe:	f04f 0900 	mov.w	r9, #0
 8009002:	7808      	ldrb	r0, [r1, #0]
 8009004:	f7ff ff7e 	bl	8008f04 <__hexdig_fun>
 8009008:	1e43      	subs	r3, r0, #1
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b18      	cmp	r3, #24
 800900e:	d831      	bhi.n	8009074 <__gethex+0x146>
 8009010:	f1a0 0210 	sub.w	r2, r0, #16
 8009014:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009018:	f7ff ff74 	bl	8008f04 <__hexdig_fun>
 800901c:	1e43      	subs	r3, r0, #1
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b18      	cmp	r3, #24
 8009022:	d922      	bls.n	800906a <__gethex+0x13c>
 8009024:	f1b9 0f00 	cmp.w	r9, #0
 8009028:	d000      	beq.n	800902c <__gethex+0xfe>
 800902a:	4252      	negs	r2, r2
 800902c:	4414      	add	r4, r2
 800902e:	f8ca 1000 	str.w	r1, [sl]
 8009032:	b30d      	cbz	r5, 8009078 <__gethex+0x14a>
 8009034:	f1bb 0f00 	cmp.w	fp, #0
 8009038:	bf0c      	ite	eq
 800903a:	2706      	moveq	r7, #6
 800903c:	2700      	movne	r7, #0
 800903e:	4638      	mov	r0, r7
 8009040:	b00b      	add	sp, #44	; 0x2c
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	f10b 0b01 	add.w	fp, fp, #1
 800904a:	e78a      	b.n	8008f62 <__gethex+0x34>
 800904c:	2500      	movs	r5, #0
 800904e:	462c      	mov	r4, r5
 8009050:	e7ae      	b.n	8008fb0 <__gethex+0x82>
 8009052:	463e      	mov	r6, r7
 8009054:	2501      	movs	r5, #1
 8009056:	e7c7      	b.n	8008fe8 <__gethex+0xba>
 8009058:	4604      	mov	r4, r0
 800905a:	e7fb      	b.n	8009054 <__gethex+0x126>
 800905c:	f04f 0900 	mov.w	r9, #0
 8009060:	1cb1      	adds	r1, r6, #2
 8009062:	e7ce      	b.n	8009002 <__gethex+0xd4>
 8009064:	f04f 0901 	mov.w	r9, #1
 8009068:	e7fa      	b.n	8009060 <__gethex+0x132>
 800906a:	230a      	movs	r3, #10
 800906c:	fb03 0202 	mla	r2, r3, r2, r0
 8009070:	3a10      	subs	r2, #16
 8009072:	e7cf      	b.n	8009014 <__gethex+0xe6>
 8009074:	4631      	mov	r1, r6
 8009076:	e7da      	b.n	800902e <__gethex+0x100>
 8009078:	1bf3      	subs	r3, r6, r7
 800907a:	3b01      	subs	r3, #1
 800907c:	4629      	mov	r1, r5
 800907e:	2b07      	cmp	r3, #7
 8009080:	dc49      	bgt.n	8009116 <__gethex+0x1e8>
 8009082:	9802      	ldr	r0, [sp, #8]
 8009084:	f000 fae2 	bl	800964c <_Balloc>
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	f100 0914 	add.w	r9, r0, #20
 800908e:	f04f 0b00 	mov.w	fp, #0
 8009092:	f1c3 0301 	rsb	r3, r3, #1
 8009096:	4605      	mov	r5, r0
 8009098:	f8cd 9010 	str.w	r9, [sp, #16]
 800909c:	46da      	mov	sl, fp
 800909e:	9308      	str	r3, [sp, #32]
 80090a0:	42b7      	cmp	r7, r6
 80090a2:	d33b      	bcc.n	800911c <__gethex+0x1ee>
 80090a4:	9804      	ldr	r0, [sp, #16]
 80090a6:	f840 ab04 	str.w	sl, [r0], #4
 80090aa:	eba0 0009 	sub.w	r0, r0, r9
 80090ae:	1080      	asrs	r0, r0, #2
 80090b0:	6128      	str	r0, [r5, #16]
 80090b2:	0147      	lsls	r7, r0, #5
 80090b4:	4650      	mov	r0, sl
 80090b6:	f000 fb8d 	bl	80097d4 <__hi0bits>
 80090ba:	f8d8 6000 	ldr.w	r6, [r8]
 80090be:	1a3f      	subs	r7, r7, r0
 80090c0:	42b7      	cmp	r7, r6
 80090c2:	dd64      	ble.n	800918e <__gethex+0x260>
 80090c4:	1bbf      	subs	r7, r7, r6
 80090c6:	4639      	mov	r1, r7
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 fe9d 	bl	8009e08 <__any_on>
 80090ce:	4682      	mov	sl, r0
 80090d0:	b178      	cbz	r0, 80090f2 <__gethex+0x1c4>
 80090d2:	1e7b      	subs	r3, r7, #1
 80090d4:	1159      	asrs	r1, r3, #5
 80090d6:	f003 021f 	and.w	r2, r3, #31
 80090da:	f04f 0a01 	mov.w	sl, #1
 80090de:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80090e2:	fa0a f202 	lsl.w	r2, sl, r2
 80090e6:	420a      	tst	r2, r1
 80090e8:	d003      	beq.n	80090f2 <__gethex+0x1c4>
 80090ea:	4553      	cmp	r3, sl
 80090ec:	dc46      	bgt.n	800917c <__gethex+0x24e>
 80090ee:	f04f 0a02 	mov.w	sl, #2
 80090f2:	4639      	mov	r1, r7
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7ff fecb 	bl	8008e90 <rshift>
 80090fa:	443c      	add	r4, r7
 80090fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009100:	42a3      	cmp	r3, r4
 8009102:	da52      	bge.n	80091aa <__gethex+0x27c>
 8009104:	4629      	mov	r1, r5
 8009106:	9802      	ldr	r0, [sp, #8]
 8009108:	f000 fad4 	bl	80096b4 <_Bfree>
 800910c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800910e:	2300      	movs	r3, #0
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	27a3      	movs	r7, #163	; 0xa3
 8009114:	e793      	b.n	800903e <__gethex+0x110>
 8009116:	3101      	adds	r1, #1
 8009118:	105b      	asrs	r3, r3, #1
 800911a:	e7b0      	b.n	800907e <__gethex+0x150>
 800911c:	1e73      	subs	r3, r6, #1
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	9a07      	ldr	r2, [sp, #28]
 8009122:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009126:	4293      	cmp	r3, r2
 8009128:	d018      	beq.n	800915c <__gethex+0x22e>
 800912a:	f1bb 0f20 	cmp.w	fp, #32
 800912e:	d107      	bne.n	8009140 <__gethex+0x212>
 8009130:	9b04      	ldr	r3, [sp, #16]
 8009132:	f8c3 a000 	str.w	sl, [r3]
 8009136:	3304      	adds	r3, #4
 8009138:	f04f 0a00 	mov.w	sl, #0
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	46d3      	mov	fp, sl
 8009140:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009144:	f7ff fede 	bl	8008f04 <__hexdig_fun>
 8009148:	f000 000f 	and.w	r0, r0, #15
 800914c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009150:	ea4a 0a00 	orr.w	sl, sl, r0
 8009154:	f10b 0b04 	add.w	fp, fp, #4
 8009158:	9b05      	ldr	r3, [sp, #20]
 800915a:	e00d      	b.n	8009178 <__gethex+0x24a>
 800915c:	9b05      	ldr	r3, [sp, #20]
 800915e:	9a08      	ldr	r2, [sp, #32]
 8009160:	4413      	add	r3, r2
 8009162:	42bb      	cmp	r3, r7
 8009164:	d3e1      	bcc.n	800912a <__gethex+0x1fc>
 8009166:	4618      	mov	r0, r3
 8009168:	9a01      	ldr	r2, [sp, #4]
 800916a:	9903      	ldr	r1, [sp, #12]
 800916c:	9309      	str	r3, [sp, #36]	; 0x24
 800916e:	f001 f9b2 	bl	800a4d6 <strncmp>
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	2800      	cmp	r0, #0
 8009176:	d1d8      	bne.n	800912a <__gethex+0x1fc>
 8009178:	461e      	mov	r6, r3
 800917a:	e791      	b.n	80090a0 <__gethex+0x172>
 800917c:	1eb9      	subs	r1, r7, #2
 800917e:	4628      	mov	r0, r5
 8009180:	f000 fe42 	bl	8009e08 <__any_on>
 8009184:	2800      	cmp	r0, #0
 8009186:	d0b2      	beq.n	80090ee <__gethex+0x1c0>
 8009188:	f04f 0a03 	mov.w	sl, #3
 800918c:	e7b1      	b.n	80090f2 <__gethex+0x1c4>
 800918e:	da09      	bge.n	80091a4 <__gethex+0x276>
 8009190:	1bf7      	subs	r7, r6, r7
 8009192:	4629      	mov	r1, r5
 8009194:	463a      	mov	r2, r7
 8009196:	9802      	ldr	r0, [sp, #8]
 8009198:	f000 fc58 	bl	8009a4c <__lshift>
 800919c:	1be4      	subs	r4, r4, r7
 800919e:	4605      	mov	r5, r0
 80091a0:	f100 0914 	add.w	r9, r0, #20
 80091a4:	f04f 0a00 	mov.w	sl, #0
 80091a8:	e7a8      	b.n	80090fc <__gethex+0x1ce>
 80091aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80091ae:	42a0      	cmp	r0, r4
 80091b0:	dd6a      	ble.n	8009288 <__gethex+0x35a>
 80091b2:	1b04      	subs	r4, r0, r4
 80091b4:	42a6      	cmp	r6, r4
 80091b6:	dc2e      	bgt.n	8009216 <__gethex+0x2e8>
 80091b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d022      	beq.n	8009206 <__gethex+0x2d8>
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d024      	beq.n	800920e <__gethex+0x2e0>
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d115      	bne.n	80091f4 <__gethex+0x2c6>
 80091c8:	42a6      	cmp	r6, r4
 80091ca:	d113      	bne.n	80091f4 <__gethex+0x2c6>
 80091cc:	2e01      	cmp	r6, #1
 80091ce:	dc0b      	bgt.n	80091e8 <__gethex+0x2ba>
 80091d0:	9a06      	ldr	r2, [sp, #24]
 80091d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	2301      	movs	r3, #1
 80091da:	612b      	str	r3, [r5, #16]
 80091dc:	f8c9 3000 	str.w	r3, [r9]
 80091e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091e2:	2762      	movs	r7, #98	; 0x62
 80091e4:	601d      	str	r5, [r3, #0]
 80091e6:	e72a      	b.n	800903e <__gethex+0x110>
 80091e8:	1e71      	subs	r1, r6, #1
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 fe0c 	bl	8009e08 <__any_on>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d1ed      	bne.n	80091d0 <__gethex+0x2a2>
 80091f4:	4629      	mov	r1, r5
 80091f6:	9802      	ldr	r0, [sp, #8]
 80091f8:	f000 fa5c 	bl	80096b4 <_Bfree>
 80091fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091fe:	2300      	movs	r3, #0
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	2750      	movs	r7, #80	; 0x50
 8009204:	e71b      	b.n	800903e <__gethex+0x110>
 8009206:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0e1      	beq.n	80091d0 <__gethex+0x2a2>
 800920c:	e7f2      	b.n	80091f4 <__gethex+0x2c6>
 800920e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1dd      	bne.n	80091d0 <__gethex+0x2a2>
 8009214:	e7ee      	b.n	80091f4 <__gethex+0x2c6>
 8009216:	1e67      	subs	r7, r4, #1
 8009218:	f1ba 0f00 	cmp.w	sl, #0
 800921c:	d131      	bne.n	8009282 <__gethex+0x354>
 800921e:	b127      	cbz	r7, 800922a <__gethex+0x2fc>
 8009220:	4639      	mov	r1, r7
 8009222:	4628      	mov	r0, r5
 8009224:	f000 fdf0 	bl	8009e08 <__any_on>
 8009228:	4682      	mov	sl, r0
 800922a:	117a      	asrs	r2, r7, #5
 800922c:	2301      	movs	r3, #1
 800922e:	f007 071f 	and.w	r7, r7, #31
 8009232:	fa03 f707 	lsl.w	r7, r3, r7
 8009236:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800923a:	4621      	mov	r1, r4
 800923c:	421f      	tst	r7, r3
 800923e:	4628      	mov	r0, r5
 8009240:	bf18      	it	ne
 8009242:	f04a 0a02 	orrne.w	sl, sl, #2
 8009246:	1b36      	subs	r6, r6, r4
 8009248:	f7ff fe22 	bl	8008e90 <rshift>
 800924c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009250:	2702      	movs	r7, #2
 8009252:	f1ba 0f00 	cmp.w	sl, #0
 8009256:	d048      	beq.n	80092ea <__gethex+0x3bc>
 8009258:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d015      	beq.n	800928c <__gethex+0x35e>
 8009260:	2b03      	cmp	r3, #3
 8009262:	d017      	beq.n	8009294 <__gethex+0x366>
 8009264:	2b01      	cmp	r3, #1
 8009266:	d109      	bne.n	800927c <__gethex+0x34e>
 8009268:	f01a 0f02 	tst.w	sl, #2
 800926c:	d006      	beq.n	800927c <__gethex+0x34e>
 800926e:	f8d9 3000 	ldr.w	r3, [r9]
 8009272:	ea4a 0a03 	orr.w	sl, sl, r3
 8009276:	f01a 0f01 	tst.w	sl, #1
 800927a:	d10e      	bne.n	800929a <__gethex+0x36c>
 800927c:	f047 0710 	orr.w	r7, r7, #16
 8009280:	e033      	b.n	80092ea <__gethex+0x3bc>
 8009282:	f04f 0a01 	mov.w	sl, #1
 8009286:	e7d0      	b.n	800922a <__gethex+0x2fc>
 8009288:	2701      	movs	r7, #1
 800928a:	e7e2      	b.n	8009252 <__gethex+0x324>
 800928c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800928e:	f1c3 0301 	rsb	r3, r3, #1
 8009292:	9315      	str	r3, [sp, #84]	; 0x54
 8009294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0f0      	beq.n	800927c <__gethex+0x34e>
 800929a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800929e:	f105 0314 	add.w	r3, r5, #20
 80092a2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80092a6:	eb03 010a 	add.w	r1, r3, sl
 80092aa:	f04f 0c00 	mov.w	ip, #0
 80092ae:	4618      	mov	r0, r3
 80092b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092b8:	d01c      	beq.n	80092f4 <__gethex+0x3c6>
 80092ba:	3201      	adds	r2, #1
 80092bc:	6002      	str	r2, [r0, #0]
 80092be:	2f02      	cmp	r7, #2
 80092c0:	f105 0314 	add.w	r3, r5, #20
 80092c4:	d138      	bne.n	8009338 <__gethex+0x40a>
 80092c6:	f8d8 2000 	ldr.w	r2, [r8]
 80092ca:	3a01      	subs	r2, #1
 80092cc:	42b2      	cmp	r2, r6
 80092ce:	d10a      	bne.n	80092e6 <__gethex+0x3b8>
 80092d0:	1171      	asrs	r1, r6, #5
 80092d2:	2201      	movs	r2, #1
 80092d4:	f006 061f 	and.w	r6, r6, #31
 80092d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092dc:	fa02 f606 	lsl.w	r6, r2, r6
 80092e0:	421e      	tst	r6, r3
 80092e2:	bf18      	it	ne
 80092e4:	4617      	movne	r7, r2
 80092e6:	f047 0720 	orr.w	r7, r7, #32
 80092ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092ec:	601d      	str	r5, [r3, #0]
 80092ee:	9b06      	ldr	r3, [sp, #24]
 80092f0:	601c      	str	r4, [r3, #0]
 80092f2:	e6a4      	b.n	800903e <__gethex+0x110>
 80092f4:	4299      	cmp	r1, r3
 80092f6:	f843 cc04 	str.w	ip, [r3, #-4]
 80092fa:	d8d8      	bhi.n	80092ae <__gethex+0x380>
 80092fc:	68ab      	ldr	r3, [r5, #8]
 80092fe:	4599      	cmp	r9, r3
 8009300:	db12      	blt.n	8009328 <__gethex+0x3fa>
 8009302:	6869      	ldr	r1, [r5, #4]
 8009304:	9802      	ldr	r0, [sp, #8]
 8009306:	3101      	adds	r1, #1
 8009308:	f000 f9a0 	bl	800964c <_Balloc>
 800930c:	692a      	ldr	r2, [r5, #16]
 800930e:	3202      	adds	r2, #2
 8009310:	f105 010c 	add.w	r1, r5, #12
 8009314:	4683      	mov	fp, r0
 8009316:	0092      	lsls	r2, r2, #2
 8009318:	300c      	adds	r0, #12
 800931a:	f7fc fe2d 	bl	8005f78 <memcpy>
 800931e:	4629      	mov	r1, r5
 8009320:	9802      	ldr	r0, [sp, #8]
 8009322:	f000 f9c7 	bl	80096b4 <_Bfree>
 8009326:	465d      	mov	r5, fp
 8009328:	692b      	ldr	r3, [r5, #16]
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009330:	612a      	str	r2, [r5, #16]
 8009332:	2201      	movs	r2, #1
 8009334:	615a      	str	r2, [r3, #20]
 8009336:	e7c2      	b.n	80092be <__gethex+0x390>
 8009338:	692a      	ldr	r2, [r5, #16]
 800933a:	454a      	cmp	r2, r9
 800933c:	dd0b      	ble.n	8009356 <__gethex+0x428>
 800933e:	2101      	movs	r1, #1
 8009340:	4628      	mov	r0, r5
 8009342:	f7ff fda5 	bl	8008e90 <rshift>
 8009346:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800934a:	3401      	adds	r4, #1
 800934c:	42a3      	cmp	r3, r4
 800934e:	f6ff aed9 	blt.w	8009104 <__gethex+0x1d6>
 8009352:	2701      	movs	r7, #1
 8009354:	e7c7      	b.n	80092e6 <__gethex+0x3b8>
 8009356:	f016 061f 	ands.w	r6, r6, #31
 800935a:	d0fa      	beq.n	8009352 <__gethex+0x424>
 800935c:	449a      	add	sl, r3
 800935e:	f1c6 0620 	rsb	r6, r6, #32
 8009362:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009366:	f000 fa35 	bl	80097d4 <__hi0bits>
 800936a:	42b0      	cmp	r0, r6
 800936c:	dbe7      	blt.n	800933e <__gethex+0x410>
 800936e:	e7f0      	b.n	8009352 <__gethex+0x424>

08009370 <L_shift>:
 8009370:	f1c2 0208 	rsb	r2, r2, #8
 8009374:	0092      	lsls	r2, r2, #2
 8009376:	b570      	push	{r4, r5, r6, lr}
 8009378:	f1c2 0620 	rsb	r6, r2, #32
 800937c:	6843      	ldr	r3, [r0, #4]
 800937e:	6804      	ldr	r4, [r0, #0]
 8009380:	fa03 f506 	lsl.w	r5, r3, r6
 8009384:	432c      	orrs	r4, r5
 8009386:	40d3      	lsrs	r3, r2
 8009388:	6004      	str	r4, [r0, #0]
 800938a:	f840 3f04 	str.w	r3, [r0, #4]!
 800938e:	4288      	cmp	r0, r1
 8009390:	d3f4      	bcc.n	800937c <L_shift+0xc>
 8009392:	bd70      	pop	{r4, r5, r6, pc}

08009394 <__match>:
 8009394:	b530      	push	{r4, r5, lr}
 8009396:	6803      	ldr	r3, [r0, #0]
 8009398:	3301      	adds	r3, #1
 800939a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939e:	b914      	cbnz	r4, 80093a6 <__match+0x12>
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	2001      	movs	r0, #1
 80093a4:	bd30      	pop	{r4, r5, pc}
 80093a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80093ae:	2d19      	cmp	r5, #25
 80093b0:	bf98      	it	ls
 80093b2:	3220      	addls	r2, #32
 80093b4:	42a2      	cmp	r2, r4
 80093b6:	d0f0      	beq.n	800939a <__match+0x6>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7f3      	b.n	80093a4 <__match+0x10>

080093bc <__hexnan>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	680b      	ldr	r3, [r1, #0]
 80093c2:	6801      	ldr	r1, [r0, #0]
 80093c4:	115f      	asrs	r7, r3, #5
 80093c6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80093ca:	f013 031f 	ands.w	r3, r3, #31
 80093ce:	b087      	sub	sp, #28
 80093d0:	bf18      	it	ne
 80093d2:	3704      	addne	r7, #4
 80093d4:	2500      	movs	r5, #0
 80093d6:	1f3e      	subs	r6, r7, #4
 80093d8:	4682      	mov	sl, r0
 80093da:	4690      	mov	r8, r2
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	f847 5c04 	str.w	r5, [r7, #-4]
 80093e2:	46b1      	mov	r9, r6
 80093e4:	4634      	mov	r4, r6
 80093e6:	9502      	str	r5, [sp, #8]
 80093e8:	46ab      	mov	fp, r5
 80093ea:	784a      	ldrb	r2, [r1, #1]
 80093ec:	1c4b      	adds	r3, r1, #1
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	b342      	cbz	r2, 8009444 <__hexnan+0x88>
 80093f2:	4610      	mov	r0, r2
 80093f4:	9105      	str	r1, [sp, #20]
 80093f6:	9204      	str	r2, [sp, #16]
 80093f8:	f7ff fd84 	bl	8008f04 <__hexdig_fun>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d143      	bne.n	8009488 <__hexnan+0xcc>
 8009400:	9a04      	ldr	r2, [sp, #16]
 8009402:	9905      	ldr	r1, [sp, #20]
 8009404:	2a20      	cmp	r2, #32
 8009406:	d818      	bhi.n	800943a <__hexnan+0x7e>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	459b      	cmp	fp, r3
 800940c:	dd13      	ble.n	8009436 <__hexnan+0x7a>
 800940e:	454c      	cmp	r4, r9
 8009410:	d206      	bcs.n	8009420 <__hexnan+0x64>
 8009412:	2d07      	cmp	r5, #7
 8009414:	dc04      	bgt.n	8009420 <__hexnan+0x64>
 8009416:	462a      	mov	r2, r5
 8009418:	4649      	mov	r1, r9
 800941a:	4620      	mov	r0, r4
 800941c:	f7ff ffa8 	bl	8009370 <L_shift>
 8009420:	4544      	cmp	r4, r8
 8009422:	d944      	bls.n	80094ae <__hexnan+0xf2>
 8009424:	2300      	movs	r3, #0
 8009426:	f1a4 0904 	sub.w	r9, r4, #4
 800942a:	f844 3c04 	str.w	r3, [r4, #-4]
 800942e:	f8cd b008 	str.w	fp, [sp, #8]
 8009432:	464c      	mov	r4, r9
 8009434:	461d      	mov	r5, r3
 8009436:	9903      	ldr	r1, [sp, #12]
 8009438:	e7d7      	b.n	80093ea <__hexnan+0x2e>
 800943a:	2a29      	cmp	r2, #41	; 0x29
 800943c:	d14a      	bne.n	80094d4 <__hexnan+0x118>
 800943e:	3102      	adds	r1, #2
 8009440:	f8ca 1000 	str.w	r1, [sl]
 8009444:	f1bb 0f00 	cmp.w	fp, #0
 8009448:	d044      	beq.n	80094d4 <__hexnan+0x118>
 800944a:	454c      	cmp	r4, r9
 800944c:	d206      	bcs.n	800945c <__hexnan+0xa0>
 800944e:	2d07      	cmp	r5, #7
 8009450:	dc04      	bgt.n	800945c <__hexnan+0xa0>
 8009452:	462a      	mov	r2, r5
 8009454:	4649      	mov	r1, r9
 8009456:	4620      	mov	r0, r4
 8009458:	f7ff ff8a 	bl	8009370 <L_shift>
 800945c:	4544      	cmp	r4, r8
 800945e:	d928      	bls.n	80094b2 <__hexnan+0xf6>
 8009460:	4643      	mov	r3, r8
 8009462:	f854 2b04 	ldr.w	r2, [r4], #4
 8009466:	f843 2b04 	str.w	r2, [r3], #4
 800946a:	42a6      	cmp	r6, r4
 800946c:	d2f9      	bcs.n	8009462 <__hexnan+0xa6>
 800946e:	2200      	movs	r2, #0
 8009470:	f843 2b04 	str.w	r2, [r3], #4
 8009474:	429e      	cmp	r6, r3
 8009476:	d2fb      	bcs.n	8009470 <__hexnan+0xb4>
 8009478:	6833      	ldr	r3, [r6, #0]
 800947a:	b91b      	cbnz	r3, 8009484 <__hexnan+0xc8>
 800947c:	4546      	cmp	r6, r8
 800947e:	d127      	bne.n	80094d0 <__hexnan+0x114>
 8009480:	2301      	movs	r3, #1
 8009482:	6033      	str	r3, [r6, #0]
 8009484:	2005      	movs	r0, #5
 8009486:	e026      	b.n	80094d6 <__hexnan+0x11a>
 8009488:	3501      	adds	r5, #1
 800948a:	2d08      	cmp	r5, #8
 800948c:	f10b 0b01 	add.w	fp, fp, #1
 8009490:	dd06      	ble.n	80094a0 <__hexnan+0xe4>
 8009492:	4544      	cmp	r4, r8
 8009494:	d9cf      	bls.n	8009436 <__hexnan+0x7a>
 8009496:	2300      	movs	r3, #0
 8009498:	f844 3c04 	str.w	r3, [r4, #-4]
 800949c:	2501      	movs	r5, #1
 800949e:	3c04      	subs	r4, #4
 80094a0:	6822      	ldr	r2, [r4, #0]
 80094a2:	f000 000f 	and.w	r0, r0, #15
 80094a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094aa:	6020      	str	r0, [r4, #0]
 80094ac:	e7c3      	b.n	8009436 <__hexnan+0x7a>
 80094ae:	2508      	movs	r5, #8
 80094b0:	e7c1      	b.n	8009436 <__hexnan+0x7a>
 80094b2:	9b01      	ldr	r3, [sp, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0df      	beq.n	8009478 <__hexnan+0xbc>
 80094b8:	f04f 32ff 	mov.w	r2, #4294967295
 80094bc:	f1c3 0320 	rsb	r3, r3, #32
 80094c0:	fa22 f303 	lsr.w	r3, r2, r3
 80094c4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80094c8:	401a      	ands	r2, r3
 80094ca:	f847 2c04 	str.w	r2, [r7, #-4]
 80094ce:	e7d3      	b.n	8009478 <__hexnan+0xbc>
 80094d0:	3e04      	subs	r6, #4
 80094d2:	e7d1      	b.n	8009478 <__hexnan+0xbc>
 80094d4:	2004      	movs	r0, #4
 80094d6:	b007      	add	sp, #28
 80094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094dc <_getc_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	4605      	mov	r5, r0
 80094e2:	b118      	cbz	r0, 80094ec <_getc_r+0x10>
 80094e4:	6983      	ldr	r3, [r0, #24]
 80094e6:	b90b      	cbnz	r3, 80094ec <_getc_r+0x10>
 80094e8:	f7ff fc2c 	bl	8008d44 <__sinit>
 80094ec:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <_getc_r+0x4c>)
 80094ee:	429c      	cmp	r4, r3
 80094f0:	d10b      	bne.n	800950a <_getc_r+0x2e>
 80094f2:	686c      	ldr	r4, [r5, #4]
 80094f4:	6863      	ldr	r3, [r4, #4]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	6063      	str	r3, [r4, #4]
 80094fc:	da0f      	bge.n	800951e <_getc_r+0x42>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009506:	f000 bf77 	b.w	800a3f8 <__srget_r>
 800950a:	4b08      	ldr	r3, [pc, #32]	; (800952c <_getc_r+0x50>)
 800950c:	429c      	cmp	r4, r3
 800950e:	d101      	bne.n	8009514 <_getc_r+0x38>
 8009510:	68ac      	ldr	r4, [r5, #8]
 8009512:	e7ef      	b.n	80094f4 <_getc_r+0x18>
 8009514:	4b06      	ldr	r3, [pc, #24]	; (8009530 <_getc_r+0x54>)
 8009516:	429c      	cmp	r4, r3
 8009518:	bf08      	it	eq
 800951a:	68ec      	ldreq	r4, [r5, #12]
 800951c:	e7ea      	b.n	80094f4 <_getc_r+0x18>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	6022      	str	r2, [r4, #0]
 8009524:	7818      	ldrb	r0, [r3, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	0800ab10 	.word	0x0800ab10
 800952c:	0800ab30 	.word	0x0800ab30
 8009530:	0800aaf0 	.word	0x0800aaf0

08009534 <__locale_ctype_ptr_l>:
 8009534:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009538:	4770      	bx	lr

0800953a <__localeconv_l>:
 800953a:	30f0      	adds	r0, #240	; 0xf0
 800953c:	4770      	bx	lr
	...

08009540 <_localeconv_r>:
 8009540:	4b04      	ldr	r3, [pc, #16]	; (8009554 <_localeconv_r+0x14>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6a18      	ldr	r0, [r3, #32]
 8009546:	4b04      	ldr	r3, [pc, #16]	; (8009558 <_localeconv_r+0x18>)
 8009548:	2800      	cmp	r0, #0
 800954a:	bf08      	it	eq
 800954c:	4618      	moveq	r0, r3
 800954e:	30f0      	adds	r0, #240	; 0xf0
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	2000000c 	.word	0x2000000c
 8009558:	20000070 	.word	0x20000070

0800955c <__swhatbuf_r>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	460e      	mov	r6, r1
 8009560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009564:	2900      	cmp	r1, #0
 8009566:	b096      	sub	sp, #88	; 0x58
 8009568:	4614      	mov	r4, r2
 800956a:	461d      	mov	r5, r3
 800956c:	da07      	bge.n	800957e <__swhatbuf_r+0x22>
 800956e:	2300      	movs	r3, #0
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	89b3      	ldrh	r3, [r6, #12]
 8009574:	061a      	lsls	r2, r3, #24
 8009576:	d410      	bmi.n	800959a <__swhatbuf_r+0x3e>
 8009578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800957c:	e00e      	b.n	800959c <__swhatbuf_r+0x40>
 800957e:	466a      	mov	r2, sp
 8009580:	f000 ffea 	bl	800a558 <_fstat_r>
 8009584:	2800      	cmp	r0, #0
 8009586:	dbf2      	blt.n	800956e <__swhatbuf_r+0x12>
 8009588:	9a01      	ldr	r2, [sp, #4]
 800958a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800958e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009592:	425a      	negs	r2, r3
 8009594:	415a      	adcs	r2, r3
 8009596:	602a      	str	r2, [r5, #0]
 8009598:	e7ee      	b.n	8009578 <__swhatbuf_r+0x1c>
 800959a:	2340      	movs	r3, #64	; 0x40
 800959c:	2000      	movs	r0, #0
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	b016      	add	sp, #88	; 0x58
 80095a2:	bd70      	pop	{r4, r5, r6, pc}

080095a4 <__smakebuf_r>:
 80095a4:	898b      	ldrh	r3, [r1, #12]
 80095a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095a8:	079d      	lsls	r5, r3, #30
 80095aa:	4606      	mov	r6, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	d507      	bpl.n	80095c0 <__smakebuf_r+0x1c>
 80095b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	6123      	str	r3, [r4, #16]
 80095b8:	2301      	movs	r3, #1
 80095ba:	6163      	str	r3, [r4, #20]
 80095bc:	b002      	add	sp, #8
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	ab01      	add	r3, sp, #4
 80095c2:	466a      	mov	r2, sp
 80095c4:	f7ff ffca 	bl	800955c <__swhatbuf_r>
 80095c8:	9900      	ldr	r1, [sp, #0]
 80095ca:	4605      	mov	r5, r0
 80095cc:	4630      	mov	r0, r6
 80095ce:	f7fc fd4d 	bl	800606c <_malloc_r>
 80095d2:	b948      	cbnz	r0, 80095e8 <__smakebuf_r+0x44>
 80095d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d8:	059a      	lsls	r2, r3, #22
 80095da:	d4ef      	bmi.n	80095bc <__smakebuf_r+0x18>
 80095dc:	f023 0303 	bic.w	r3, r3, #3
 80095e0:	f043 0302 	orr.w	r3, r3, #2
 80095e4:	81a3      	strh	r3, [r4, #12]
 80095e6:	e7e3      	b.n	80095b0 <__smakebuf_r+0xc>
 80095e8:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <__smakebuf_r+0x7c>)
 80095ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	6020      	str	r0, [r4, #0]
 80095f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	6163      	str	r3, [r4, #20]
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	6120      	str	r0, [r4, #16]
 80095fe:	b15b      	cbz	r3, 8009618 <__smakebuf_r+0x74>
 8009600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009604:	4630      	mov	r0, r6
 8009606:	f000 ffb9 	bl	800a57c <_isatty_r>
 800960a:	b128      	cbz	r0, 8009618 <__smakebuf_r+0x74>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f023 0303 	bic.w	r3, r3, #3
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	431d      	orrs	r5, r3
 800961c:	81a5      	strh	r5, [r4, #12]
 800961e:	e7cd      	b.n	80095bc <__smakebuf_r+0x18>
 8009620:	08008d0d 	.word	0x08008d0d

08009624 <__ascii_mbtowc>:
 8009624:	b082      	sub	sp, #8
 8009626:	b901      	cbnz	r1, 800962a <__ascii_mbtowc+0x6>
 8009628:	a901      	add	r1, sp, #4
 800962a:	b142      	cbz	r2, 800963e <__ascii_mbtowc+0x1a>
 800962c:	b14b      	cbz	r3, 8009642 <__ascii_mbtowc+0x1e>
 800962e:	7813      	ldrb	r3, [r2, #0]
 8009630:	600b      	str	r3, [r1, #0]
 8009632:	7812      	ldrb	r2, [r2, #0]
 8009634:	1c10      	adds	r0, r2, #0
 8009636:	bf18      	it	ne
 8009638:	2001      	movne	r0, #1
 800963a:	b002      	add	sp, #8
 800963c:	4770      	bx	lr
 800963e:	4610      	mov	r0, r2
 8009640:	e7fb      	b.n	800963a <__ascii_mbtowc+0x16>
 8009642:	f06f 0001 	mvn.w	r0, #1
 8009646:	e7f8      	b.n	800963a <__ascii_mbtowc+0x16>

08009648 <__malloc_lock>:
 8009648:	4770      	bx	lr

0800964a <__malloc_unlock>:
 800964a:	4770      	bx	lr

0800964c <_Balloc>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009650:	4604      	mov	r4, r0
 8009652:	460e      	mov	r6, r1
 8009654:	b93d      	cbnz	r5, 8009666 <_Balloc+0x1a>
 8009656:	2010      	movs	r0, #16
 8009658:	f7fc fc7e 	bl	8005f58 <malloc>
 800965c:	6260      	str	r0, [r4, #36]	; 0x24
 800965e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009662:	6005      	str	r5, [r0, #0]
 8009664:	60c5      	str	r5, [r0, #12]
 8009666:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009668:	68eb      	ldr	r3, [r5, #12]
 800966a:	b183      	cbz	r3, 800968e <_Balloc+0x42>
 800966c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009674:	b9b8      	cbnz	r0, 80096a6 <_Balloc+0x5a>
 8009676:	2101      	movs	r1, #1
 8009678:	fa01 f506 	lsl.w	r5, r1, r6
 800967c:	1d6a      	adds	r2, r5, #5
 800967e:	0092      	lsls	r2, r2, #2
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fbe2 	bl	8009e4a <_calloc_r>
 8009686:	b160      	cbz	r0, 80096a2 <_Balloc+0x56>
 8009688:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800968c:	e00e      	b.n	80096ac <_Balloc+0x60>
 800968e:	2221      	movs	r2, #33	; 0x21
 8009690:	2104      	movs	r1, #4
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fbd9 	bl	8009e4a <_calloc_r>
 8009698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800969a:	60e8      	str	r0, [r5, #12]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e4      	bne.n	800966c <_Balloc+0x20>
 80096a2:	2000      	movs	r0, #0
 80096a4:	bd70      	pop	{r4, r5, r6, pc}
 80096a6:	6802      	ldr	r2, [r0, #0]
 80096a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80096ac:	2300      	movs	r3, #0
 80096ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096b2:	e7f7      	b.n	80096a4 <_Balloc+0x58>

080096b4 <_Bfree>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80096b8:	4606      	mov	r6, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	b93c      	cbnz	r4, 80096ce <_Bfree+0x1a>
 80096be:	2010      	movs	r0, #16
 80096c0:	f7fc fc4a 	bl	8005f58 <malloc>
 80096c4:	6270      	str	r0, [r6, #36]	; 0x24
 80096c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096ca:	6004      	str	r4, [r0, #0]
 80096cc:	60c4      	str	r4, [r0, #12]
 80096ce:	b13d      	cbz	r5, 80096e0 <_Bfree+0x2c>
 80096d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80096d2:	686a      	ldr	r2, [r5, #4]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096da:	6029      	str	r1, [r5, #0]
 80096dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80096e0:	bd70      	pop	{r4, r5, r6, pc}

080096e2 <__multadd>:
 80096e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e6:	690d      	ldr	r5, [r1, #16]
 80096e8:	461f      	mov	r7, r3
 80096ea:	4606      	mov	r6, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	f101 0c14 	add.w	ip, r1, #20
 80096f2:	2300      	movs	r3, #0
 80096f4:	f8dc 0000 	ldr.w	r0, [ip]
 80096f8:	b281      	uxth	r1, r0
 80096fa:	fb02 7101 	mla	r1, r2, r1, r7
 80096fe:	0c0f      	lsrs	r7, r1, #16
 8009700:	0c00      	lsrs	r0, r0, #16
 8009702:	fb02 7000 	mla	r0, r2, r0, r7
 8009706:	b289      	uxth	r1, r1
 8009708:	3301      	adds	r3, #1
 800970a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800970e:	429d      	cmp	r5, r3
 8009710:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009714:	f84c 1b04 	str.w	r1, [ip], #4
 8009718:	dcec      	bgt.n	80096f4 <__multadd+0x12>
 800971a:	b1d7      	cbz	r7, 8009752 <__multadd+0x70>
 800971c:	68a3      	ldr	r3, [r4, #8]
 800971e:	42ab      	cmp	r3, r5
 8009720:	dc12      	bgt.n	8009748 <__multadd+0x66>
 8009722:	6861      	ldr	r1, [r4, #4]
 8009724:	4630      	mov	r0, r6
 8009726:	3101      	adds	r1, #1
 8009728:	f7ff ff90 	bl	800964c <_Balloc>
 800972c:	6922      	ldr	r2, [r4, #16]
 800972e:	3202      	adds	r2, #2
 8009730:	f104 010c 	add.w	r1, r4, #12
 8009734:	4680      	mov	r8, r0
 8009736:	0092      	lsls	r2, r2, #2
 8009738:	300c      	adds	r0, #12
 800973a:	f7fc fc1d 	bl	8005f78 <memcpy>
 800973e:	4621      	mov	r1, r4
 8009740:	4630      	mov	r0, r6
 8009742:	f7ff ffb7 	bl	80096b4 <_Bfree>
 8009746:	4644      	mov	r4, r8
 8009748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800974c:	3501      	adds	r5, #1
 800974e:	615f      	str	r7, [r3, #20]
 8009750:	6125      	str	r5, [r4, #16]
 8009752:	4620      	mov	r0, r4
 8009754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009758 <__s2b>:
 8009758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975c:	460c      	mov	r4, r1
 800975e:	4615      	mov	r5, r2
 8009760:	461f      	mov	r7, r3
 8009762:	2209      	movs	r2, #9
 8009764:	3308      	adds	r3, #8
 8009766:	4606      	mov	r6, r0
 8009768:	fb93 f3f2 	sdiv	r3, r3, r2
 800976c:	2100      	movs	r1, #0
 800976e:	2201      	movs	r2, #1
 8009770:	429a      	cmp	r2, r3
 8009772:	db20      	blt.n	80097b6 <__s2b+0x5e>
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ff69 	bl	800964c <_Balloc>
 800977a:	9b08      	ldr	r3, [sp, #32]
 800977c:	6143      	str	r3, [r0, #20]
 800977e:	2d09      	cmp	r5, #9
 8009780:	f04f 0301 	mov.w	r3, #1
 8009784:	6103      	str	r3, [r0, #16]
 8009786:	dd19      	ble.n	80097bc <__s2b+0x64>
 8009788:	f104 0809 	add.w	r8, r4, #9
 800978c:	46c1      	mov	r9, r8
 800978e:	442c      	add	r4, r5
 8009790:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009794:	4601      	mov	r1, r0
 8009796:	3b30      	subs	r3, #48	; 0x30
 8009798:	220a      	movs	r2, #10
 800979a:	4630      	mov	r0, r6
 800979c:	f7ff ffa1 	bl	80096e2 <__multadd>
 80097a0:	45a1      	cmp	r9, r4
 80097a2:	d1f5      	bne.n	8009790 <__s2b+0x38>
 80097a4:	eb08 0405 	add.w	r4, r8, r5
 80097a8:	3c08      	subs	r4, #8
 80097aa:	1b2d      	subs	r5, r5, r4
 80097ac:	1963      	adds	r3, r4, r5
 80097ae:	42bb      	cmp	r3, r7
 80097b0:	db07      	blt.n	80097c2 <__s2b+0x6a>
 80097b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b6:	0052      	lsls	r2, r2, #1
 80097b8:	3101      	adds	r1, #1
 80097ba:	e7d9      	b.n	8009770 <__s2b+0x18>
 80097bc:	340a      	adds	r4, #10
 80097be:	2509      	movs	r5, #9
 80097c0:	e7f3      	b.n	80097aa <__s2b+0x52>
 80097c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097c6:	4601      	mov	r1, r0
 80097c8:	3b30      	subs	r3, #48	; 0x30
 80097ca:	220a      	movs	r2, #10
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7ff ff88 	bl	80096e2 <__multadd>
 80097d2:	e7eb      	b.n	80097ac <__s2b+0x54>

080097d4 <__hi0bits>:
 80097d4:	0c02      	lsrs	r2, r0, #16
 80097d6:	0412      	lsls	r2, r2, #16
 80097d8:	4603      	mov	r3, r0
 80097da:	b9b2      	cbnz	r2, 800980a <__hi0bits+0x36>
 80097dc:	0403      	lsls	r3, r0, #16
 80097de:	2010      	movs	r0, #16
 80097e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80097e4:	bf04      	itt	eq
 80097e6:	021b      	lsleq	r3, r3, #8
 80097e8:	3008      	addeq	r0, #8
 80097ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80097ee:	bf04      	itt	eq
 80097f0:	011b      	lsleq	r3, r3, #4
 80097f2:	3004      	addeq	r0, #4
 80097f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80097f8:	bf04      	itt	eq
 80097fa:	009b      	lsleq	r3, r3, #2
 80097fc:	3002      	addeq	r0, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	db06      	blt.n	8009810 <__hi0bits+0x3c>
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	d503      	bpl.n	800980e <__hi0bits+0x3a>
 8009806:	3001      	adds	r0, #1
 8009808:	4770      	bx	lr
 800980a:	2000      	movs	r0, #0
 800980c:	e7e8      	b.n	80097e0 <__hi0bits+0xc>
 800980e:	2020      	movs	r0, #32
 8009810:	4770      	bx	lr

08009812 <__lo0bits>:
 8009812:	6803      	ldr	r3, [r0, #0]
 8009814:	f013 0207 	ands.w	r2, r3, #7
 8009818:	4601      	mov	r1, r0
 800981a:	d00b      	beq.n	8009834 <__lo0bits+0x22>
 800981c:	07da      	lsls	r2, r3, #31
 800981e:	d423      	bmi.n	8009868 <__lo0bits+0x56>
 8009820:	0798      	lsls	r0, r3, #30
 8009822:	bf49      	itett	mi
 8009824:	085b      	lsrmi	r3, r3, #1
 8009826:	089b      	lsrpl	r3, r3, #2
 8009828:	2001      	movmi	r0, #1
 800982a:	600b      	strmi	r3, [r1, #0]
 800982c:	bf5c      	itt	pl
 800982e:	600b      	strpl	r3, [r1, #0]
 8009830:	2002      	movpl	r0, #2
 8009832:	4770      	bx	lr
 8009834:	b298      	uxth	r0, r3
 8009836:	b9a8      	cbnz	r0, 8009864 <__lo0bits+0x52>
 8009838:	0c1b      	lsrs	r3, r3, #16
 800983a:	2010      	movs	r0, #16
 800983c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009840:	bf04      	itt	eq
 8009842:	0a1b      	lsreq	r3, r3, #8
 8009844:	3008      	addeq	r0, #8
 8009846:	071a      	lsls	r2, r3, #28
 8009848:	bf04      	itt	eq
 800984a:	091b      	lsreq	r3, r3, #4
 800984c:	3004      	addeq	r0, #4
 800984e:	079a      	lsls	r2, r3, #30
 8009850:	bf04      	itt	eq
 8009852:	089b      	lsreq	r3, r3, #2
 8009854:	3002      	addeq	r0, #2
 8009856:	07da      	lsls	r2, r3, #31
 8009858:	d402      	bmi.n	8009860 <__lo0bits+0x4e>
 800985a:	085b      	lsrs	r3, r3, #1
 800985c:	d006      	beq.n	800986c <__lo0bits+0x5a>
 800985e:	3001      	adds	r0, #1
 8009860:	600b      	str	r3, [r1, #0]
 8009862:	4770      	bx	lr
 8009864:	4610      	mov	r0, r2
 8009866:	e7e9      	b.n	800983c <__lo0bits+0x2a>
 8009868:	2000      	movs	r0, #0
 800986a:	4770      	bx	lr
 800986c:	2020      	movs	r0, #32
 800986e:	4770      	bx	lr

08009870 <__i2b>:
 8009870:	b510      	push	{r4, lr}
 8009872:	460c      	mov	r4, r1
 8009874:	2101      	movs	r1, #1
 8009876:	f7ff fee9 	bl	800964c <_Balloc>
 800987a:	2201      	movs	r2, #1
 800987c:	6144      	str	r4, [r0, #20]
 800987e:	6102      	str	r2, [r0, #16]
 8009880:	bd10      	pop	{r4, pc}

08009882 <__multiply>:
 8009882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009886:	4614      	mov	r4, r2
 8009888:	690a      	ldr	r2, [r1, #16]
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	429a      	cmp	r2, r3
 800988e:	bfb8      	it	lt
 8009890:	460b      	movlt	r3, r1
 8009892:	4688      	mov	r8, r1
 8009894:	bfbc      	itt	lt
 8009896:	46a0      	movlt	r8, r4
 8009898:	461c      	movlt	r4, r3
 800989a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800989e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098aa:	eb07 0609 	add.w	r6, r7, r9
 80098ae:	42b3      	cmp	r3, r6
 80098b0:	bfb8      	it	lt
 80098b2:	3101      	addlt	r1, #1
 80098b4:	f7ff feca 	bl	800964c <_Balloc>
 80098b8:	f100 0514 	add.w	r5, r0, #20
 80098bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80098c0:	462b      	mov	r3, r5
 80098c2:	2200      	movs	r2, #0
 80098c4:	4573      	cmp	r3, lr
 80098c6:	d316      	bcc.n	80098f6 <__multiply+0x74>
 80098c8:	f104 0214 	add.w	r2, r4, #20
 80098cc:	f108 0114 	add.w	r1, r8, #20
 80098d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80098d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	9201      	str	r2, [sp, #4]
 80098de:	4293      	cmp	r3, r2
 80098e0:	d80c      	bhi.n	80098fc <__multiply+0x7a>
 80098e2:	2e00      	cmp	r6, #0
 80098e4:	dd03      	ble.n	80098ee <__multiply+0x6c>
 80098e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d05d      	beq.n	80099aa <__multiply+0x128>
 80098ee:	6106      	str	r6, [r0, #16]
 80098f0:	b003      	add	sp, #12
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	f843 2b04 	str.w	r2, [r3], #4
 80098fa:	e7e3      	b.n	80098c4 <__multiply+0x42>
 80098fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8009900:	f1bb 0f00 	cmp.w	fp, #0
 8009904:	d023      	beq.n	800994e <__multiply+0xcc>
 8009906:	4689      	mov	r9, r1
 8009908:	46ac      	mov	ip, r5
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009912:	f8dc a000 	ldr.w	sl, [ip]
 8009916:	b2a3      	uxth	r3, r4
 8009918:	fa1f fa8a 	uxth.w	sl, sl
 800991c:	fb0b a303 	mla	r3, fp, r3, sl
 8009920:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009924:	f8dc 4000 	ldr.w	r4, [ip]
 8009928:	4443      	add	r3, r8
 800992a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800992e:	fb0b 840a 	mla	r4, fp, sl, r8
 8009932:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009936:	46e2      	mov	sl, ip
 8009938:	b29b      	uxth	r3, r3
 800993a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800993e:	454f      	cmp	r7, r9
 8009940:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009944:	f84a 3b04 	str.w	r3, [sl], #4
 8009948:	d82b      	bhi.n	80099a2 <__multiply+0x120>
 800994a:	f8cc 8004 	str.w	r8, [ip, #4]
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009954:	3204      	adds	r2, #4
 8009956:	f1ba 0f00 	cmp.w	sl, #0
 800995a:	d020      	beq.n	800999e <__multiply+0x11c>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	4689      	mov	r9, r1
 8009960:	46a8      	mov	r8, r5
 8009962:	f04f 0b00 	mov.w	fp, #0
 8009966:	f8b9 c000 	ldrh.w	ip, [r9]
 800996a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800996e:	fb0a 440c 	mla	r4, sl, ip, r4
 8009972:	445c      	add	r4, fp
 8009974:	46c4      	mov	ip, r8
 8009976:	b29b      	uxth	r3, r3
 8009978:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800997c:	f84c 3b04 	str.w	r3, [ip], #4
 8009980:	f859 3b04 	ldr.w	r3, [r9], #4
 8009984:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009988:	0c1b      	lsrs	r3, r3, #16
 800998a:	fb0a b303 	mla	r3, sl, r3, fp
 800998e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009992:	454f      	cmp	r7, r9
 8009994:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009998:	d805      	bhi.n	80099a6 <__multiply+0x124>
 800999a:	f8c8 3004 	str.w	r3, [r8, #4]
 800999e:	3504      	adds	r5, #4
 80099a0:	e79b      	b.n	80098da <__multiply+0x58>
 80099a2:	46d4      	mov	ip, sl
 80099a4:	e7b3      	b.n	800990e <__multiply+0x8c>
 80099a6:	46e0      	mov	r8, ip
 80099a8:	e7dd      	b.n	8009966 <__multiply+0xe4>
 80099aa:	3e01      	subs	r6, #1
 80099ac:	e799      	b.n	80098e2 <__multiply+0x60>
	...

080099b0 <__pow5mult>:
 80099b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b4:	4615      	mov	r5, r2
 80099b6:	f012 0203 	ands.w	r2, r2, #3
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	d007      	beq.n	80099d0 <__pow5mult+0x20>
 80099c0:	3a01      	subs	r2, #1
 80099c2:	4c21      	ldr	r4, [pc, #132]	; (8009a48 <__pow5mult+0x98>)
 80099c4:	2300      	movs	r3, #0
 80099c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ca:	f7ff fe8a 	bl	80096e2 <__multadd>
 80099ce:	4607      	mov	r7, r0
 80099d0:	10ad      	asrs	r5, r5, #2
 80099d2:	d035      	beq.n	8009a40 <__pow5mult+0x90>
 80099d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099d6:	b93c      	cbnz	r4, 80099e8 <__pow5mult+0x38>
 80099d8:	2010      	movs	r0, #16
 80099da:	f7fc fabd 	bl	8005f58 <malloc>
 80099de:	6270      	str	r0, [r6, #36]	; 0x24
 80099e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099e4:	6004      	str	r4, [r0, #0]
 80099e6:	60c4      	str	r4, [r0, #12]
 80099e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099f0:	b94c      	cbnz	r4, 8009a06 <__pow5mult+0x56>
 80099f2:	f240 2171 	movw	r1, #625	; 0x271
 80099f6:	4630      	mov	r0, r6
 80099f8:	f7ff ff3a 	bl	8009870 <__i2b>
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a02:	4604      	mov	r4, r0
 8009a04:	6003      	str	r3, [r0, #0]
 8009a06:	f04f 0800 	mov.w	r8, #0
 8009a0a:	07eb      	lsls	r3, r5, #31
 8009a0c:	d50a      	bpl.n	8009a24 <__pow5mult+0x74>
 8009a0e:	4639      	mov	r1, r7
 8009a10:	4622      	mov	r2, r4
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ff35 	bl	8009882 <__multiply>
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4681      	mov	r9, r0
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff fe49 	bl	80096b4 <_Bfree>
 8009a22:	464f      	mov	r7, r9
 8009a24:	106d      	asrs	r5, r5, #1
 8009a26:	d00b      	beq.n	8009a40 <__pow5mult+0x90>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	b938      	cbnz	r0, 8009a3c <__pow5mult+0x8c>
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7ff ff26 	bl	8009882 <__multiply>
 8009a36:	6020      	str	r0, [r4, #0]
 8009a38:	f8c0 8000 	str.w	r8, [r0]
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	e7e4      	b.n	8009a0a <__pow5mult+0x5a>
 8009a40:	4638      	mov	r0, r7
 8009a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a46:	bf00      	nop
 8009a48:	0800ac50 	.word	0x0800ac50

08009a4c <__lshift>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	460c      	mov	r4, r1
 8009a52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a56:	6923      	ldr	r3, [r4, #16]
 8009a58:	6849      	ldr	r1, [r1, #4]
 8009a5a:	eb0a 0903 	add.w	r9, sl, r3
 8009a5e:	68a3      	ldr	r3, [r4, #8]
 8009a60:	4607      	mov	r7, r0
 8009a62:	4616      	mov	r6, r2
 8009a64:	f109 0501 	add.w	r5, r9, #1
 8009a68:	42ab      	cmp	r3, r5
 8009a6a:	db32      	blt.n	8009ad2 <__lshift+0x86>
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff fded 	bl	800964c <_Balloc>
 8009a72:	2300      	movs	r3, #0
 8009a74:	4680      	mov	r8, r0
 8009a76:	f100 0114 	add.w	r1, r0, #20
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	4553      	cmp	r3, sl
 8009a7e:	db2b      	blt.n	8009ad8 <__lshift+0x8c>
 8009a80:	6920      	ldr	r0, [r4, #16]
 8009a82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a86:	f104 0314 	add.w	r3, r4, #20
 8009a8a:	f016 021f 	ands.w	r2, r6, #31
 8009a8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a96:	d025      	beq.n	8009ae4 <__lshift+0x98>
 8009a98:	f1c2 0e20 	rsb	lr, r2, #32
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	681e      	ldr	r6, [r3, #0]
 8009aa0:	468a      	mov	sl, r1
 8009aa2:	4096      	lsls	r6, r2
 8009aa4:	4330      	orrs	r0, r6
 8009aa6:	f84a 0b04 	str.w	r0, [sl], #4
 8009aaa:	f853 0b04 	ldr.w	r0, [r3], #4
 8009aae:	459c      	cmp	ip, r3
 8009ab0:	fa20 f00e 	lsr.w	r0, r0, lr
 8009ab4:	d814      	bhi.n	8009ae0 <__lshift+0x94>
 8009ab6:	6048      	str	r0, [r1, #4]
 8009ab8:	b108      	cbz	r0, 8009abe <__lshift+0x72>
 8009aba:	f109 0502 	add.w	r5, r9, #2
 8009abe:	3d01      	subs	r5, #1
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f8c8 5010 	str.w	r5, [r8, #16]
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	f7ff fdf4 	bl	80096b4 <_Bfree>
 8009acc:	4640      	mov	r0, r8
 8009ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad2:	3101      	adds	r1, #1
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	e7c7      	b.n	8009a68 <__lshift+0x1c>
 8009ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009adc:	3301      	adds	r3, #1
 8009ade:	e7cd      	b.n	8009a7c <__lshift+0x30>
 8009ae0:	4651      	mov	r1, sl
 8009ae2:	e7dc      	b.n	8009a9e <__lshift+0x52>
 8009ae4:	3904      	subs	r1, #4
 8009ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aea:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aee:	459c      	cmp	ip, r3
 8009af0:	d8f9      	bhi.n	8009ae6 <__lshift+0x9a>
 8009af2:	e7e4      	b.n	8009abe <__lshift+0x72>

08009af4 <__mcmp>:
 8009af4:	6903      	ldr	r3, [r0, #16]
 8009af6:	690a      	ldr	r2, [r1, #16]
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	b530      	push	{r4, r5, lr}
 8009afc:	d10c      	bne.n	8009b18 <__mcmp+0x24>
 8009afe:	0092      	lsls	r2, r2, #2
 8009b00:	3014      	adds	r0, #20
 8009b02:	3114      	adds	r1, #20
 8009b04:	1884      	adds	r4, r0, r2
 8009b06:	4411      	add	r1, r2
 8009b08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b10:	4295      	cmp	r5, r2
 8009b12:	d003      	beq.n	8009b1c <__mcmp+0x28>
 8009b14:	d305      	bcc.n	8009b22 <__mcmp+0x2e>
 8009b16:	2301      	movs	r3, #1
 8009b18:	4618      	mov	r0, r3
 8009b1a:	bd30      	pop	{r4, r5, pc}
 8009b1c:	42a0      	cmp	r0, r4
 8009b1e:	d3f3      	bcc.n	8009b08 <__mcmp+0x14>
 8009b20:	e7fa      	b.n	8009b18 <__mcmp+0x24>
 8009b22:	f04f 33ff 	mov.w	r3, #4294967295
 8009b26:	e7f7      	b.n	8009b18 <__mcmp+0x24>

08009b28 <__mdiff>:
 8009b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	460d      	mov	r5, r1
 8009b2e:	4607      	mov	r7, r0
 8009b30:	4611      	mov	r1, r2
 8009b32:	4628      	mov	r0, r5
 8009b34:	4614      	mov	r4, r2
 8009b36:	f7ff ffdd 	bl	8009af4 <__mcmp>
 8009b3a:	1e06      	subs	r6, r0, #0
 8009b3c:	d108      	bne.n	8009b50 <__mdiff+0x28>
 8009b3e:	4631      	mov	r1, r6
 8009b40:	4638      	mov	r0, r7
 8009b42:	f7ff fd83 	bl	800964c <_Balloc>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b50:	bfa4      	itt	ge
 8009b52:	4623      	movge	r3, r4
 8009b54:	462c      	movge	r4, r5
 8009b56:	4638      	mov	r0, r7
 8009b58:	6861      	ldr	r1, [r4, #4]
 8009b5a:	bfa6      	itte	ge
 8009b5c:	461d      	movge	r5, r3
 8009b5e:	2600      	movge	r6, #0
 8009b60:	2601      	movlt	r6, #1
 8009b62:	f7ff fd73 	bl	800964c <_Balloc>
 8009b66:	692b      	ldr	r3, [r5, #16]
 8009b68:	60c6      	str	r6, [r0, #12]
 8009b6a:	6926      	ldr	r6, [r4, #16]
 8009b6c:	f105 0914 	add.w	r9, r5, #20
 8009b70:	f104 0214 	add.w	r2, r4, #20
 8009b74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009b78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b7c:	f100 0514 	add.w	r5, r0, #20
 8009b80:	f04f 0e00 	mov.w	lr, #0
 8009b84:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b88:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b8c:	fa1e f18a 	uxtah	r1, lr, sl
 8009b90:	b2a3      	uxth	r3, r4
 8009b92:	1ac9      	subs	r1, r1, r3
 8009b94:	0c23      	lsrs	r3, r4, #16
 8009b96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009b9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b9e:	b289      	uxth	r1, r1
 8009ba0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009ba4:	45c8      	cmp	r8, r9
 8009ba6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009baa:	4694      	mov	ip, r2
 8009bac:	f845 3b04 	str.w	r3, [r5], #4
 8009bb0:	d8e8      	bhi.n	8009b84 <__mdiff+0x5c>
 8009bb2:	45bc      	cmp	ip, r7
 8009bb4:	d304      	bcc.n	8009bc0 <__mdiff+0x98>
 8009bb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009bba:	b183      	cbz	r3, 8009bde <__mdiff+0xb6>
 8009bbc:	6106      	str	r6, [r0, #16]
 8009bbe:	e7c5      	b.n	8009b4c <__mdiff+0x24>
 8009bc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009bc4:	fa1e f381 	uxtah	r3, lr, r1
 8009bc8:	141a      	asrs	r2, r3, #16
 8009bca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009bd8:	f845 3b04 	str.w	r3, [r5], #4
 8009bdc:	e7e9      	b.n	8009bb2 <__mdiff+0x8a>
 8009bde:	3e01      	subs	r6, #1
 8009be0:	e7e9      	b.n	8009bb6 <__mdiff+0x8e>
	...

08009be4 <__ulp>:
 8009be4:	4b12      	ldr	r3, [pc, #72]	; (8009c30 <__ulp+0x4c>)
 8009be6:	ee10 2a90 	vmov	r2, s1
 8009bea:	401a      	ands	r2, r3
 8009bec:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dd04      	ble.n	8009bfe <__ulp+0x1a>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	ec41 0b10 	vmov	d0, r0, r1
 8009bfc:	4770      	bx	lr
 8009bfe:	425b      	negs	r3, r3
 8009c00:	151b      	asrs	r3, r3, #20
 8009c02:	2b13      	cmp	r3, #19
 8009c04:	f04f 0000 	mov.w	r0, #0
 8009c08:	f04f 0100 	mov.w	r1, #0
 8009c0c:	dc04      	bgt.n	8009c18 <__ulp+0x34>
 8009c0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c12:	fa42 f103 	asr.w	r1, r2, r3
 8009c16:	e7ef      	b.n	8009bf8 <__ulp+0x14>
 8009c18:	3b14      	subs	r3, #20
 8009c1a:	2b1e      	cmp	r3, #30
 8009c1c:	f04f 0201 	mov.w	r2, #1
 8009c20:	bfda      	itte	le
 8009c22:	f1c3 031f 	rsble	r3, r3, #31
 8009c26:	fa02 f303 	lslle.w	r3, r2, r3
 8009c2a:	4613      	movgt	r3, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	e7e3      	b.n	8009bf8 <__ulp+0x14>
 8009c30:	7ff00000 	.word	0x7ff00000

08009c34 <__b2d>:
 8009c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c36:	6905      	ldr	r5, [r0, #16]
 8009c38:	f100 0714 	add.w	r7, r0, #20
 8009c3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009c40:	1f2e      	subs	r6, r5, #4
 8009c42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009c46:	4620      	mov	r0, r4
 8009c48:	f7ff fdc4 	bl	80097d4 <__hi0bits>
 8009c4c:	f1c0 0320 	rsb	r3, r0, #32
 8009c50:	280a      	cmp	r0, #10
 8009c52:	600b      	str	r3, [r1, #0]
 8009c54:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009ccc <__b2d+0x98>
 8009c58:	dc14      	bgt.n	8009c84 <__b2d+0x50>
 8009c5a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009c5e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009c62:	42b7      	cmp	r7, r6
 8009c64:	ea41 030c 	orr.w	r3, r1, ip
 8009c68:	bf34      	ite	cc
 8009c6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c6e:	2100      	movcs	r1, #0
 8009c70:	3015      	adds	r0, #21
 8009c72:	fa04 f000 	lsl.w	r0, r4, r0
 8009c76:	fa21 f10e 	lsr.w	r1, r1, lr
 8009c7a:	ea40 0201 	orr.w	r2, r0, r1
 8009c7e:	ec43 2b10 	vmov	d0, r2, r3
 8009c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c84:	42b7      	cmp	r7, r6
 8009c86:	bf3a      	itte	cc
 8009c88:	f1a5 0608 	subcc.w	r6, r5, #8
 8009c8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c90:	2100      	movcs	r1, #0
 8009c92:	380b      	subs	r0, #11
 8009c94:	d015      	beq.n	8009cc2 <__b2d+0x8e>
 8009c96:	4084      	lsls	r4, r0
 8009c98:	f1c0 0520 	rsb	r5, r0, #32
 8009c9c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009ca0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009ca4:	42be      	cmp	r6, r7
 8009ca6:	fa21 fc05 	lsr.w	ip, r1, r5
 8009caa:	ea44 030c 	orr.w	r3, r4, ip
 8009cae:	bf8c      	ite	hi
 8009cb0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009cb4:	2400      	movls	r4, #0
 8009cb6:	fa01 f000 	lsl.w	r0, r1, r0
 8009cba:	40ec      	lsrs	r4, r5
 8009cbc:	ea40 0204 	orr.w	r2, r0, r4
 8009cc0:	e7dd      	b.n	8009c7e <__b2d+0x4a>
 8009cc2:	ea44 030c 	orr.w	r3, r4, ip
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	e7d9      	b.n	8009c7e <__b2d+0x4a>
 8009cca:	bf00      	nop
 8009ccc:	3ff00000 	.word	0x3ff00000

08009cd0 <__d2b>:
 8009cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cd4:	460e      	mov	r6, r1
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	ec59 8b10 	vmov	r8, r9, d0
 8009cdc:	4615      	mov	r5, r2
 8009cde:	f7ff fcb5 	bl	800964c <_Balloc>
 8009ce2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cec:	bb34      	cbnz	r4, 8009d3c <__d2b+0x6c>
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	f1b8 0300 	subs.w	r3, r8, #0
 8009cf4:	d027      	beq.n	8009d46 <__d2b+0x76>
 8009cf6:	a802      	add	r0, sp, #8
 8009cf8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009cfc:	f7ff fd89 	bl	8009812 <__lo0bits>
 8009d00:	9900      	ldr	r1, [sp, #0]
 8009d02:	b1f0      	cbz	r0, 8009d42 <__d2b+0x72>
 8009d04:	9a01      	ldr	r2, [sp, #4]
 8009d06:	f1c0 0320 	rsb	r3, r0, #32
 8009d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0e:	430b      	orrs	r3, r1
 8009d10:	40c2      	lsrs	r2, r0
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	9201      	str	r2, [sp, #4]
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	61bb      	str	r3, [r7, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	bf14      	ite	ne
 8009d1e:	2102      	movne	r1, #2
 8009d20:	2101      	moveq	r1, #1
 8009d22:	6139      	str	r1, [r7, #16]
 8009d24:	b1c4      	cbz	r4, 8009d58 <__d2b+0x88>
 8009d26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009d2a:	4404      	add	r4, r0
 8009d2c:	6034      	str	r4, [r6, #0]
 8009d2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d32:	6028      	str	r0, [r5, #0]
 8009d34:	4638      	mov	r0, r7
 8009d36:	b003      	add	sp, #12
 8009d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d40:	e7d5      	b.n	8009cee <__d2b+0x1e>
 8009d42:	6179      	str	r1, [r7, #20]
 8009d44:	e7e7      	b.n	8009d16 <__d2b+0x46>
 8009d46:	a801      	add	r0, sp, #4
 8009d48:	f7ff fd63 	bl	8009812 <__lo0bits>
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	617b      	str	r3, [r7, #20]
 8009d50:	2101      	movs	r1, #1
 8009d52:	6139      	str	r1, [r7, #16]
 8009d54:	3020      	adds	r0, #32
 8009d56:	e7e5      	b.n	8009d24 <__d2b+0x54>
 8009d58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009d5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d60:	6030      	str	r0, [r6, #0]
 8009d62:	6918      	ldr	r0, [r3, #16]
 8009d64:	f7ff fd36 	bl	80097d4 <__hi0bits>
 8009d68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009d6c:	e7e1      	b.n	8009d32 <__d2b+0x62>

08009d6e <__ratio>:
 8009d6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d72:	4688      	mov	r8, r1
 8009d74:	4669      	mov	r1, sp
 8009d76:	4681      	mov	r9, r0
 8009d78:	f7ff ff5c 	bl	8009c34 <__b2d>
 8009d7c:	a901      	add	r1, sp, #4
 8009d7e:	4640      	mov	r0, r8
 8009d80:	ec57 6b10 	vmov	r6, r7, d0
 8009d84:	f7ff ff56 	bl	8009c34 <__b2d>
 8009d88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d90:	eba3 0c02 	sub.w	ip, r3, r2
 8009d94:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d98:	1a9b      	subs	r3, r3, r2
 8009d9a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d9e:	ec5b ab10 	vmov	sl, fp, d0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bfce      	itee	gt
 8009da6:	463a      	movgt	r2, r7
 8009da8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dac:	465a      	movle	r2, fp
 8009dae:	4659      	mov	r1, fp
 8009db0:	463d      	mov	r5, r7
 8009db2:	bfd4      	ite	le
 8009db4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009db8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	ee10 2a10 	vmov	r2, s0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	f7f6 fd49 	bl	800085c <__aeabi_ddiv>
 8009dca:	ec41 0b10 	vmov	d0, r0, r1
 8009dce:	b003      	add	sp, #12
 8009dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dd4 <__copybits>:
 8009dd4:	3901      	subs	r1, #1
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	1149      	asrs	r1, r1, #5
 8009dda:	6914      	ldr	r4, [r2, #16]
 8009ddc:	3101      	adds	r1, #1
 8009dde:	f102 0314 	add.w	r3, r2, #20
 8009de2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009de6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009dea:	42a3      	cmp	r3, r4
 8009dec:	4602      	mov	r2, r0
 8009dee:	d303      	bcc.n	8009df8 <__copybits+0x24>
 8009df0:	2300      	movs	r3, #0
 8009df2:	428a      	cmp	r2, r1
 8009df4:	d305      	bcc.n	8009e02 <__copybits+0x2e>
 8009df6:	bd10      	pop	{r4, pc}
 8009df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfc:	f840 2b04 	str.w	r2, [r0], #4
 8009e00:	e7f3      	b.n	8009dea <__copybits+0x16>
 8009e02:	f842 3b04 	str.w	r3, [r2], #4
 8009e06:	e7f4      	b.n	8009df2 <__copybits+0x1e>

08009e08 <__any_on>:
 8009e08:	f100 0214 	add.w	r2, r0, #20
 8009e0c:	6900      	ldr	r0, [r0, #16]
 8009e0e:	114b      	asrs	r3, r1, #5
 8009e10:	4298      	cmp	r0, r3
 8009e12:	b510      	push	{r4, lr}
 8009e14:	db11      	blt.n	8009e3a <__any_on+0x32>
 8009e16:	dd0a      	ble.n	8009e2e <__any_on+0x26>
 8009e18:	f011 011f 	ands.w	r1, r1, #31
 8009e1c:	d007      	beq.n	8009e2e <__any_on+0x26>
 8009e1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e22:	fa24 f001 	lsr.w	r0, r4, r1
 8009e26:	fa00 f101 	lsl.w	r1, r0, r1
 8009e2a:	428c      	cmp	r4, r1
 8009e2c:	d10b      	bne.n	8009e46 <__any_on+0x3e>
 8009e2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d803      	bhi.n	8009e3e <__any_on+0x36>
 8009e36:	2000      	movs	r0, #0
 8009e38:	bd10      	pop	{r4, pc}
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	e7f7      	b.n	8009e2e <__any_on+0x26>
 8009e3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e42:	2900      	cmp	r1, #0
 8009e44:	d0f5      	beq.n	8009e32 <__any_on+0x2a>
 8009e46:	2001      	movs	r0, #1
 8009e48:	e7f6      	b.n	8009e38 <__any_on+0x30>

08009e4a <_calloc_r>:
 8009e4a:	b538      	push	{r3, r4, r5, lr}
 8009e4c:	fb02 f401 	mul.w	r4, r2, r1
 8009e50:	4621      	mov	r1, r4
 8009e52:	f7fc f90b 	bl	800606c <_malloc_r>
 8009e56:	4605      	mov	r5, r0
 8009e58:	b118      	cbz	r0, 8009e62 <_calloc_r+0x18>
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	f7fc f8af 	bl	8005fc0 <memset>
 8009e62:	4628      	mov	r0, r5
 8009e64:	bd38      	pop	{r3, r4, r5, pc}

08009e66 <__ssputs_r>:
 8009e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6a:	688e      	ldr	r6, [r1, #8]
 8009e6c:	429e      	cmp	r6, r3
 8009e6e:	4682      	mov	sl, r0
 8009e70:	460c      	mov	r4, r1
 8009e72:	4690      	mov	r8, r2
 8009e74:	4699      	mov	r9, r3
 8009e76:	d837      	bhi.n	8009ee8 <__ssputs_r+0x82>
 8009e78:	898a      	ldrh	r2, [r1, #12]
 8009e7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e7e:	d031      	beq.n	8009ee4 <__ssputs_r+0x7e>
 8009e80:	6825      	ldr	r5, [r4, #0]
 8009e82:	6909      	ldr	r1, [r1, #16]
 8009e84:	1a6f      	subs	r7, r5, r1
 8009e86:	6965      	ldr	r5, [r4, #20]
 8009e88:	2302      	movs	r3, #2
 8009e8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e8e:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e92:	f109 0301 	add.w	r3, r9, #1
 8009e96:	443b      	add	r3, r7
 8009e98:	429d      	cmp	r5, r3
 8009e9a:	bf38      	it	cc
 8009e9c:	461d      	movcc	r5, r3
 8009e9e:	0553      	lsls	r3, r2, #21
 8009ea0:	d530      	bpl.n	8009f04 <__ssputs_r+0x9e>
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	f7fc f8e2 	bl	800606c <_malloc_r>
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	b950      	cbnz	r0, 8009ec2 <__ssputs_r+0x5c>
 8009eac:	230c      	movs	r3, #12
 8009eae:	f8ca 3000 	str.w	r3, [sl]
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec2:	463a      	mov	r2, r7
 8009ec4:	6921      	ldr	r1, [r4, #16]
 8009ec6:	f7fc f857 	bl	8005f78 <memcpy>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	6126      	str	r6, [r4, #16]
 8009ed8:	6165      	str	r5, [r4, #20]
 8009eda:	443e      	add	r6, r7
 8009edc:	1bed      	subs	r5, r5, r7
 8009ede:	6026      	str	r6, [r4, #0]
 8009ee0:	60a5      	str	r5, [r4, #8]
 8009ee2:	464e      	mov	r6, r9
 8009ee4:	454e      	cmp	r6, r9
 8009ee6:	d900      	bls.n	8009eea <__ssputs_r+0x84>
 8009ee8:	464e      	mov	r6, r9
 8009eea:	4632      	mov	r2, r6
 8009eec:	4641      	mov	r1, r8
 8009eee:	6820      	ldr	r0, [r4, #0]
 8009ef0:	f7fc f84d 	bl	8005f8e <memmove>
 8009ef4:	68a3      	ldr	r3, [r4, #8]
 8009ef6:	1b9b      	subs	r3, r3, r6
 8009ef8:	60a3      	str	r3, [r4, #8]
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	441e      	add	r6, r3
 8009efe:	6026      	str	r6, [r4, #0]
 8009f00:	2000      	movs	r0, #0
 8009f02:	e7dc      	b.n	8009ebe <__ssputs_r+0x58>
 8009f04:	462a      	mov	r2, r5
 8009f06:	f000 fb5b 	bl	800a5c0 <_realloc_r>
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d1e2      	bne.n	8009ed6 <__ssputs_r+0x70>
 8009f10:	6921      	ldr	r1, [r4, #16]
 8009f12:	4650      	mov	r0, sl
 8009f14:	f7fc f85c 	bl	8005fd0 <_free_r>
 8009f18:	e7c8      	b.n	8009eac <__ssputs_r+0x46>
	...

08009f1c <_svfiprintf_r>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	461d      	mov	r5, r3
 8009f22:	898b      	ldrh	r3, [r1, #12]
 8009f24:	061f      	lsls	r7, r3, #24
 8009f26:	b09d      	sub	sp, #116	; 0x74
 8009f28:	4680      	mov	r8, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	4616      	mov	r6, r2
 8009f2e:	d50f      	bpl.n	8009f50 <_svfiprintf_r+0x34>
 8009f30:	690b      	ldr	r3, [r1, #16]
 8009f32:	b96b      	cbnz	r3, 8009f50 <_svfiprintf_r+0x34>
 8009f34:	2140      	movs	r1, #64	; 0x40
 8009f36:	f7fc f899 	bl	800606c <_malloc_r>
 8009f3a:	6020      	str	r0, [r4, #0]
 8009f3c:	6120      	str	r0, [r4, #16]
 8009f3e:	b928      	cbnz	r0, 8009f4c <_svfiprintf_r+0x30>
 8009f40:	230c      	movs	r3, #12
 8009f42:	f8c8 3000 	str.w	r3, [r8]
 8009f46:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4a:	e0c8      	b.n	800a0de <_svfiprintf_r+0x1c2>
 8009f4c:	2340      	movs	r3, #64	; 0x40
 8009f4e:	6163      	str	r3, [r4, #20]
 8009f50:	2300      	movs	r3, #0
 8009f52:	9309      	str	r3, [sp, #36]	; 0x24
 8009f54:	2320      	movs	r3, #32
 8009f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f5a:	2330      	movs	r3, #48	; 0x30
 8009f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f60:	9503      	str	r5, [sp, #12]
 8009f62:	f04f 0b01 	mov.w	fp, #1
 8009f66:	4637      	mov	r7, r6
 8009f68:	463d      	mov	r5, r7
 8009f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f6e:	b10b      	cbz	r3, 8009f74 <_svfiprintf_r+0x58>
 8009f70:	2b25      	cmp	r3, #37	; 0x25
 8009f72:	d13e      	bne.n	8009ff2 <_svfiprintf_r+0xd6>
 8009f74:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f78:	d00b      	beq.n	8009f92 <_svfiprintf_r+0x76>
 8009f7a:	4653      	mov	r3, sl
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4640      	mov	r0, r8
 8009f82:	f7ff ff70 	bl	8009e66 <__ssputs_r>
 8009f86:	3001      	adds	r0, #1
 8009f88:	f000 80a4 	beq.w	800a0d4 <_svfiprintf_r+0x1b8>
 8009f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8e:	4453      	add	r3, sl
 8009f90:	9309      	str	r3, [sp, #36]	; 0x24
 8009f92:	783b      	ldrb	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 809d 	beq.w	800a0d4 <_svfiprintf_r+0x1b8>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	9307      	str	r3, [sp, #28]
 8009fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fac:	931a      	str	r3, [sp, #104]	; 0x68
 8009fae:	462f      	mov	r7, r5
 8009fb0:	2205      	movs	r2, #5
 8009fb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009fb6:	4850      	ldr	r0, [pc, #320]	; (800a0f8 <_svfiprintf_r+0x1dc>)
 8009fb8:	f7f6 f912 	bl	80001e0 <memchr>
 8009fbc:	9b04      	ldr	r3, [sp, #16]
 8009fbe:	b9d0      	cbnz	r0, 8009ff6 <_svfiprintf_r+0xda>
 8009fc0:	06d9      	lsls	r1, r3, #27
 8009fc2:	bf44      	itt	mi
 8009fc4:	2220      	movmi	r2, #32
 8009fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fca:	071a      	lsls	r2, r3, #28
 8009fcc:	bf44      	itt	mi
 8009fce:	222b      	movmi	r2, #43	; 0x2b
 8009fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fd4:	782a      	ldrb	r2, [r5, #0]
 8009fd6:	2a2a      	cmp	r2, #42	; 0x2a
 8009fd8:	d015      	beq.n	800a006 <_svfiprintf_r+0xea>
 8009fda:	9a07      	ldr	r2, [sp, #28]
 8009fdc:	462f      	mov	r7, r5
 8009fde:	2000      	movs	r0, #0
 8009fe0:	250a      	movs	r5, #10
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fe8:	3b30      	subs	r3, #48	; 0x30
 8009fea:	2b09      	cmp	r3, #9
 8009fec:	d94d      	bls.n	800a08a <_svfiprintf_r+0x16e>
 8009fee:	b1b8      	cbz	r0, 800a020 <_svfiprintf_r+0x104>
 8009ff0:	e00f      	b.n	800a012 <_svfiprintf_r+0xf6>
 8009ff2:	462f      	mov	r7, r5
 8009ff4:	e7b8      	b.n	8009f68 <_svfiprintf_r+0x4c>
 8009ff6:	4a40      	ldr	r2, [pc, #256]	; (800a0f8 <_svfiprintf_r+0x1dc>)
 8009ff8:	1a80      	subs	r0, r0, r2
 8009ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8009ffe:	4318      	orrs	r0, r3
 800a000:	9004      	str	r0, [sp, #16]
 800a002:	463d      	mov	r5, r7
 800a004:	e7d3      	b.n	8009fae <_svfiprintf_r+0x92>
 800a006:	9a03      	ldr	r2, [sp, #12]
 800a008:	1d11      	adds	r1, r2, #4
 800a00a:	6812      	ldr	r2, [r2, #0]
 800a00c:	9103      	str	r1, [sp, #12]
 800a00e:	2a00      	cmp	r2, #0
 800a010:	db01      	blt.n	800a016 <_svfiprintf_r+0xfa>
 800a012:	9207      	str	r2, [sp, #28]
 800a014:	e004      	b.n	800a020 <_svfiprintf_r+0x104>
 800a016:	4252      	negs	r2, r2
 800a018:	f043 0302 	orr.w	r3, r3, #2
 800a01c:	9207      	str	r2, [sp, #28]
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	783b      	ldrb	r3, [r7, #0]
 800a022:	2b2e      	cmp	r3, #46	; 0x2e
 800a024:	d10c      	bne.n	800a040 <_svfiprintf_r+0x124>
 800a026:	787b      	ldrb	r3, [r7, #1]
 800a028:	2b2a      	cmp	r3, #42	; 0x2a
 800a02a:	d133      	bne.n	800a094 <_svfiprintf_r+0x178>
 800a02c:	9b03      	ldr	r3, [sp, #12]
 800a02e:	1d1a      	adds	r2, r3, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	9203      	str	r2, [sp, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	bfb8      	it	lt
 800a038:	f04f 33ff 	movlt.w	r3, #4294967295
 800a03c:	3702      	adds	r7, #2
 800a03e:	9305      	str	r3, [sp, #20]
 800a040:	4d2e      	ldr	r5, [pc, #184]	; (800a0fc <_svfiprintf_r+0x1e0>)
 800a042:	7839      	ldrb	r1, [r7, #0]
 800a044:	2203      	movs	r2, #3
 800a046:	4628      	mov	r0, r5
 800a048:	f7f6 f8ca 	bl	80001e0 <memchr>
 800a04c:	b138      	cbz	r0, 800a05e <_svfiprintf_r+0x142>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	1b40      	subs	r0, r0, r5
 800a052:	fa03 f000 	lsl.w	r0, r3, r0
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	4303      	orrs	r3, r0
 800a05a:	3701      	adds	r7, #1
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	7839      	ldrb	r1, [r7, #0]
 800a060:	4827      	ldr	r0, [pc, #156]	; (800a100 <_svfiprintf_r+0x1e4>)
 800a062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a066:	2206      	movs	r2, #6
 800a068:	1c7e      	adds	r6, r7, #1
 800a06a:	f7f6 f8b9 	bl	80001e0 <memchr>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d038      	beq.n	800a0e4 <_svfiprintf_r+0x1c8>
 800a072:	4b24      	ldr	r3, [pc, #144]	; (800a104 <_svfiprintf_r+0x1e8>)
 800a074:	bb13      	cbnz	r3, 800a0bc <_svfiprintf_r+0x1a0>
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	3307      	adds	r3, #7
 800a07a:	f023 0307 	bic.w	r3, r3, #7
 800a07e:	3308      	adds	r3, #8
 800a080:	9303      	str	r3, [sp, #12]
 800a082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a084:	444b      	add	r3, r9
 800a086:	9309      	str	r3, [sp, #36]	; 0x24
 800a088:	e76d      	b.n	8009f66 <_svfiprintf_r+0x4a>
 800a08a:	fb05 3202 	mla	r2, r5, r2, r3
 800a08e:	2001      	movs	r0, #1
 800a090:	460f      	mov	r7, r1
 800a092:	e7a6      	b.n	8009fe2 <_svfiprintf_r+0xc6>
 800a094:	2300      	movs	r3, #0
 800a096:	3701      	adds	r7, #1
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	4619      	mov	r1, r3
 800a09c:	250a      	movs	r5, #10
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a4:	3a30      	subs	r2, #48	; 0x30
 800a0a6:	2a09      	cmp	r2, #9
 800a0a8:	d903      	bls.n	800a0b2 <_svfiprintf_r+0x196>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0c8      	beq.n	800a040 <_svfiprintf_r+0x124>
 800a0ae:	9105      	str	r1, [sp, #20]
 800a0b0:	e7c6      	b.n	800a040 <_svfiprintf_r+0x124>
 800a0b2:	fb05 2101 	mla	r1, r5, r1, r2
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	e7f0      	b.n	800a09e <_svfiprintf_r+0x182>
 800a0bc:	ab03      	add	r3, sp, #12
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4b11      	ldr	r3, [pc, #68]	; (800a108 <_svfiprintf_r+0x1ec>)
 800a0c4:	a904      	add	r1, sp, #16
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	f7fc f8be 	bl	8006248 <_printf_float>
 800a0cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0d0:	4681      	mov	r9, r0
 800a0d2:	d1d6      	bne.n	800a082 <_svfiprintf_r+0x166>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	065b      	lsls	r3, r3, #25
 800a0d8:	f53f af35 	bmi.w	8009f46 <_svfiprintf_r+0x2a>
 800a0dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0de:	b01d      	add	sp, #116	; 0x74
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4b07      	ldr	r3, [pc, #28]	; (800a108 <_svfiprintf_r+0x1ec>)
 800a0ec:	a904      	add	r1, sp, #16
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	f7fc fb60 	bl	80067b4 <_printf_i>
 800a0f4:	e7ea      	b.n	800a0cc <_svfiprintf_r+0x1b0>
 800a0f6:	bf00      	nop
 800a0f8:	0800ac5c 	.word	0x0800ac5c
 800a0fc:	0800ac62 	.word	0x0800ac62
 800a100:	0800ac66 	.word	0x0800ac66
 800a104:	08006249 	.word	0x08006249
 800a108:	08009e67 	.word	0x08009e67

0800a10c <__sfputc_r>:
 800a10c:	6893      	ldr	r3, [r2, #8]
 800a10e:	3b01      	subs	r3, #1
 800a110:	2b00      	cmp	r3, #0
 800a112:	b410      	push	{r4}
 800a114:	6093      	str	r3, [r2, #8]
 800a116:	da08      	bge.n	800a12a <__sfputc_r+0x1e>
 800a118:	6994      	ldr	r4, [r2, #24]
 800a11a:	42a3      	cmp	r3, r4
 800a11c:	db01      	blt.n	800a122 <__sfputc_r+0x16>
 800a11e:	290a      	cmp	r1, #10
 800a120:	d103      	bne.n	800a12a <__sfputc_r+0x1e>
 800a122:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a126:	f7fd be07 	b.w	8007d38 <__swbuf_r>
 800a12a:	6813      	ldr	r3, [r2, #0]
 800a12c:	1c58      	adds	r0, r3, #1
 800a12e:	6010      	str	r0, [r2, #0]
 800a130:	7019      	strb	r1, [r3, #0]
 800a132:	4608      	mov	r0, r1
 800a134:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <__sfputs_r>:
 800a13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13c:	4606      	mov	r6, r0
 800a13e:	460f      	mov	r7, r1
 800a140:	4614      	mov	r4, r2
 800a142:	18d5      	adds	r5, r2, r3
 800a144:	42ac      	cmp	r4, r5
 800a146:	d101      	bne.n	800a14c <__sfputs_r+0x12>
 800a148:	2000      	movs	r0, #0
 800a14a:	e007      	b.n	800a15c <__sfputs_r+0x22>
 800a14c:	463a      	mov	r2, r7
 800a14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ffda 	bl	800a10c <__sfputc_r>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d1f3      	bne.n	800a144 <__sfputs_r+0xa>
 800a15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a160 <_vfiprintf_r>:
 800a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	460c      	mov	r4, r1
 800a166:	b09d      	sub	sp, #116	; 0x74
 800a168:	4617      	mov	r7, r2
 800a16a:	461d      	mov	r5, r3
 800a16c:	4606      	mov	r6, r0
 800a16e:	b118      	cbz	r0, 800a178 <_vfiprintf_r+0x18>
 800a170:	6983      	ldr	r3, [r0, #24]
 800a172:	b90b      	cbnz	r3, 800a178 <_vfiprintf_r+0x18>
 800a174:	f7fe fde6 	bl	8008d44 <__sinit>
 800a178:	4b7c      	ldr	r3, [pc, #496]	; (800a36c <_vfiprintf_r+0x20c>)
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d158      	bne.n	800a230 <_vfiprintf_r+0xd0>
 800a17e:	6874      	ldr	r4, [r6, #4]
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	0718      	lsls	r0, r3, #28
 800a184:	d55e      	bpl.n	800a244 <_vfiprintf_r+0xe4>
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d05b      	beq.n	800a244 <_vfiprintf_r+0xe4>
 800a18c:	2300      	movs	r3, #0
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	2320      	movs	r3, #32
 800a192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a196:	2330      	movs	r3, #48	; 0x30
 800a198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a19c:	9503      	str	r5, [sp, #12]
 800a19e:	f04f 0b01 	mov.w	fp, #1
 800a1a2:	46b8      	mov	r8, r7
 800a1a4:	4645      	mov	r5, r8
 800a1a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a1aa:	b10b      	cbz	r3, 800a1b0 <_vfiprintf_r+0x50>
 800a1ac:	2b25      	cmp	r3, #37	; 0x25
 800a1ae:	d154      	bne.n	800a25a <_vfiprintf_r+0xfa>
 800a1b0:	ebb8 0a07 	subs.w	sl, r8, r7
 800a1b4:	d00b      	beq.n	800a1ce <_vfiprintf_r+0x6e>
 800a1b6:	4653      	mov	r3, sl
 800a1b8:	463a      	mov	r2, r7
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff ffbc 	bl	800a13a <__sfputs_r>
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	f000 80c2 	beq.w	800a34c <_vfiprintf_r+0x1ec>
 800a1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ca:	4453      	add	r3, sl
 800a1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ce:	f898 3000 	ldrb.w	r3, [r8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 80ba 	beq.w	800a34c <_vfiprintf_r+0x1ec>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295
 800a1de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e2:	9304      	str	r3, [sp, #16]
 800a1e4:	9307      	str	r3, [sp, #28]
 800a1e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ec:	46a8      	mov	r8, r5
 800a1ee:	2205      	movs	r2, #5
 800a1f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a1f4:	485e      	ldr	r0, [pc, #376]	; (800a370 <_vfiprintf_r+0x210>)
 800a1f6:	f7f5 fff3 	bl	80001e0 <memchr>
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	bb78      	cbnz	r0, 800a25e <_vfiprintf_r+0xfe>
 800a1fe:	06d9      	lsls	r1, r3, #27
 800a200:	bf44      	itt	mi
 800a202:	2220      	movmi	r2, #32
 800a204:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a208:	071a      	lsls	r2, r3, #28
 800a20a:	bf44      	itt	mi
 800a20c:	222b      	movmi	r2, #43	; 0x2b
 800a20e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a212:	782a      	ldrb	r2, [r5, #0]
 800a214:	2a2a      	cmp	r2, #42	; 0x2a
 800a216:	d02a      	beq.n	800a26e <_vfiprintf_r+0x10e>
 800a218:	9a07      	ldr	r2, [sp, #28]
 800a21a:	46a8      	mov	r8, r5
 800a21c:	2000      	movs	r0, #0
 800a21e:	250a      	movs	r5, #10
 800a220:	4641      	mov	r1, r8
 800a222:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a226:	3b30      	subs	r3, #48	; 0x30
 800a228:	2b09      	cmp	r3, #9
 800a22a:	d969      	bls.n	800a300 <_vfiprintf_r+0x1a0>
 800a22c:	b360      	cbz	r0, 800a288 <_vfiprintf_r+0x128>
 800a22e:	e024      	b.n	800a27a <_vfiprintf_r+0x11a>
 800a230:	4b50      	ldr	r3, [pc, #320]	; (800a374 <_vfiprintf_r+0x214>)
 800a232:	429c      	cmp	r4, r3
 800a234:	d101      	bne.n	800a23a <_vfiprintf_r+0xda>
 800a236:	68b4      	ldr	r4, [r6, #8]
 800a238:	e7a2      	b.n	800a180 <_vfiprintf_r+0x20>
 800a23a:	4b4f      	ldr	r3, [pc, #316]	; (800a378 <_vfiprintf_r+0x218>)
 800a23c:	429c      	cmp	r4, r3
 800a23e:	bf08      	it	eq
 800a240:	68f4      	ldreq	r4, [r6, #12]
 800a242:	e79d      	b.n	800a180 <_vfiprintf_r+0x20>
 800a244:	4621      	mov	r1, r4
 800a246:	4630      	mov	r0, r6
 800a248:	f7fd fdc8 	bl	8007ddc <__swsetup_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d09d      	beq.n	800a18c <_vfiprintf_r+0x2c>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	b01d      	add	sp, #116	; 0x74
 800a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25a:	46a8      	mov	r8, r5
 800a25c:	e7a2      	b.n	800a1a4 <_vfiprintf_r+0x44>
 800a25e:	4a44      	ldr	r2, [pc, #272]	; (800a370 <_vfiprintf_r+0x210>)
 800a260:	1a80      	subs	r0, r0, r2
 800a262:	fa0b f000 	lsl.w	r0, fp, r0
 800a266:	4318      	orrs	r0, r3
 800a268:	9004      	str	r0, [sp, #16]
 800a26a:	4645      	mov	r5, r8
 800a26c:	e7be      	b.n	800a1ec <_vfiprintf_r+0x8c>
 800a26e:	9a03      	ldr	r2, [sp, #12]
 800a270:	1d11      	adds	r1, r2, #4
 800a272:	6812      	ldr	r2, [r2, #0]
 800a274:	9103      	str	r1, [sp, #12]
 800a276:	2a00      	cmp	r2, #0
 800a278:	db01      	blt.n	800a27e <_vfiprintf_r+0x11e>
 800a27a:	9207      	str	r2, [sp, #28]
 800a27c:	e004      	b.n	800a288 <_vfiprintf_r+0x128>
 800a27e:	4252      	negs	r2, r2
 800a280:	f043 0302 	orr.w	r3, r3, #2
 800a284:	9207      	str	r2, [sp, #28]
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	f898 3000 	ldrb.w	r3, [r8]
 800a28c:	2b2e      	cmp	r3, #46	; 0x2e
 800a28e:	d10e      	bne.n	800a2ae <_vfiprintf_r+0x14e>
 800a290:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a294:	2b2a      	cmp	r3, #42	; 0x2a
 800a296:	d138      	bne.n	800a30a <_vfiprintf_r+0x1aa>
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	1d1a      	adds	r2, r3, #4
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	9203      	str	r2, [sp, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	bfb8      	it	lt
 800a2a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2a8:	f108 0802 	add.w	r8, r8, #2
 800a2ac:	9305      	str	r3, [sp, #20]
 800a2ae:	4d33      	ldr	r5, [pc, #204]	; (800a37c <_vfiprintf_r+0x21c>)
 800a2b0:	f898 1000 	ldrb.w	r1, [r8]
 800a2b4:	2203      	movs	r2, #3
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f7f5 ff92 	bl	80001e0 <memchr>
 800a2bc:	b140      	cbz	r0, 800a2d0 <_vfiprintf_r+0x170>
 800a2be:	2340      	movs	r3, #64	; 0x40
 800a2c0:	1b40      	subs	r0, r0, r5
 800a2c2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	4303      	orrs	r3, r0
 800a2ca:	f108 0801 	add.w	r8, r8, #1
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	f898 1000 	ldrb.w	r1, [r8]
 800a2d4:	482a      	ldr	r0, [pc, #168]	; (800a380 <_vfiprintf_r+0x220>)
 800a2d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2da:	2206      	movs	r2, #6
 800a2dc:	f108 0701 	add.w	r7, r8, #1
 800a2e0:	f7f5 ff7e 	bl	80001e0 <memchr>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d037      	beq.n	800a358 <_vfiprintf_r+0x1f8>
 800a2e8:	4b26      	ldr	r3, [pc, #152]	; (800a384 <_vfiprintf_r+0x224>)
 800a2ea:	bb1b      	cbnz	r3, 800a334 <_vfiprintf_r+0x1d4>
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	3307      	adds	r3, #7
 800a2f0:	f023 0307 	bic.w	r3, r3, #7
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fa:	444b      	add	r3, r9
 800a2fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fe:	e750      	b.n	800a1a2 <_vfiprintf_r+0x42>
 800a300:	fb05 3202 	mla	r2, r5, r2, r3
 800a304:	2001      	movs	r0, #1
 800a306:	4688      	mov	r8, r1
 800a308:	e78a      	b.n	800a220 <_vfiprintf_r+0xc0>
 800a30a:	2300      	movs	r3, #0
 800a30c:	f108 0801 	add.w	r8, r8, #1
 800a310:	9305      	str	r3, [sp, #20]
 800a312:	4619      	mov	r1, r3
 800a314:	250a      	movs	r5, #10
 800a316:	4640      	mov	r0, r8
 800a318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a31c:	3a30      	subs	r2, #48	; 0x30
 800a31e:	2a09      	cmp	r2, #9
 800a320:	d903      	bls.n	800a32a <_vfiprintf_r+0x1ca>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0c3      	beq.n	800a2ae <_vfiprintf_r+0x14e>
 800a326:	9105      	str	r1, [sp, #20]
 800a328:	e7c1      	b.n	800a2ae <_vfiprintf_r+0x14e>
 800a32a:	fb05 2101 	mla	r1, r5, r1, r2
 800a32e:	2301      	movs	r3, #1
 800a330:	4680      	mov	r8, r0
 800a332:	e7f0      	b.n	800a316 <_vfiprintf_r+0x1b6>
 800a334:	ab03      	add	r3, sp, #12
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	4622      	mov	r2, r4
 800a33a:	4b13      	ldr	r3, [pc, #76]	; (800a388 <_vfiprintf_r+0x228>)
 800a33c:	a904      	add	r1, sp, #16
 800a33e:	4630      	mov	r0, r6
 800a340:	f7fb ff82 	bl	8006248 <_printf_float>
 800a344:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a348:	4681      	mov	r9, r0
 800a34a:	d1d5      	bne.n	800a2f8 <_vfiprintf_r+0x198>
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	065b      	lsls	r3, r3, #25
 800a350:	f53f af7e 	bmi.w	800a250 <_vfiprintf_r+0xf0>
 800a354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a356:	e77d      	b.n	800a254 <_vfiprintf_r+0xf4>
 800a358:	ab03      	add	r3, sp, #12
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	4622      	mov	r2, r4
 800a35e:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <_vfiprintf_r+0x228>)
 800a360:	a904      	add	r1, sp, #16
 800a362:	4630      	mov	r0, r6
 800a364:	f7fc fa26 	bl	80067b4 <_printf_i>
 800a368:	e7ec      	b.n	800a344 <_vfiprintf_r+0x1e4>
 800a36a:	bf00      	nop
 800a36c:	0800ab10 	.word	0x0800ab10
 800a370:	0800ac5c 	.word	0x0800ac5c
 800a374:	0800ab30 	.word	0x0800ab30
 800a378:	0800aaf0 	.word	0x0800aaf0
 800a37c:	0800ac62 	.word	0x0800ac62
 800a380:	0800ac66 	.word	0x0800ac66
 800a384:	08006249 	.word	0x08006249
 800a388:	0800a13b 	.word	0x0800a13b

0800a38c <_putc_r>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	460d      	mov	r5, r1
 800a390:	4614      	mov	r4, r2
 800a392:	4606      	mov	r6, r0
 800a394:	b118      	cbz	r0, 800a39e <_putc_r+0x12>
 800a396:	6983      	ldr	r3, [r0, #24]
 800a398:	b90b      	cbnz	r3, 800a39e <_putc_r+0x12>
 800a39a:	f7fe fcd3 	bl	8008d44 <__sinit>
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <_putc_r+0x60>)
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	d112      	bne.n	800a3ca <_putc_r+0x3e>
 800a3a4:	6874      	ldr	r4, [r6, #4]
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	60a3      	str	r3, [r4, #8]
 800a3ae:	da16      	bge.n	800a3de <_putc_r+0x52>
 800a3b0:	69a2      	ldr	r2, [r4, #24]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	db02      	blt.n	800a3bc <_putc_r+0x30>
 800a3b6:	b2eb      	uxtb	r3, r5
 800a3b8:	2b0a      	cmp	r3, #10
 800a3ba:	d110      	bne.n	800a3de <_putc_r+0x52>
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3c6:	f7fd bcb7 	b.w	8007d38 <__swbuf_r>
 800a3ca:	4b09      	ldr	r3, [pc, #36]	; (800a3f0 <_putc_r+0x64>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	d101      	bne.n	800a3d4 <_putc_r+0x48>
 800a3d0:	68b4      	ldr	r4, [r6, #8]
 800a3d2:	e7e8      	b.n	800a3a6 <_putc_r+0x1a>
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <_putc_r+0x68>)
 800a3d6:	429c      	cmp	r4, r3
 800a3d8:	bf08      	it	eq
 800a3da:	68f4      	ldreq	r4, [r6, #12]
 800a3dc:	e7e3      	b.n	800a3a6 <_putc_r+0x1a>
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	6022      	str	r2, [r4, #0]
 800a3e4:	701d      	strb	r5, [r3, #0]
 800a3e6:	b2e8      	uxtb	r0, r5
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800ab10 	.word	0x0800ab10
 800a3f0:	0800ab30 	.word	0x0800ab30
 800a3f4:	0800aaf0 	.word	0x0800aaf0

0800a3f8 <__srget_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	b118      	cbz	r0, 800a408 <__srget_r+0x10>
 800a400:	6983      	ldr	r3, [r0, #24]
 800a402:	b90b      	cbnz	r3, 800a408 <__srget_r+0x10>
 800a404:	f7fe fc9e 	bl	8008d44 <__sinit>
 800a408:	4b0e      	ldr	r3, [pc, #56]	; (800a444 <__srget_r+0x4c>)
 800a40a:	429c      	cmp	r4, r3
 800a40c:	d10d      	bne.n	800a42a <__srget_r+0x32>
 800a40e:	686c      	ldr	r4, [r5, #4]
 800a410:	4621      	mov	r1, r4
 800a412:	4628      	mov	r0, r5
 800a414:	f000 f916 	bl	800a644 <__srefill_r>
 800a418:	b988      	cbnz	r0, 800a43e <__srget_r+0x46>
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	6063      	str	r3, [r4, #4]
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	6022      	str	r2, [r4, #0]
 800a426:	7818      	ldrb	r0, [r3, #0]
 800a428:	bd38      	pop	{r3, r4, r5, pc}
 800a42a:	4b07      	ldr	r3, [pc, #28]	; (800a448 <__srget_r+0x50>)
 800a42c:	429c      	cmp	r4, r3
 800a42e:	d101      	bne.n	800a434 <__srget_r+0x3c>
 800a430:	68ac      	ldr	r4, [r5, #8]
 800a432:	e7ed      	b.n	800a410 <__srget_r+0x18>
 800a434:	4b05      	ldr	r3, [pc, #20]	; (800a44c <__srget_r+0x54>)
 800a436:	429c      	cmp	r4, r3
 800a438:	bf08      	it	eq
 800a43a:	68ec      	ldreq	r4, [r5, #12]
 800a43c:	e7e8      	b.n	800a410 <__srget_r+0x18>
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	e7f1      	b.n	800a428 <__srget_r+0x30>
 800a444:	0800ab10 	.word	0x0800ab10
 800a448:	0800ab30 	.word	0x0800ab30
 800a44c:	0800aaf0 	.word	0x0800aaf0

0800a450 <__sread>:
 800a450:	b510      	push	{r4, lr}
 800a452:	460c      	mov	r4, r1
 800a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a458:	f000 f8d8 	bl	800a60c <_read_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	bfab      	itete	ge
 800a460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a462:	89a3      	ldrhlt	r3, [r4, #12]
 800a464:	181b      	addge	r3, r3, r0
 800a466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a46a:	bfac      	ite	ge
 800a46c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a46e:	81a3      	strhlt	r3, [r4, #12]
 800a470:	bd10      	pop	{r4, pc}

0800a472 <__swrite>:
 800a472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a476:	461f      	mov	r7, r3
 800a478:	898b      	ldrh	r3, [r1, #12]
 800a47a:	05db      	lsls	r3, r3, #23
 800a47c:	4605      	mov	r5, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	4616      	mov	r6, r2
 800a482:	d505      	bpl.n	800a490 <__swrite+0x1e>
 800a484:	2302      	movs	r3, #2
 800a486:	2200      	movs	r2, #0
 800a488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48c:	f000 f886 	bl	800a59c <_lseek_r>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a49a:	81a3      	strh	r3, [r4, #12]
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a6:	f000 b835 	b.w	800a514 <_write_r>

0800a4aa <__sseek>:
 800a4aa:	b510      	push	{r4, lr}
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b2:	f000 f873 	bl	800a59c <_lseek_r>
 800a4b6:	1c43      	adds	r3, r0, #1
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	bf15      	itete	ne
 800a4bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4c6:	81a3      	strheq	r3, [r4, #12]
 800a4c8:	bf18      	it	ne
 800a4ca:	81a3      	strhne	r3, [r4, #12]
 800a4cc:	bd10      	pop	{r4, pc}

0800a4ce <__sclose>:
 800a4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d2:	f000 b831 	b.w	800a538 <_close_r>

0800a4d6 <strncmp>:
 800a4d6:	b510      	push	{r4, lr}
 800a4d8:	b16a      	cbz	r2, 800a4f6 <strncmp+0x20>
 800a4da:	3901      	subs	r1, #1
 800a4dc:	1884      	adds	r4, r0, r2
 800a4de:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a4e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d103      	bne.n	800a4f2 <strncmp+0x1c>
 800a4ea:	42a0      	cmp	r0, r4
 800a4ec:	d001      	beq.n	800a4f2 <strncmp+0x1c>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f5      	bne.n	800a4de <strncmp+0x8>
 800a4f2:	1a98      	subs	r0, r3, r2
 800a4f4:	bd10      	pop	{r4, pc}
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	e7fc      	b.n	800a4f4 <strncmp+0x1e>

0800a4fa <__ascii_wctomb>:
 800a4fa:	b149      	cbz	r1, 800a510 <__ascii_wctomb+0x16>
 800a4fc:	2aff      	cmp	r2, #255	; 0xff
 800a4fe:	bf85      	ittet	hi
 800a500:	238a      	movhi	r3, #138	; 0x8a
 800a502:	6003      	strhi	r3, [r0, #0]
 800a504:	700a      	strbls	r2, [r1, #0]
 800a506:	f04f 30ff 	movhi.w	r0, #4294967295
 800a50a:	bf98      	it	ls
 800a50c:	2001      	movls	r0, #1
 800a50e:	4770      	bx	lr
 800a510:	4608      	mov	r0, r1
 800a512:	4770      	bx	lr

0800a514 <_write_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4c07      	ldr	r4, [pc, #28]	; (800a534 <_write_r+0x20>)
 800a518:	4605      	mov	r5, r0
 800a51a:	4608      	mov	r0, r1
 800a51c:	4611      	mov	r1, r2
 800a51e:	2200      	movs	r2, #0
 800a520:	6022      	str	r2, [r4, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	f7f6 fe16 	bl	8001154 <_write>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_write_r+0x1e>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_write_r+0x1e>
 800a530:	602b      	str	r3, [r5, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	2000036c 	.word	0x2000036c

0800a538 <_close_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4c06      	ldr	r4, [pc, #24]	; (800a554 <_close_r+0x1c>)
 800a53c:	2300      	movs	r3, #0
 800a53e:	4605      	mov	r5, r0
 800a540:	4608      	mov	r0, r1
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	f7f7 fb56 	bl	8001bf4 <_close>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_close_r+0x1a>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_close_r+0x1a>
 800a550:	602b      	str	r3, [r5, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	2000036c 	.word	0x2000036c

0800a558 <_fstat_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4c07      	ldr	r4, [pc, #28]	; (800a578 <_fstat_r+0x20>)
 800a55c:	2300      	movs	r3, #0
 800a55e:	4605      	mov	r5, r0
 800a560:	4608      	mov	r0, r1
 800a562:	4611      	mov	r1, r2
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	f7f7 fb51 	bl	8001c0c <_fstat>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	d102      	bne.n	800a574 <_fstat_r+0x1c>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	b103      	cbz	r3, 800a574 <_fstat_r+0x1c>
 800a572:	602b      	str	r3, [r5, #0]
 800a574:	bd38      	pop	{r3, r4, r5, pc}
 800a576:	bf00      	nop
 800a578:	2000036c 	.word	0x2000036c

0800a57c <_isatty_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4c06      	ldr	r4, [pc, #24]	; (800a598 <_isatty_r+0x1c>)
 800a580:	2300      	movs	r3, #0
 800a582:	4605      	mov	r5, r0
 800a584:	4608      	mov	r0, r1
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	f7f7 fb50 	bl	8001c2c <_isatty>
 800a58c:	1c43      	adds	r3, r0, #1
 800a58e:	d102      	bne.n	800a596 <_isatty_r+0x1a>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	b103      	cbz	r3, 800a596 <_isatty_r+0x1a>
 800a594:	602b      	str	r3, [r5, #0]
 800a596:	bd38      	pop	{r3, r4, r5, pc}
 800a598:	2000036c 	.word	0x2000036c

0800a59c <_lseek_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4c07      	ldr	r4, [pc, #28]	; (800a5bc <_lseek_r+0x20>)
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	6022      	str	r2, [r4, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f7f7 fb49 	bl	8001c42 <_lseek>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	d102      	bne.n	800a5ba <_lseek_r+0x1e>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	b103      	cbz	r3, 800a5ba <_lseek_r+0x1e>
 800a5b8:	602b      	str	r3, [r5, #0]
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	2000036c 	.word	0x2000036c

0800a5c0 <_realloc_r>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	460e      	mov	r6, r1
 800a5c8:	b921      	cbnz	r1, 800a5d4 <_realloc_r+0x14>
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5d0:	f7fb bd4c 	b.w	800606c <_malloc_r>
 800a5d4:	b922      	cbnz	r2, 800a5e0 <_realloc_r+0x20>
 800a5d6:	f7fb fcfb 	bl	8005fd0 <_free_r>
 800a5da:	4625      	mov	r5, r4
 800a5dc:	4628      	mov	r0, r5
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e0:	f000 f8bc 	bl	800a75c <_malloc_usable_size_r>
 800a5e4:	42a0      	cmp	r0, r4
 800a5e6:	d20f      	bcs.n	800a608 <_realloc_r+0x48>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	f7fb fd3e 	bl	800606c <_malloc_r>
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d0f2      	beq.n	800a5dc <_realloc_r+0x1c>
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	f7fb fcbd 	bl	8005f78 <memcpy>
 800a5fe:	4631      	mov	r1, r6
 800a600:	4638      	mov	r0, r7
 800a602:	f7fb fce5 	bl	8005fd0 <_free_r>
 800a606:	e7e9      	b.n	800a5dc <_realloc_r+0x1c>
 800a608:	4635      	mov	r5, r6
 800a60a:	e7e7      	b.n	800a5dc <_realloc_r+0x1c>

0800a60c <_read_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4c07      	ldr	r4, [pc, #28]	; (800a62c <_read_r+0x20>)
 800a610:	4605      	mov	r5, r0
 800a612:	4608      	mov	r0, r1
 800a614:	4611      	mov	r1, r2
 800a616:	2200      	movs	r2, #0
 800a618:	6022      	str	r2, [r4, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	f7f6 fd7c 	bl	8001118 <_read>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_read_r+0x1e>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	b103      	cbz	r3, 800a62a <_read_r+0x1e>
 800a628:	602b      	str	r3, [r5, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	2000036c 	.word	0x2000036c

0800a630 <lflush>:
 800a630:	8983      	ldrh	r3, [r0, #12]
 800a632:	f003 0309 	and.w	r3, r3, #9
 800a636:	2b09      	cmp	r3, #9
 800a638:	d101      	bne.n	800a63e <lflush+0xe>
 800a63a:	f7fe bb31 	b.w	8008ca0 <fflush>
 800a63e:	2000      	movs	r0, #0
 800a640:	4770      	bx	lr
	...

0800a644 <__srefill_r>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	460c      	mov	r4, r1
 800a648:	4605      	mov	r5, r0
 800a64a:	b118      	cbz	r0, 800a654 <__srefill_r+0x10>
 800a64c:	6983      	ldr	r3, [r0, #24]
 800a64e:	b90b      	cbnz	r3, 800a654 <__srefill_r+0x10>
 800a650:	f7fe fb78 	bl	8008d44 <__sinit>
 800a654:	4b3c      	ldr	r3, [pc, #240]	; (800a748 <__srefill_r+0x104>)
 800a656:	429c      	cmp	r4, r3
 800a658:	d10a      	bne.n	800a670 <__srefill_r+0x2c>
 800a65a:	686c      	ldr	r4, [r5, #4]
 800a65c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a660:	2300      	movs	r3, #0
 800a662:	6063      	str	r3, [r4, #4]
 800a664:	b293      	uxth	r3, r2
 800a666:	069e      	lsls	r6, r3, #26
 800a668:	d50c      	bpl.n	800a684 <__srefill_r+0x40>
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295
 800a66e:	e067      	b.n	800a740 <__srefill_r+0xfc>
 800a670:	4b36      	ldr	r3, [pc, #216]	; (800a74c <__srefill_r+0x108>)
 800a672:	429c      	cmp	r4, r3
 800a674:	d101      	bne.n	800a67a <__srefill_r+0x36>
 800a676:	68ac      	ldr	r4, [r5, #8]
 800a678:	e7f0      	b.n	800a65c <__srefill_r+0x18>
 800a67a:	4b35      	ldr	r3, [pc, #212]	; (800a750 <__srefill_r+0x10c>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	bf08      	it	eq
 800a680:	68ec      	ldreq	r4, [r5, #12]
 800a682:	e7eb      	b.n	800a65c <__srefill_r+0x18>
 800a684:	0758      	lsls	r0, r3, #29
 800a686:	d449      	bmi.n	800a71c <__srefill_r+0xd8>
 800a688:	06d9      	lsls	r1, r3, #27
 800a68a:	d405      	bmi.n	800a698 <__srefill_r+0x54>
 800a68c:	2309      	movs	r3, #9
 800a68e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a692:	602b      	str	r3, [r5, #0]
 800a694:	81a2      	strh	r2, [r4, #12]
 800a696:	e7e8      	b.n	800a66a <__srefill_r+0x26>
 800a698:	071a      	lsls	r2, r3, #28
 800a69a:	d50b      	bpl.n	800a6b4 <__srefill_r+0x70>
 800a69c:	4621      	mov	r1, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f7fe fad4 	bl	8008c4c <_fflush_r>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d1e0      	bne.n	800a66a <__srefill_r+0x26>
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	60a0      	str	r0, [r4, #8]
 800a6ac:	f023 0308 	bic.w	r3, r3, #8
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	61a0      	str	r0, [r4, #24]
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f043 0304 	orr.w	r3, r3, #4
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	b91b      	cbnz	r3, 800a6c8 <__srefill_r+0x84>
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7fe ff6e 	bl	80095a4 <__smakebuf_r>
 800a6c8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a6cc:	b2be      	uxth	r6, r7
 800a6ce:	07b3      	lsls	r3, r6, #30
 800a6d0:	d00f      	beq.n	800a6f2 <__srefill_r+0xae>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	4b1f      	ldr	r3, [pc, #124]	; (800a754 <__srefill_r+0x110>)
 800a6d8:	491f      	ldr	r1, [pc, #124]	; (800a758 <__srefill_r+0x114>)
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	f006 0609 	and.w	r6, r6, #9
 800a6e0:	f7fe fb9c 	bl	8008e1c <_fwalk>
 800a6e4:	2e09      	cmp	r6, #9
 800a6e6:	81a7      	strh	r7, [r4, #12]
 800a6e8:	d103      	bne.n	800a6f2 <__srefill_r+0xae>
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f7fe fa27 	bl	8008b40 <__sflush_r>
 800a6f2:	6922      	ldr	r2, [r4, #16]
 800a6f4:	6022      	str	r2, [r4, #0]
 800a6f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6f8:	6963      	ldr	r3, [r4, #20]
 800a6fa:	6a21      	ldr	r1, [r4, #32]
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	47b0      	blx	r6
 800a700:	2800      	cmp	r0, #0
 800a702:	6060      	str	r0, [r4, #4]
 800a704:	dc1d      	bgt.n	800a742 <__srefill_r+0xfe>
 800a706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70a:	bf17      	itett	ne
 800a70c:	2200      	movne	r2, #0
 800a70e:	f043 0320 	orreq.w	r3, r3, #32
 800a712:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a716:	6062      	strne	r2, [r4, #4]
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	e7a6      	b.n	800a66a <__srefill_r+0x26>
 800a71c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a71e:	2900      	cmp	r1, #0
 800a720:	d0cc      	beq.n	800a6bc <__srefill_r+0x78>
 800a722:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a726:	4299      	cmp	r1, r3
 800a728:	d002      	beq.n	800a730 <__srefill_r+0xec>
 800a72a:	4628      	mov	r0, r5
 800a72c:	f7fb fc50 	bl	8005fd0 <_free_r>
 800a730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a732:	6063      	str	r3, [r4, #4]
 800a734:	2000      	movs	r0, #0
 800a736:	6360      	str	r0, [r4, #52]	; 0x34
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0bf      	beq.n	800a6bc <__srefill_r+0x78>
 800a73c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a742:	2000      	movs	r0, #0
 800a744:	e7fc      	b.n	800a740 <__srefill_r+0xfc>
 800a746:	bf00      	nop
 800a748:	0800ab10 	.word	0x0800ab10
 800a74c:	0800ab30 	.word	0x0800ab30
 800a750:	0800aaf0 	.word	0x0800aaf0
 800a754:	0800aa50 	.word	0x0800aa50
 800a758:	0800a631 	.word	0x0800a631

0800a75c <_malloc_usable_size_r>:
 800a75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a760:	1f18      	subs	r0, r3, #4
 800a762:	2b00      	cmp	r3, #0
 800a764:	bfbc      	itt	lt
 800a766:	580b      	ldrlt	r3, [r1, r0]
 800a768:	18c0      	addlt	r0, r0, r3
 800a76a:	4770      	bx	lr

0800a76c <_init>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr

0800a778 <_fini>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	bf00      	nop
 800a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77e:	bc08      	pop	{r3}
 800a780:	469e      	mov	lr, r3
 800a782:	4770      	bx	lr
