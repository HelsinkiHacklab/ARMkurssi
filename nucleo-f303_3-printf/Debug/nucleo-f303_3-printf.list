
nucleo-f303_3-printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08008768  08008768  00018768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b0c  08008b0c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008b0c  08008b0c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b0c  08008b0c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b10  08008b10  00018b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  08008cf0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08008cf0  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f05  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000174d  00000000  00000000  00029111  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  0002a860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  0002af78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d851  00000000  00000000  0002b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e42  00000000  00000000  00048e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a8957  00000000  00000000  0004fc5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f85b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e8  00000000  00000000  000f8630  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800874c 	.word	0x0800874c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800874c 	.word	0x0800874c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <_read>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

int _read(int fd, char *ptr, int len) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
	  HAL_StatusTypeDef hstatus;
	if (fd == STDIN_FILENO ) {
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <_read+0x36>
		hstatus = HAL_UART_Receive(&huart2, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	2201      	movs	r2, #1
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <_read+0x40>)
 8000cb4:	f002 f9d1 	bl	800305a <HAL_UART_Receive>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	75fb      	strb	r3, [r7, #23]
	    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <_read+0x40>)
 8000cc6:	f002 f935 	bl	8002f34 <HAL_UART_Transmit>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	75fb      	strb	r3, [r7, #23]
	}
	return 1;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000204 	.word	0x20000204

08000cdc <_write>:

int _write(int fd, char* ptr, int len) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d002      	beq.n	8000cf4 <_write+0x18>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d110      	bne.n	8000d16 <_write+0x3a>
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <_write+0x50>)
 8000d00:	f002 f918 	bl	8002f34 <HAL_UART_Transmit>
 8000d04:	4603      	mov	r3, r0
 8000d06:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <_write+0x36>
      return len;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	e008      	b.n	8000d24 <_write+0x48>
    else
      return EIO;
 8000d12:	2305      	movs	r3, #5
 8000d14:	e006      	b.n	8000d24 <_write+0x48>
  }
  errno = EBADF;
 8000d16:	f002 fde9 	bl	80038ec <__errno>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	2309      	movs	r3, #9
 8000d1e:	6013      	str	r3, [r2, #0]
  return -1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000204 	.word	0x20000204

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b09b      	sub	sp, #108	; 0x6c
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f000 fa57 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f823 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 f8af 	bl	8000ea0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d42:	f000 f87d 	bl	8000e40 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float numero = 100.0;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <main+0x44>)
 8000d48:	667b      	str	r3, [r7, #100]	; 0x64
	    printf("\r\nYour name: ");
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <main+0x48>)
 8000d4c:	f003 fc3e 	bl	80045cc <iprintf>
	    scanf("%s", buf);
 8000d50:	463b      	mov	r3, r7
 8000d52:	4619      	mov	r1, r3
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <main+0x4c>)
 8000d56:	f003 fc51 	bl	80045fc <iscanf>
	    printf("\r\nHello, %s, %f!\r\n", buf, numero);
 8000d5a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d5c:	f7ff fbfc 	bl	8000558 <__aeabi_f2d>
 8000d60:	4603      	mov	r3, r0
 8000d62:	460c      	mov	r4, r1
 8000d64:	4639      	mov	r1, r7
 8000d66:	461a      	mov	r2, r3
 8000d68:	4623      	mov	r3, r4
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <main+0x50>)
 8000d6c:	f003 fc2e 	bl	80045cc <iprintf>
  {
 8000d70:	e7e9      	b.n	8000d46 <main+0x16>
 8000d72:	bf00      	nop
 8000d74:	42c80000 	.word	0x42c80000
 8000d78:	08008768 	.word	0x08008768
 8000d7c:	08008778 	.word	0x08008778
 8000d80:	0800877c 	.word	0x0800877c

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0a6      	sub	sp, #152	; 0x98
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d8e:	2228      	movs	r2, #40	; 0x28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fdd4 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2258      	movs	r2, #88	; 0x58
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fdc6 	bl	8003940 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db4:	2302      	movs	r3, #2
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fcee 	bl	80017c4 <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dee:	f000 f8bf 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 fbee 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e1a:	f000 f8a9 	bl	8000f70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fe17 	bl	8002a5c <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e34:	f000 f89c 	bl	8000f70 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3798      	adds	r7, #152	; 0x98
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <MX_USART2_UART_Init+0x5c>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e84:	f002 f808 	bl	8002e98 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f000 f86f 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000204 	.word	0x20000204
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a2a      	ldr	r2, [pc, #168]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f000 fc39 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_GPIO_Init+0xcc>)
 8000f38:	f000 faa2 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f000 fa93 	bl	8001480 <HAL_GPIO_Init>

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	48000800 	.word	0x48000800

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fb6:	2007      	movs	r0, #7
 8000fb8:	f000 fa2e 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_UART_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d128      	bne.n	800103c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_UART_MspInit+0x80>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_UART_MspInit+0x80>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800101a:	230c      	movs	r3, #12
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102a:	2307      	movs	r3, #7
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 fa22 	bl	8001480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40004400 	.word	0x40004400
 8001048:	40021000 	.word	0x40021000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f8e8 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	return -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d0:	605a      	str	r2, [r3, #4]
	return 0;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_isatty>:

int _isatty(int file)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
	return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <_sbrk+0x50>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x16>
		heap_end = &end;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <_sbrk+0x50>)
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <_sbrk+0x54>)
 8001124:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <_sbrk+0x50>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <_sbrk+0x50>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	466a      	mov	r2, sp
 8001136:	4293      	cmp	r3, r2
 8001138:	d907      	bls.n	800114a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800113a:	f002 fbd7 	bl	80038ec <__errno>
 800113e:	4602      	mov	r2, r0
 8001140:	230c      	movs	r3, #12
 8001142:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	e006      	b.n	8001158 <_sbrk+0x48>
	}

	heap_end += incr;
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <_sbrk+0x50>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a03      	ldr	r2, [pc, #12]	; (8001160 <_sbrk+0x50>)
 8001154:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001f8 	.word	0x200001f8
 8001164:	20000290 	.word	0x20000290

08001168 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <SystemInit+0x28>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <SystemInit+0x28>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x28>)
 800117e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001182:	609a      	str	r2, [r3, #8]
#endif
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001198:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800119a:	e003      	b.n	80011a4 <LoopCopyDataInit>

0800119c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800119e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011a2:	3104      	adds	r1, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011ac:	d3f6      	bcc.n	800119c <CopyDataInit>
	ldr	r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80011b0:	e002      	b.n	80011b8 <LoopFillZerobss>

080011b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011b4:	f842 3b04 	str.w	r3, [r2], #4

080011b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <LoopForever+0x16>)
	cmp	r2, r3
 80011ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011bc:	d3f9      	bcc.n	80011b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011be:	f7ff ffd3 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f002 fb99 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c6:	f7ff fdb3 	bl	8000d30 <main>

080011ca <LoopForever>:

LoopForever:
    b LoopForever
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011cc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80011d0:	08008b14 	.word	0x08008b14
	ldr	r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011d8:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80011dc:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80011e0:	2000028c 	.word	0x2000028c

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f90d 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff febc 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f917 	bl	8001466 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f8ed 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000284 	.word	0x20000284

0800129c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;  
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000284 	.word	0x20000284

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff47 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff5c 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff8e 	bl	800136c <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffb0 	bl	80013d4 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148e:	e160      	b.n	8001752 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 8152 	beq.w	800174c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x38>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d123      	bne.n	8001500 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	6939      	ldr	r1, [r7, #16]
 80014fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d00b      	beq.n	8001554 <HAL_GPIO_Init+0xd4>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001548:	2b11      	cmp	r3, #17
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b12      	cmp	r3, #18
 8001552:	d130      	bne.n	80015b6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158a:	2201      	movs	r2, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	f003 0201 	and.w	r2, r3, #1
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80ac 	beq.w	800174c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f4:	4b5e      	ldr	r3, [pc, #376]	; (8001770 <HAL_GPIO_Init+0x2f0>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a5d      	ldr	r2, [pc, #372]	; (8001770 <HAL_GPIO_Init+0x2f0>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <HAL_GPIO_Init+0x2f0>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800160c:	4a59      	ldr	r2, [pc, #356]	; (8001774 <HAL_GPIO_Init+0x2f4>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001636:	d025      	beq.n	8001684 <HAL_GPIO_Init+0x204>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4f      	ldr	r2, [pc, #316]	; (8001778 <HAL_GPIO_Init+0x2f8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d01f      	beq.n	8001680 <HAL_GPIO_Init+0x200>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4e      	ldr	r2, [pc, #312]	; (800177c <HAL_GPIO_Init+0x2fc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d019      	beq.n	800167c <HAL_GPIO_Init+0x1fc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4d      	ldr	r2, [pc, #308]	; (8001780 <HAL_GPIO_Init+0x300>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d013      	beq.n	8001678 <HAL_GPIO_Init+0x1f8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_GPIO_Init+0x304>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00d      	beq.n	8001674 <HAL_GPIO_Init+0x1f4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4b      	ldr	r2, [pc, #300]	; (8001788 <HAL_GPIO_Init+0x308>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_Init+0x1f0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a4a      	ldr	r2, [pc, #296]	; (800178c <HAL_GPIO_Init+0x30c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_GPIO_Init+0x1ec>
 8001668:	2306      	movs	r3, #6
 800166a:	e00c      	b.n	8001686 <HAL_GPIO_Init+0x206>
 800166c:	2307      	movs	r3, #7
 800166e:	e00a      	b.n	8001686 <HAL_GPIO_Init+0x206>
 8001670:	2305      	movs	r3, #5
 8001672:	e008      	b.n	8001686 <HAL_GPIO_Init+0x206>
 8001674:	2304      	movs	r3, #4
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x206>
 8001678:	2303      	movs	r3, #3
 800167a:	e004      	b.n	8001686 <HAL_GPIO_Init+0x206>
 800167c:	2302      	movs	r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x206>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_GPIO_Init+0x206>
 8001684:	2300      	movs	r3, #0
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	f002 0203 	and.w	r2, r2, #3
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	4093      	lsls	r3, r2
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001696:	4937      	ldr	r1, [pc, #220]	; (8001774 <HAL_GPIO_Init+0x2f4>)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <HAL_GPIO_Init+0x310>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016c8:	4a31      	ldr	r2, [pc, #196]	; (8001790 <HAL_GPIO_Init+0x310>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_GPIO_Init+0x310>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016f2:	4a27      	ldr	r2, [pc, #156]	; (8001790 <HAL_GPIO_Init+0x310>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_GPIO_Init+0x310>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800171c:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <HAL_GPIO_Init+0x310>)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_GPIO_Init+0x310>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_GPIO_Init+0x310>)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa22 f303 	lsr.w	r3, r2, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	f47f ae97 	bne.w	8001490 <HAL_GPIO_Init+0x10>
  }
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	48000400 	.word	0x48000400
 800177c:	48000800 	.word	0x48000800
 8001780:	48000c00 	.word	0x48000c00
 8001784:	48001000 	.word	0x48001000
 8001788:	48001400 	.word	0x48001400
 800178c:	48001800 	.word	0x48001800
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	f000 bf01 	b.w	80025e0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 8160 	beq.w	8001aae <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017ee:	4bae      	ldr	r3, [pc, #696]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d00c      	beq.n	8001814 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017fa:	4bab      	ldr	r3, [pc, #684]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d159      	bne.n	80018ba <HAL_RCC_OscConfig+0xf6>
 8001806:	4ba8      	ldr	r3, [pc, #672]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800180e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001812:	d152      	bne.n	80018ba <HAL_RCC_OscConfig+0xf6>
 8001814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001818:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001828:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d102      	bne.n	8001846 <HAL_RCC_OscConfig+0x82>
 8001840:	4b99      	ldr	r3, [pc, #612]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0xae>
 8001846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800185a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800185e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001862:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800186e:	4b8e      	ldr	r3, [pc, #568]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001876:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800187a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800187e:	fa92 f2a2 	rbit	r2, r2
 8001882:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001886:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800188a:	fab2 f282 	clz	r2, r2
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	f042 0220 	orr.w	r2, r2, #32
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	f002 021f 	and.w	r2, r2, #31
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8102 	beq.w	8001aac <HAL_RCC_OscConfig+0x2e8>
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80fc 	bne.w	8001aac <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	f000 be93 	b.w	80025e0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x110>
 80018c6:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a77      	ldr	r2, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e030      	b.n	8001936 <HAL_RCC_OscConfig+0x172>
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x134>
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a71      	ldr	r2, [pc, #452]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e01e      	b.n	8001936 <HAL_RCC_OscConfig+0x172>
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001902:	d10c      	bne.n	800191e <HAL_RCC_OscConfig+0x15a>
 8001904:	4b68      	ldr	r3, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a67      	ldr	r2, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 800190a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b65      	ldr	r3, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a64      	ldr	r2, [pc, #400]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e00b      	b.n	8001936 <HAL_RCC_OscConfig+0x172>
 800191e:	4b62      	ldr	r3, [pc, #392]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a61      	ldr	r2, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5e      	ldr	r2, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d059      	beq.n	80019f4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fcac 	bl	800129c <HAL_GetTick>
 8001944:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194a:	f7ff fca7 	bl	800129c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d902      	bls.n	8001960 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	f000 be40 	b.w	80025e0 <HAL_RCC_OscConfig+0xe1c>
 8001960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001964:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001974:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d102      	bne.n	8001992 <HAL_RCC_OscConfig+0x1ce>
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x1fa>
 8001992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001996:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80019a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019aa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019c2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80019c6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80019ca:	fa92 f2a2 	rbit	r2, r2
 80019ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80019d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019d6:	fab2 f282 	clz	r2, r2
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f042 0220 	orr.w	r2, r2, #32
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f002 021f 	and.w	r2, r2, #31
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0ab      	beq.n	800194a <HAL_RCC_OscConfig+0x186>
 80019f2:	e05c      	b.n	8001aae <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fc52 	bl	800129c <HAL_GetTick>
 80019f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fe:	f7ff fc4d 	bl	800129c <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d902      	bls.n	8001a14 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	f000 bde6 	b.w	80025e0 <HAL_RCC_OscConfig+0xe1c>
 8001a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a18:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <HAL_RCC_OscConfig+0x282>
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x2ae>
 8001a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_RCC_OscConfig+0x2e4>)
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a76:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a7a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a7e:	fa92 f2a2 	rbit	r2, r2
 8001a82:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a86:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a8a:	fab2 f282 	clz	r2, r2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f042 0220 	orr.w	r2, r2, #32
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 021f 	and.w	r2, r2, #31
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ab      	bne.n	80019fe <HAL_RCC_OscConfig+0x23a>
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_OscConfig+0x2ea>
 8001aa8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8170 	beq.w	8001d9e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001abe:	4bd0      	ldr	r3, [pc, #832]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aca:	4bcd      	ldr	r3, [pc, #820]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d16d      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3ee>
 8001ad6:	4bca      	ldr	r3, [pc, #808]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae2:	d166      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3ee>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001af6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	095b      	lsrs	r3, r3, #5
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d102      	bne.n	8001b14 <HAL_RCC_OscConfig+0x350>
 8001b0e:	4bbc      	ldr	r3, [pc, #752]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	e013      	b.n	8001b3c <HAL_RCC_OscConfig+0x378>
 8001b14:	2302      	movs	r3, #2
 8001b16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b2c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b38:	4bb1      	ldr	r3, [pc, #708]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b42:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b46:	fa92 f2a2 	rbit	r2, r2
 8001b4a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001b4e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f002 021f 	and.w	r2, r2, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3ba>
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d002      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f000 bd31 	b.w	80025e0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	4ba0      	ldr	r3, [pc, #640]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	21f8      	movs	r1, #248	; 0xf8
 8001b8e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001b96:	fa91 f1a1 	rbit	r1, r1
 8001b9a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ba2:	fab1 f181 	clz	r1, r1
 8001ba6:	b2c9      	uxtb	r1, r1
 8001ba8:	408b      	lsls	r3, r1
 8001baa:	4995      	ldr	r1, [pc, #596]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb0:	e0f5      	b.n	8001d9e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8085 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x504>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001bd0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	461a      	mov	r2, r3
 8001be6:	2301      	movs	r3, #1
 8001be8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff fb57 	bl	800129c <HAL_GetTick>
 8001bee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fb52 	bl	800129c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d902      	bls.n	8001c0a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	f000 bceb 	b.w	80025e0 <HAL_RCC_OscConfig+0xe1c>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_OscConfig+0x476>
 8001c34:	4b72      	ldr	r3, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	e013      	b.n	8001c62 <HAL_RCC_OscConfig+0x49e>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c52:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c5e:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	2202      	movs	r2, #2
 8001c64:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c68:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c6c:	fa92 f2a2 	rbit	r2, r2
 8001c70:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0af      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b5a      	ldr	r3, [pc, #360]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	21f8      	movs	r1, #248	; 0xf8
 8001ca4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001cac:	fa91 f1a1 	rbit	r1, r1
 8001cb0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001cb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cb8:	fab1 f181 	clz	r1, r1
 8001cbc:	b2c9      	uxtb	r1, r1
 8001cbe:	408b      	lsls	r3, r1
 8001cc0:	494f      	ldr	r1, [pc, #316]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
 8001cc6:	e06a      	b.n	8001d9e <HAL_RCC_OscConfig+0x5da>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001cda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fad2 	bl	800129c <HAL_GetTick>
 8001cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff facd 	bl	800129c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d902      	bls.n	8001d14 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	f000 bc66 	b.w	80025e0 <HAL_RCC_OscConfig+0xe1c>
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001d26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_OscConfig+0x580>
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	e013      	b.n	8001d6c <HAL_RCC_OscConfig+0x5a8>
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_RCC_OscConfig+0x63c>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d72:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d76:	fa92 f2a2 	rbit	r2, r2
 8001d7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d82:	fab2 f282 	clz	r2, r2
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f042 0220 	orr.w	r2, r2, #32
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f002 021f 	and.w	r2, r2, #31
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1af      	bne.n	8001cfe <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80da 	beq.w	8001f62 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d069      	beq.n	8001e8c <HAL_RCC_OscConfig+0x6c8>
 8001db8:	2301      	movs	r3, #1
 8001dba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001dca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x640>)
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2301      	movs	r3, #1
 8001de0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa5b 	bl	800129c <HAL_GetTick>
 8001de6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	e00d      	b.n	8001e08 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dec:	f7ff fa56 	bl	800129c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d905      	bls.n	8001e08 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e3ef      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	10908120 	.word	0x10908120
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e38:	2202      	movs	r2, #2
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4c:	4ba4      	ldr	r3, [pc, #656]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8001e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e54:	2102      	movs	r1, #2
 8001e56:	6019      	str	r1, [r3, #0]
 8001e58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f1a3 	rbit	r1, r3
 8001e62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e66:	6019      	str	r1, [r3, #0]
  return result;
 8001e68:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0b0      	beq.n	8001dec <HAL_RCC_OscConfig+0x628>
 8001e8a:	e06a      	b.n	8001f62 <HAL_RCC_OscConfig+0x79e>
 8001e8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ea2:	601a      	str	r2, [r3, #0]
  return result;
 8001ea4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ea8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x920>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f9ed 	bl	800129c <HAL_GetTick>
 8001ec2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec6:	e009      	b.n	8001edc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f9e8 	bl	800129c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e381      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
 8001edc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	fa93 f2a3 	rbit	r2, r3
 8001eee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f10:	2202      	movs	r2, #2
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b6e      	ldr	r3, [pc, #440]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8001f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	6019      	str	r1, [r3, #0]
 8001f30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f1a3 	rbit	r1, r3
 8001f3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f3e:	6019      	str	r1, [r3, #0]
  return result;
 8001f40:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1b2      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8157 	beq.w	8002220 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f78:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d112      	bne.n	8001faa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	61d3      	str	r3, [r2, #28]
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_OscConfig+0x924>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d11a      	bne.n	8001fec <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b4c      	ldr	r3, [pc, #304]	; (80020e8 <HAL_RCC_OscConfig+0x924>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a4b      	ldr	r2, [pc, #300]	; (80020e8 <HAL_RCC_OscConfig+0x924>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f96b 	bl	800129c <HAL_GetTick>
 8001fc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	e009      	b.n	8001fe0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fcc:	f7ff f966 	bl	800129c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b64      	cmp	r3, #100	; 0x64
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e2ff      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x924>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ef      	beq.n	8001fcc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d106      	bne.n	8002004 <HAL_RCC_OscConfig+0x840>
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a39      	ldr	r2, [pc, #228]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	e02f      	b.n	8002064 <HAL_RCC_OscConfig+0x8a0>
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x864>
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a33      	ldr	r2, [pc, #204]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a30      	ldr	r2, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	e01d      	b.n	8002064 <HAL_RCC_OscConfig+0x8a0>
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b05      	cmp	r3, #5
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x888>
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a27      	ldr	r2, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0x8a0>
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d06a      	beq.n	8002144 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7ff f915 	bl	800129c <HAL_GetTick>
 8002072:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7ff f910 	bl	800129c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e2a7      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
 8002090:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020ac:	2202      	movs	r2, #2
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	fa93 f2a3 	rbit	r2, r3
 80020ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020be:	601a      	str	r2, [r3, #0]
  return result;
 80020c0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d108      	bne.n	80020ec <HAL_RCC_OscConfig+0x928>
 80020da:	4b01      	ldr	r3, [pc, #4]	; (80020e0 <HAL_RCC_OscConfig+0x91c>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	e013      	b.n	8002108 <HAL_RCC_OscConfig+0x944>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	10908120 	.word	0x10908120
 80020e8:	40007000 	.word	0x40007000
 80020ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020f0:	2202      	movs	r2, #2
 80020f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	4bc0      	ldr	r3, [pc, #768]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800210c:	2102      	movs	r1, #2
 800210e:	6011      	str	r1, [r2, #0]
 8002110:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	fa92 f1a2 	rbit	r1, r2
 800211a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800211e:	6011      	str	r1, [r2, #0]
  return result;
 8002120:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 021f 	and.w	r2, r2, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d09a      	beq.n	8002078 <HAL_RCC_OscConfig+0x8b4>
 8002142:	e063      	b.n	800220c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7ff f8aa 	bl	800129c <HAL_GetTick>
 8002148:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff f8a5 	bl	800129c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e23c      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
 8002166:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800216a:	2202      	movs	r2, #2
 800216c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002182:	2202      	movs	r2, #2
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002194:	601a      	str	r2, [r3, #0]
  return result;
 8002196:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800219a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_OscConfig+0x9f2>
 80021b0:	4b95      	ldr	r3, [pc, #596]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	e00d      	b.n	80021d2 <HAL_RCC_OscConfig+0xa0e>
 80021b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021ba:	2202      	movs	r2, #2
 80021bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	4b8e      	ldr	r3, [pc, #568]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80021d6:	2102      	movs	r1, #2
 80021d8:	6011      	str	r1, [r2, #0]
 80021da:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	fa92 f1a2 	rbit	r1, r2
 80021e4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021e8:	6011      	str	r1, [r2, #0]
  return result;
 80021ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f002 021f 	and.w	r2, r2, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f202 	lsl.w	r2, r1, r2
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1a0      	bne.n	800214e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800220c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002214:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	4a7b      	ldr	r2, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 800221a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 81d9 	beq.w	80025de <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222c:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	f000 81a6 	beq.w	8002586 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b02      	cmp	r3, #2
 8002242:	f040 811e 	bne.w	8002482 <HAL_RCC_OscConfig+0xcbe>
 8002246:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800224a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800224e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	fa93 f2a3 	rbit	r2, r3
 800225a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800225e:	601a      	str	r2, [r3, #0]
  return result;
 8002260:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002264:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002270:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	461a      	mov	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f80e 	bl	800129c <HAL_GetTick>
 8002280:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002284:	e009      	b.n	800229a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002286:	f7ff f809 	bl	800129c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1a2      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
 800229a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800229e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	fa93 f2a3 	rbit	r2, r3
 80022ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022b2:	601a      	str	r2, [r3, #0]
  return result;
 80022b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0xb10>
 80022ce:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	e01b      	b.n	800230c <HAL_RCC_OscConfig+0xb48>
 80022d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002310:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002314:	6011      	str	r1, [r2, #0]
 8002316:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	fa92 f1a2 	rbit	r1, r2
 8002320:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002324:	6011      	str	r1, [r2, #0]
  return result;
 8002326:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d19e      	bne.n	8002286 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002348:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f023 020f 	bic.w	r2, r3, #15
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	492c      	ldr	r1, [pc, #176]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 8002358:	4313      	orrs	r3, r2
 800235a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a19      	ldr	r1, [r3, #32]
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	430b      	orrs	r3, r1
 8002372:	4925      	ldr	r1, [pc, #148]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800237c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fa93 f2a3 	rbit	r2, r3
 800238c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002390:	601a      	str	r2, [r3, #0]
  return result;
 8002392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002396:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	461a      	mov	r2, r3
 80023aa:	2301      	movs	r3, #1
 80023ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe ff75 	bl	800129c <HAL_GetTick>
 80023b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b6:	e009      	b.n	80023cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe ff70 	bl	800129c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e109      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
 80023cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023e4:	601a      	str	r2, [r3, #0]
  return result;
 80023e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0xc48>
 8002400:	4b01      	ldr	r3, [pc, #4]	; (8002408 <HAL_RCC_OscConfig+0xc44>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	e01e      	b.n	8002444 <HAL_RCC_OscConfig+0xc80>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800242a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_OscConfig+0xe28>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002448:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800244c:	6011      	str	r1, [r2, #0]
 800244e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	fa92 f1a2 	rbit	r1, r2
 8002458:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800245c:	6011      	str	r1, [r2, #0]
  return result;
 800245e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	fab2 f282 	clz	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f002 021f 	and.w	r2, r2, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d09b      	beq.n	80023b8 <HAL_RCC_OscConfig+0xbf4>
 8002480:	e0ad      	b.n	80025de <HAL_RCC_OscConfig+0xe1a>
 8002482:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800249a:	601a      	str	r2, [r3, #0]
  return result;
 800249c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	461a      	mov	r2, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fef0 	bl	800129c <HAL_GetTick>
 80024bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e009      	b.n	80024d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe feeb 	bl	800129c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e084      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d102      	bne.n	8002510 <HAL_RCC_OscConfig+0xd4c>
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_RCC_OscConfig+0xe28>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e01b      	b.n	8002548 <HAL_RCC_OscConfig+0xd84>
 8002510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f107 0320 	add.w	r3, r7, #32
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f107 0318 	add.w	r3, r7, #24
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_RCC_OscConfig+0xe28>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f107 0214 	add.w	r2, r7, #20
 800254c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002550:	6011      	str	r1, [r2, #0]
 8002552:	f107 0214 	add.w	r2, r7, #20
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fa92 f1a2 	rbit	r1, r2
 800255c:	f107 0210 	add.w	r2, r7, #16
 8002560:	6011      	str	r1, [r2, #0]
  return result;
 8002562:	f107 0210 	add.w	r2, r7, #16
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f002 021f 	and.w	r2, r2, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d19e      	bne.n	80024c2 <HAL_RCC_OscConfig+0xcfe>
 8002584:	e02b      	b.n	80025de <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e025      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002594:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_RCC_OscConfig+0xe28>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_RCC_OscConfig+0xe28>)
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025a8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d111      	bne.n	80025da <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d108      	bne.n	80025da <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80025c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025cc:	f003 020f 	and.w	r2, r3, #15
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b09e      	sub	sp, #120	; 0x78
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e162      	b.n	80028ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b90      	ldr	r3, [pc, #576]	; (800284c <HAL_RCC_ClockConfig+0x25c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d910      	bls.n	8002638 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b8d      	ldr	r3, [pc, #564]	; (800284c <HAL_RCC_ClockConfig+0x25c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	498b      	ldr	r1, [pc, #556]	; (800284c <HAL_RCC_ClockConfig+0x25c>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_RCC_ClockConfig+0x25c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e14a      	b.n	80028ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b82      	ldr	r3, [pc, #520]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	497f      	ldr	r1, [pc, #508]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80dc 	beq.w	800281c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d13c      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xf6>
 800266c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002670:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800267a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d102      	bne.n	8002696 <HAL_RCC_ClockConfig+0xa6>
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	e00f      	b.n	80026b6 <HAL_RCC_ClockConfig+0xc6>
 8002696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	667b      	str	r3, [r7, #100]	; 0x64
 80026a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a8:	663b      	str	r3, [r7, #96]	; 0x60
 80026aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80026bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026be:	fa92 f2a2 	rbit	r2, r2
 80026c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026c6:	fab2 f282 	clz	r2, r2
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f042 0220 	orr.w	r2, r2, #32
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f002 021f 	and.w	r2, r2, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d17b      	bne.n	80027da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0f3      	b.n	80028ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d13c      	bne.n	8002768 <HAL_RCC_ClockConfig+0x178>
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_RCC_ClockConfig+0x128>
 8002712:	4b4f      	ldr	r3, [pc, #316]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	e00f      	b.n	8002738 <HAL_RCC_ClockConfig+0x148>
 8002718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
 8002726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272a:	643b      	str	r3, [r7, #64]	; 0x40
 800272c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002734:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800273c:	63ba      	str	r2, [r7, #56]	; 0x38
 800273e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002740:	fa92 f2a2 	rbit	r2, r2
 8002744:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002748:	fab2 f282 	clz	r2, r2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f042 0220 	orr.w	r2, r2, #32
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f002 021f 	and.w	r2, r2, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d13a      	bne.n	80027da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b2      	b.n	80028ce <HAL_RCC_ClockConfig+0x2de>
 8002768:	2302      	movs	r3, #2
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_RCC_ClockConfig+0x1a0>
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e00d      	b.n	80027ac <HAL_RCC_ClockConfig+0x1bc>
 8002790:	2302      	movs	r3, #2
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	2302      	movs	r3, #2
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2202      	movs	r2, #2
 80027ae:	61ba      	str	r2, [r7, #24]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	fa92 f2a2 	rbit	r2, r2
 80027b6:	617a      	str	r2, [r7, #20]
  return result;
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e079      	b.n	80028ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	491a      	ldr	r1, [pc, #104]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fd56 	bl	800129c <HAL_GetTick>
 80027f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fd52 	bl	800129c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e061      	b.n	80028ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_ClockConfig+0x260>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x25c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d214      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_RCC_ClockConfig+0x25c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4906      	ldr	r1, [pc, #24]	; (800284c <HAL_RCC_ClockConfig+0x25c>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <HAL_RCC_ClockConfig+0x25c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e040      	b.n	80028ce <HAL_RCC_ClockConfig+0x2de>
 800284c:	40022000 	.word	0x40022000
 8002850:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	491a      	ldr	r1, [pc, #104]	; (80028d8 <HAL_RCC_ClockConfig+0x2e8>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4912      	ldr	r1, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x2e8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002892:	f000 f829 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8002896:	4601      	mov	r1, r0
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_RCC_ClockConfig+0x2e8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a0:	22f0      	movs	r2, #240	; 0xf0
 80028a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	fa92 f2a2 	rbit	r2, r2
 80028aa:	60fa      	str	r2, [r7, #12]
  return result;
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	fab2 f282 	clz	r2, r2
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	40d3      	lsrs	r3, r2
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x2ec>)
 80028b8:	5cd3      	ldrb	r3, [r2, r3]
 80028ba:	fa21 f303 	lsr.w	r3, r1, r3
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_RCC_ClockConfig+0x2f0>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCC_ClockConfig+0x2f4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fca4 	bl	8001214 <HAL_InitTick>
  
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3778      	adds	r7, #120	; 0x78
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	0800879c 	.word	0x0800879c
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b08b      	sub	sp, #44	; 0x2c
 80028ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b04      	cmp	r3, #4
 8002910:	d002      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x30>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x36>
 8002916:	e03f      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800291a:	623b      	str	r3, [r7, #32]
      break;
 800291c:	e03f      	b.n	800299e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002924:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002928:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	fa92 f2a2 	rbit	r2, r2
 8002930:	607a      	str	r2, [r7, #4]
  return result;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	fab2 f282 	clz	r2, r2
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	40d3      	lsrs	r3, r2
 800293c:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	220f      	movs	r2, #15
 800294c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	60fa      	str	r2, [r7, #12]
  return result;
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	fab2 f282 	clz	r2, r2
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	40d3      	lsrs	r3, r2
 8002960:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	fbb2 f2f3 	udiv	r2, r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e007      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002982:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fbb2 f2f3 	udiv	r2, r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	623b      	str	r3, [r7, #32]
      break;
 8002996:	e002      	b.n	800299e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800299a:	623b      	str	r3, [r7, #32]
      break;
 800299c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299e:	6a3b      	ldr	r3, [r7, #32]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	372c      	adds	r7, #44	; 0x2c
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40021000 	.word	0x40021000
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	080087b4 	.word	0x080087b4
 80029b8:	080087c4 	.word	0x080087c4

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029da:	f7ff ffef 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029de:	4601      	mov	r1, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	fa92 f2a2 	rbit	r2, r2
 80029f4:	603a      	str	r2, [r7, #0]
  return result;
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	fab2 f282 	clz	r2, r2
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	40d3      	lsrs	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	080087ac 	.word	0x080087ac

08002a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a1e:	f7ff ffcd 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a22:	4601      	mov	r1, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a2c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	fa92 f2a2 	rbit	r2, r2
 8002a38:	603a      	str	r2, [r7, #0]
  return result;
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	fab2 f282 	clz	r2, r2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	40d3      	lsrs	r3, r2
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a46:	5cd3      	ldrb	r3, [r2, r3]
 8002a48:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	080087ac 	.word	0x080087ac

08002a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b092      	sub	sp, #72	; 0x48
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80d7 	beq.w	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a80:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10e      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8c:	4b4b      	ldr	r3, [pc, #300]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4a4a      	ldr	r2, [pc, #296]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a96:	61d3      	str	r3, [r2, #28]
 8002a98:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b45      	ldr	r3, [pc, #276]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a41      	ldr	r2, [pc, #260]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fbeb 	bl	800129c <HAL_GetTick>
 8002ac6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7fe fbe7 	bl	800129c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	; 0x64
 8002ad6:	d901      	bls.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1d6      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8084 	beq.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d07c      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	461a      	mov	r2, r3
 8002b32:	2301      	movs	r3, #1
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	461a      	mov	r2, r3
 8002b56:	2300      	movs	r3, #0
 8002b58:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04b      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fb97 	bl	800129c <HAL_GetTick>
 8002b6e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fe fb93 	bl	800129c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e180      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	2302      	movs	r3, #2
 8002b96:	623b      	str	r3, [r7, #32]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bb6:	4b01      	ldr	r3, [pc, #4]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	e00d      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	10908100 	.word	0x10908100
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	4ba0      	ldr	r3, [pc, #640]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2202      	movs	r2, #2
 8002bda:	613a      	str	r2, [r7, #16]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	fa92 f2a2 	rbit	r2, r2
 8002be2:	60fa      	str	r2, [r7, #12]
  return result;
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	fab2 f282 	clz	r2, r2
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0b7      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c02:	4b95      	ldr	r3, [pc, #596]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4992      	ldr	r1, [pc, #584]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b8e      	ldr	r3, [pc, #568]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	4a8d      	ldr	r2, [pc, #564]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c34:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f023 0203 	bic.w	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4985      	ldr	r1, [pc, #532]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c52:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	497e      	ldr	r1, [pc, #504]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	4976      	ldr	r1, [pc, #472]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c8e:	4b72      	ldr	r3, [pc, #456]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f023 0210 	bic.w	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	496f      	ldr	r1, [pc, #444]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	4967      	ldr	r1, [pc, #412]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f023 0220 	bic.w	r2, r3, #32
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4960      	ldr	r1, [pc, #384]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ce8:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	4958      	ldr	r1, [pc, #352]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d06:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	4951      	ldr	r1, [pc, #324]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4949      	ldr	r1, [pc, #292]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d42:	4b45      	ldr	r3, [pc, #276]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4942      	ldr	r1, [pc, #264]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d60:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	493a      	ldr	r1, [pc, #232]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	4933      	ldr	r1, [pc, #204]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	492b      	ldr	r1, [pc, #172]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4924      	ldr	r1, [pc, #144]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	491c      	ldr	r1, [pc, #112]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	4915      	ldr	r1, [pc, #84]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	490d      	ldr	r1, [pc, #52]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3e:	4906      	ldr	r1, [pc, #24]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00c      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e50:	4b01      	ldr	r3, [pc, #4]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	e002      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e64:	490b      	ldr	r1, [pc, #44]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e82:	4904      	ldr	r1, [pc, #16]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3748      	adds	r7, #72	; 0x48
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e040      	b.n	8002f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe f884 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	; 0x24
 8002ec4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f98c 	bl	80031f4 <UART_SetConfig>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e022      	b.n	8002f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fb9a 	bl	8003628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fc21 	bl	800376c <UART_CheckIdleState>
 8002f2a:	4603      	mov	r3, r0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	f040 8081 	bne.w	8003050 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_UART_Transmit+0x26>
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e079      	b.n	8003052 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_UART_Transmit+0x38>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e072      	b.n	8003052 <HAL_UART_Transmit+0x11e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f80:	f7fe f98c 	bl	800129c <HAL_GetTick>
 8002f84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	88fa      	ldrh	r2, [r7, #6]
 8002f8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	d108      	bne.n	8002fb2 <HAL_UART_Transmit+0x7e>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e003      	b.n	8002fba <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fba:	e02d      	b.n	8003018 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fc15 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e03d      	b.n	8003052 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	881a      	ldrh	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	3302      	adds	r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e008      	b.n	8003006 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b292      	uxth	r2, r2
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3301      	adds	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1cb      	bne.n	8002fbc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fbe1 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e009      	b.n	8003052 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af02      	add	r7, sp, #8
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800306e:	2b20      	cmp	r3, #32
 8003070:	f040 80bb 	bne.w	80031ea <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Receive+0x26>
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b3      	b.n	80031ec <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Receive+0x38>
 800308e:	2302      	movs	r3, #2
 8003090:	e0ac      	b.n	80031ec <HAL_UART_Receive+0x192>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2222      	movs	r2, #34	; 0x22
 80030a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030a6:	f7fe f8f9 	bl	800129c <HAL_GetTick>
 80030aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c4:	d10e      	bne.n	80030e4 <HAL_UART_Receive+0x8a>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <HAL_UART_Receive+0x80>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80030d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030d8:	e02d      	b.n	8003136 <HAL_UART_Receive+0xdc>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	22ff      	movs	r2, #255	; 0xff
 80030de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030e2:	e028      	b.n	8003136 <HAL_UART_Receive+0xdc>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10d      	bne.n	8003108 <HAL_UART_Receive+0xae>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <HAL_UART_Receive+0xa4>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	22ff      	movs	r2, #255	; 0xff
 80030f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030fc:	e01b      	b.n	8003136 <HAL_UART_Receive+0xdc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	227f      	movs	r2, #127	; 0x7f
 8003102:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003106:	e016      	b.n	8003136 <HAL_UART_Receive+0xdc>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003110:	d10d      	bne.n	800312e <HAL_UART_Receive+0xd4>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d104      	bne.n	8003124 <HAL_UART_Receive+0xca>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	227f      	movs	r2, #127	; 0x7f
 800311e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003122:	e008      	b.n	8003136 <HAL_UART_Receive+0xdc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	223f      	movs	r2, #63	; 0x3f
 8003128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800312c:	e003      	b.n	8003136 <HAL_UART_Receive+0xdc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800313c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003146:	d108      	bne.n	800315a <HAL_UART_Receive+0x100>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e003      	b.n	8003162 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003162:	e033      	b.n	80031cc <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2200      	movs	r2, #0
 800316c:	2120      	movs	r1, #32
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fb41 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e036      	b.n	80031ec <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10c      	bne.n	800319e <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800318a:	b29a      	uxth	r2, r3
 800318c:	8a7b      	ldrh	r3, [r7, #18]
 800318e:	4013      	ands	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3302      	adds	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e00d      	b.n	80031ba <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	8a7b      	ldrh	r3, [r7, #18]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	4013      	ands	r3, r2
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	3301      	adds	r3, #1
 80031b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1c5      	bne.n	8003164 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4bac      	ldr	r3, [pc, #688]	; (80034d4 <UART_SetConfig+0x2e0>)
 8003224:	4013      	ands	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	6939      	ldr	r1, [r7, #16]
 800322c:	430b      	orrs	r3, r1
 800322e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a9a      	ldr	r2, [pc, #616]	; (80034d8 <UART_SetConfig+0x2e4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d121      	bne.n	80032b8 <UART_SetConfig+0xc4>
 8003274:	4b99      	ldr	r3, [pc, #612]	; (80034dc <UART_SetConfig+0x2e8>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b03      	cmp	r3, #3
 800327e:	d817      	bhi.n	80032b0 <UART_SetConfig+0xbc>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x94>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	08003299 	.word	0x08003299
 800328c:	080032a5 	.word	0x080032a5
 8003290:	080032ab 	.word	0x080032ab
 8003294:	0800329f 	.word	0x0800329f
 8003298:	2301      	movs	r3, #1
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e0b2      	b.n	8003404 <UART_SetConfig+0x210>
 800329e:	2302      	movs	r3, #2
 80032a0:	77fb      	strb	r3, [r7, #31]
 80032a2:	e0af      	b.n	8003404 <UART_SetConfig+0x210>
 80032a4:	2304      	movs	r3, #4
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e0ac      	b.n	8003404 <UART_SetConfig+0x210>
 80032aa:	2308      	movs	r3, #8
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e0a9      	b.n	8003404 <UART_SetConfig+0x210>
 80032b0:	2310      	movs	r3, #16
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	bf00      	nop
 80032b6:	e0a5      	b.n	8003404 <UART_SetConfig+0x210>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a88      	ldr	r2, [pc, #544]	; (80034e0 <UART_SetConfig+0x2ec>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d123      	bne.n	800330a <UART_SetConfig+0x116>
 80032c2:	4b86      	ldr	r3, [pc, #536]	; (80034dc <UART_SetConfig+0x2e8>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ce:	d012      	beq.n	80032f6 <UART_SetConfig+0x102>
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d802      	bhi.n	80032dc <UART_SetConfig+0xe8>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <UART_SetConfig+0xf6>
 80032da:	e012      	b.n	8003302 <UART_SetConfig+0x10e>
 80032dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e0:	d00c      	beq.n	80032fc <UART_SetConfig+0x108>
 80032e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032e6:	d003      	beq.n	80032f0 <UART_SetConfig+0xfc>
 80032e8:	e00b      	b.n	8003302 <UART_SetConfig+0x10e>
 80032ea:	2300      	movs	r3, #0
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e089      	b.n	8003404 <UART_SetConfig+0x210>
 80032f0:	2302      	movs	r3, #2
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e086      	b.n	8003404 <UART_SetConfig+0x210>
 80032f6:	2304      	movs	r3, #4
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e083      	b.n	8003404 <UART_SetConfig+0x210>
 80032fc:	2308      	movs	r3, #8
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e080      	b.n	8003404 <UART_SetConfig+0x210>
 8003302:	2310      	movs	r3, #16
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	bf00      	nop
 8003308:	e07c      	b.n	8003404 <UART_SetConfig+0x210>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a75      	ldr	r2, [pc, #468]	; (80034e4 <UART_SetConfig+0x2f0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d123      	bne.n	800335c <UART_SetConfig+0x168>
 8003314:	4b71      	ldr	r3, [pc, #452]	; (80034dc <UART_SetConfig+0x2e8>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800331c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003320:	d012      	beq.n	8003348 <UART_SetConfig+0x154>
 8003322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003326:	d802      	bhi.n	800332e <UART_SetConfig+0x13a>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <UART_SetConfig+0x148>
 800332c:	e012      	b.n	8003354 <UART_SetConfig+0x160>
 800332e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003332:	d00c      	beq.n	800334e <UART_SetConfig+0x15a>
 8003334:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003338:	d003      	beq.n	8003342 <UART_SetConfig+0x14e>
 800333a:	e00b      	b.n	8003354 <UART_SetConfig+0x160>
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e060      	b.n	8003404 <UART_SetConfig+0x210>
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e05d      	b.n	8003404 <UART_SetConfig+0x210>
 8003348:	2304      	movs	r3, #4
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e05a      	b.n	8003404 <UART_SetConfig+0x210>
 800334e:	2308      	movs	r3, #8
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e057      	b.n	8003404 <UART_SetConfig+0x210>
 8003354:	2310      	movs	r3, #16
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	bf00      	nop
 800335a:	e053      	b.n	8003404 <UART_SetConfig+0x210>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a61      	ldr	r2, [pc, #388]	; (80034e8 <UART_SetConfig+0x2f4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d123      	bne.n	80033ae <UART_SetConfig+0x1ba>
 8003366:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <UART_SetConfig+0x2e8>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800336e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003372:	d012      	beq.n	800339a <UART_SetConfig+0x1a6>
 8003374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003378:	d802      	bhi.n	8003380 <UART_SetConfig+0x18c>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <UART_SetConfig+0x19a>
 800337e:	e012      	b.n	80033a6 <UART_SetConfig+0x1b2>
 8003380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003384:	d00c      	beq.n	80033a0 <UART_SetConfig+0x1ac>
 8003386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800338a:	d003      	beq.n	8003394 <UART_SetConfig+0x1a0>
 800338c:	e00b      	b.n	80033a6 <UART_SetConfig+0x1b2>
 800338e:	2300      	movs	r3, #0
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e037      	b.n	8003404 <UART_SetConfig+0x210>
 8003394:	2302      	movs	r3, #2
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e034      	b.n	8003404 <UART_SetConfig+0x210>
 800339a:	2304      	movs	r3, #4
 800339c:	77fb      	strb	r3, [r7, #31]
 800339e:	e031      	b.n	8003404 <UART_SetConfig+0x210>
 80033a0:	2308      	movs	r3, #8
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e02e      	b.n	8003404 <UART_SetConfig+0x210>
 80033a6:	2310      	movs	r3, #16
 80033a8:	77fb      	strb	r3, [r7, #31]
 80033aa:	bf00      	nop
 80033ac:	e02a      	b.n	8003404 <UART_SetConfig+0x210>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a4e      	ldr	r2, [pc, #312]	; (80034ec <UART_SetConfig+0x2f8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d123      	bne.n	8003400 <UART_SetConfig+0x20c>
 80033b8:	4b48      	ldr	r3, [pc, #288]	; (80034dc <UART_SetConfig+0x2e8>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80033c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c4:	d012      	beq.n	80033ec <UART_SetConfig+0x1f8>
 80033c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ca:	d802      	bhi.n	80033d2 <UART_SetConfig+0x1de>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <UART_SetConfig+0x1ec>
 80033d0:	e012      	b.n	80033f8 <UART_SetConfig+0x204>
 80033d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d6:	d00c      	beq.n	80033f2 <UART_SetConfig+0x1fe>
 80033d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033dc:	d003      	beq.n	80033e6 <UART_SetConfig+0x1f2>
 80033de:	e00b      	b.n	80033f8 <UART_SetConfig+0x204>
 80033e0:	2300      	movs	r3, #0
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e00e      	b.n	8003404 <UART_SetConfig+0x210>
 80033e6:	2302      	movs	r3, #2
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e00b      	b.n	8003404 <UART_SetConfig+0x210>
 80033ec:	2304      	movs	r3, #4
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e008      	b.n	8003404 <UART_SetConfig+0x210>
 80033f2:	2308      	movs	r3, #8
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e005      	b.n	8003404 <UART_SetConfig+0x210>
 80033f8:	2310      	movs	r3, #16
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	bf00      	nop
 80033fe:	e001      	b.n	8003404 <UART_SetConfig+0x210>
 8003400:	2310      	movs	r3, #16
 8003402:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340c:	f040 8090 	bne.w	8003530 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003410:	7ffb      	ldrb	r3, [r7, #31]
 8003412:	2b08      	cmp	r3, #8
 8003414:	d86c      	bhi.n	80034f0 <UART_SetConfig+0x2fc>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <UART_SetConfig+0x228>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003441 	.word	0x08003441
 8003420:	08003461 	.word	0x08003461
 8003424:	08003481 	.word	0x08003481
 8003428:	080034f1 	.word	0x080034f1
 800342c:	0800349d 	.word	0x0800349d
 8003430:	080034f1 	.word	0x080034f1
 8003434:	080034f1 	.word	0x080034f1
 8003438:	080034f1 	.word	0x080034f1
 800343c:	080034bd 	.word	0x080034bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7ff fac8 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8003444:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	005a      	lsls	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	b29b      	uxth	r3, r3
 800345c:	61bb      	str	r3, [r7, #24]
        break;
 800345e:	e04a      	b.n	80034f6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7ff fada 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 8003464:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	005a      	lsls	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	61bb      	str	r3, [r7, #24]
        break;
 800347e:	e03a      	b.n	80034f6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800348a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6852      	ldr	r2, [r2, #4]
 8003492:	fbb3 f3f2 	udiv	r3, r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	61bb      	str	r3, [r7, #24]
        break;
 800349a:	e02c      	b.n	80034f6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349c:	f7ff fa24 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80034a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	005a      	lsls	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	441a      	add	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	61bb      	str	r3, [r7, #24]
        break;
 80034ba:	e01c      	b.n	80034f6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	61bb      	str	r3, [r7, #24]
        break;
 80034d2:	e010      	b.n	80034f6 <UART_SetConfig+0x302>
 80034d4:	efff69f3 	.word	0xefff69f3
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40004400 	.word	0x40004400
 80034e4:	40004800 	.word	0x40004800
 80034e8:	40004c00 	.word	0x40004c00
 80034ec:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	75fb      	strb	r3, [r7, #23]
        break;
 80034f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d916      	bls.n	800352a <UART_SetConfig+0x336>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003502:	d212      	bcs.n	800352a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f023 030f 	bic.w	r3, r3, #15
 800350c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	b29b      	uxth	r3, r3
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	b29a      	uxth	r2, r3
 800351a:	897b      	ldrh	r3, [r7, #10]
 800351c:	4313      	orrs	r3, r2
 800351e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	897a      	ldrh	r2, [r7, #10]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e072      	b.n	8003610 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
 800352e:	e06f      	b.n	8003610 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003530:	7ffb      	ldrb	r3, [r7, #31]
 8003532:	2b08      	cmp	r3, #8
 8003534:	d85b      	bhi.n	80035ee <UART_SetConfig+0x3fa>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <UART_SetConfig+0x348>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	08003561 	.word	0x08003561
 8003540:	0800357f 	.word	0x0800357f
 8003544:	0800359d 	.word	0x0800359d
 8003548:	080035ef 	.word	0x080035ef
 800354c:	080035b9 	.word	0x080035b9
 8003550:	080035ef 	.word	0x080035ef
 8003554:	080035ef 	.word	0x080035ef
 8003558:	080035ef 	.word	0x080035ef
 800355c:	080035d7 	.word	0x080035d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003560:	f7ff fa38 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8003564:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085a      	lsrs	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	441a      	add	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	b29b      	uxth	r3, r3
 800357a:	61bb      	str	r3, [r7, #24]
        break;
 800357c:	e03a      	b.n	80035f4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800357e:	f7ff fa4b 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 8003582:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	085a      	lsrs	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	b29b      	uxth	r3, r3
 8003598:	61bb      	str	r3, [r7, #24]
        break;
 800359a:	e02b      	b.n	80035f4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80035a6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6852      	ldr	r2, [r2, #4]
 80035ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	61bb      	str	r3, [r7, #24]
        break;
 80035b6:	e01d      	b.n	80035f4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b8:	f7ff f996 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80035bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	085a      	lsrs	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	441a      	add	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	61bb      	str	r3, [r7, #24]
        break;
 80035d4:	e00e      	b.n	80035f4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	61bb      	str	r3, [r7, #24]
        break;
 80035ec:	e002      	b.n	80035f4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
        break;
 80035f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d908      	bls.n	800360c <UART_SetConfig+0x418>
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d204      	bcs.n	800360c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	e001      	b.n	8003610 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800361c:	7dfb      	ldrb	r3, [r7, #23]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop

08003628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01a      	beq.n	800373e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003726:	d10a      	bne.n	800373e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
  }
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800377a:	f7fd fd8f 	bl	800129c <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b08      	cmp	r3, #8
 800378c:	d10e      	bne.n	80037ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800378e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f82a 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e020      	b.n	80037ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d10e      	bne.n	80037d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f814 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e00a      	b.n	80037ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003806:	e05d      	b.n	80038c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d059      	beq.n	80038c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003810:	f7fd fd44 	bl	800129c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	429a      	cmp	r2, r3
 800381e:	d302      	bcc.n	8003826 <UART_WaitOnFlagUntilTimeout+0x30>
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11b      	bne.n	800385e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003834:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e042      	b.n	80038e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d02b      	beq.n	80038c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387a:	d123      	bne.n	80038c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003884:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003894:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e00f      	b.n	80038e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d092      	beq.n	8003808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <__errno>:
 80038ec:	4b01      	ldr	r3, [pc, #4]	; (80038f4 <__errno+0x8>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	2000000c 	.word	0x2000000c

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4e0d      	ldr	r6, [pc, #52]	; (8003930 <__libc_init_array+0x38>)
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 80038fe:	1ba4      	subs	r4, r4, r6
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	2500      	movs	r5, #0
 8003904:	42a5      	cmp	r5, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	4e0b      	ldr	r6, [pc, #44]	; (8003938 <__libc_init_array+0x40>)
 800390a:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x44>)
 800390c:	f004 ff1e 	bl	800874c <_init>
 8003910:	1ba4      	subs	r4, r4, r6
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	2500      	movs	r5, #0
 8003916:	42a5      	cmp	r5, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003920:	4798      	blx	r3
 8003922:	3501      	adds	r5, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800392a:	4798      	blx	r3
 800392c:	3501      	adds	r5, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08008b0c 	.word	0x08008b0c
 8003934:	08008b0c 	.word	0x08008b0c
 8003938:	08008b0c 	.word	0x08008b0c
 800393c:	08008b10 	.word	0x08008b10

08003940 <memset>:
 8003940:	4402      	add	r2, r0
 8003942:	4603      	mov	r3, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <__cvt>:
 8003950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003954:	ec55 4b10 	vmov	r4, r5, d0
 8003958:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800395a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800395e:	2d00      	cmp	r5, #0
 8003960:	460e      	mov	r6, r1
 8003962:	4691      	mov	r9, r2
 8003964:	4619      	mov	r1, r3
 8003966:	bfb8      	it	lt
 8003968:	4622      	movlt	r2, r4
 800396a:	462b      	mov	r3, r5
 800396c:	f027 0720 	bic.w	r7, r7, #32
 8003970:	bfbb      	ittet	lt
 8003972:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003976:	461d      	movlt	r5, r3
 8003978:	2300      	movge	r3, #0
 800397a:	232d      	movlt	r3, #45	; 0x2d
 800397c:	bfb8      	it	lt
 800397e:	4614      	movlt	r4, r2
 8003980:	2f46      	cmp	r7, #70	; 0x46
 8003982:	700b      	strb	r3, [r1, #0]
 8003984:	d004      	beq.n	8003990 <__cvt+0x40>
 8003986:	2f45      	cmp	r7, #69	; 0x45
 8003988:	d100      	bne.n	800398c <__cvt+0x3c>
 800398a:	3601      	adds	r6, #1
 800398c:	2102      	movs	r1, #2
 800398e:	e000      	b.n	8003992 <__cvt+0x42>
 8003990:	2103      	movs	r1, #3
 8003992:	ab03      	add	r3, sp, #12
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	ab02      	add	r3, sp, #8
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	4632      	mov	r2, r6
 800399c:	4653      	mov	r3, sl
 800399e:	ec45 4b10 	vmov	d0, r4, r5
 80039a2:	f001 fda5 	bl	80054f0 <_dtoa_r>
 80039a6:	2f47      	cmp	r7, #71	; 0x47
 80039a8:	4680      	mov	r8, r0
 80039aa:	d102      	bne.n	80039b2 <__cvt+0x62>
 80039ac:	f019 0f01 	tst.w	r9, #1
 80039b0:	d026      	beq.n	8003a00 <__cvt+0xb0>
 80039b2:	2f46      	cmp	r7, #70	; 0x46
 80039b4:	eb08 0906 	add.w	r9, r8, r6
 80039b8:	d111      	bne.n	80039de <__cvt+0x8e>
 80039ba:	f898 3000 	ldrb.w	r3, [r8]
 80039be:	2b30      	cmp	r3, #48	; 0x30
 80039c0:	d10a      	bne.n	80039d8 <__cvt+0x88>
 80039c2:	2200      	movs	r2, #0
 80039c4:	2300      	movs	r3, #0
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7fd f885 	bl	8000ad8 <__aeabi_dcmpeq>
 80039ce:	b918      	cbnz	r0, 80039d8 <__cvt+0x88>
 80039d0:	f1c6 0601 	rsb	r6, r6, #1
 80039d4:	f8ca 6000 	str.w	r6, [sl]
 80039d8:	f8da 3000 	ldr.w	r3, [sl]
 80039dc:	4499      	add	r9, r3
 80039de:	2200      	movs	r2, #0
 80039e0:	2300      	movs	r3, #0
 80039e2:	4620      	mov	r0, r4
 80039e4:	4629      	mov	r1, r5
 80039e6:	f7fd f877 	bl	8000ad8 <__aeabi_dcmpeq>
 80039ea:	b938      	cbnz	r0, 80039fc <__cvt+0xac>
 80039ec:	2230      	movs	r2, #48	; 0x30
 80039ee:	9b03      	ldr	r3, [sp, #12]
 80039f0:	454b      	cmp	r3, r9
 80039f2:	d205      	bcs.n	8003a00 <__cvt+0xb0>
 80039f4:	1c59      	adds	r1, r3, #1
 80039f6:	9103      	str	r1, [sp, #12]
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e7f8      	b.n	80039ee <__cvt+0x9e>
 80039fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a00:	9b03      	ldr	r3, [sp, #12]
 8003a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a04:	eba3 0308 	sub.w	r3, r3, r8
 8003a08:	4640      	mov	r0, r8
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	b004      	add	sp, #16
 8003a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a12 <__exponent>:
 8003a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a14:	2900      	cmp	r1, #0
 8003a16:	4604      	mov	r4, r0
 8003a18:	bfba      	itte	lt
 8003a1a:	4249      	neglt	r1, r1
 8003a1c:	232d      	movlt	r3, #45	; 0x2d
 8003a1e:	232b      	movge	r3, #43	; 0x2b
 8003a20:	2909      	cmp	r1, #9
 8003a22:	f804 2b02 	strb.w	r2, [r4], #2
 8003a26:	7043      	strb	r3, [r0, #1]
 8003a28:	dd20      	ble.n	8003a6c <__exponent+0x5a>
 8003a2a:	f10d 0307 	add.w	r3, sp, #7
 8003a2e:	461f      	mov	r7, r3
 8003a30:	260a      	movs	r6, #10
 8003a32:	fb91 f5f6 	sdiv	r5, r1, r6
 8003a36:	fb06 1115 	mls	r1, r6, r5, r1
 8003a3a:	3130      	adds	r1, #48	; 0x30
 8003a3c:	2d09      	cmp	r5, #9
 8003a3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a42:	f103 32ff 	add.w	r2, r3, #4294967295
 8003a46:	4629      	mov	r1, r5
 8003a48:	dc09      	bgt.n	8003a5e <__exponent+0x4c>
 8003a4a:	3130      	adds	r1, #48	; 0x30
 8003a4c:	3b02      	subs	r3, #2
 8003a4e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003a52:	42bb      	cmp	r3, r7
 8003a54:	4622      	mov	r2, r4
 8003a56:	d304      	bcc.n	8003a62 <__exponent+0x50>
 8003a58:	1a10      	subs	r0, r2, r0
 8003a5a:	b003      	add	sp, #12
 8003a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a5e:	4613      	mov	r3, r2
 8003a60:	e7e7      	b.n	8003a32 <__exponent+0x20>
 8003a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a66:	f804 2b01 	strb.w	r2, [r4], #1
 8003a6a:	e7f2      	b.n	8003a52 <__exponent+0x40>
 8003a6c:	2330      	movs	r3, #48	; 0x30
 8003a6e:	4419      	add	r1, r3
 8003a70:	7083      	strb	r3, [r0, #2]
 8003a72:	1d02      	adds	r2, r0, #4
 8003a74:	70c1      	strb	r1, [r0, #3]
 8003a76:	e7ef      	b.n	8003a58 <__exponent+0x46>

08003a78 <_printf_float>:
 8003a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a7c:	b08d      	sub	sp, #52	; 0x34
 8003a7e:	460c      	mov	r4, r1
 8003a80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003a84:	4616      	mov	r6, r2
 8003a86:	461f      	mov	r7, r3
 8003a88:	4605      	mov	r5, r0
 8003a8a:	f002 ff09 	bl	80068a0 <_localeconv_r>
 8003a8e:	6803      	ldr	r3, [r0, #0]
 8003a90:	9304      	str	r3, [sp, #16]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc fba4 	bl	80001e0 <strlen>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8003a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa0:	9005      	str	r0, [sp, #20]
 8003aa2:	3307      	adds	r3, #7
 8003aa4:	f023 0307 	bic.w	r3, r3, #7
 8003aa8:	f103 0208 	add.w	r2, r3, #8
 8003aac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ab0:	f8d4 b000 	ldr.w	fp, [r4]
 8003ab4:	f8c8 2000 	str.w	r2, [r8]
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ac0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ac4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ac8:	9307      	str	r3, [sp, #28]
 8003aca:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ace:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad2:	4ba7      	ldr	r3, [pc, #668]	; (8003d70 <_printf_float+0x2f8>)
 8003ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ad8:	f7fd f830 	bl	8000b3c <__aeabi_dcmpun>
 8003adc:	bb70      	cbnz	r0, 8003b3c <_printf_float+0xc4>
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae2:	4ba3      	ldr	r3, [pc, #652]	; (8003d70 <_printf_float+0x2f8>)
 8003ae4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ae8:	f7fd f80a 	bl	8000b00 <__aeabi_dcmple>
 8003aec:	bb30      	cbnz	r0, 8003b3c <_printf_float+0xc4>
 8003aee:	2200      	movs	r2, #0
 8003af0:	2300      	movs	r3, #0
 8003af2:	4640      	mov	r0, r8
 8003af4:	4649      	mov	r1, r9
 8003af6:	f7fc fff9 	bl	8000aec <__aeabi_dcmplt>
 8003afa:	b110      	cbz	r0, 8003b02 <_printf_float+0x8a>
 8003afc:	232d      	movs	r3, #45	; 0x2d
 8003afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b02:	4a9c      	ldr	r2, [pc, #624]	; (8003d74 <_printf_float+0x2fc>)
 8003b04:	4b9c      	ldr	r3, [pc, #624]	; (8003d78 <_printf_float+0x300>)
 8003b06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003b0a:	bf8c      	ite	hi
 8003b0c:	4690      	movhi	r8, r2
 8003b0e:	4698      	movls	r8, r3
 8003b10:	2303      	movs	r3, #3
 8003b12:	f02b 0204 	bic.w	r2, fp, #4
 8003b16:	6123      	str	r3, [r4, #16]
 8003b18:	6022      	str	r2, [r4, #0]
 8003b1a:	f04f 0900 	mov.w	r9, #0
 8003b1e:	9700      	str	r7, [sp, #0]
 8003b20:	4633      	mov	r3, r6
 8003b22:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b24:	4621      	mov	r1, r4
 8003b26:	4628      	mov	r0, r5
 8003b28:	f000 f9e6 	bl	8003ef8 <_printf_common>
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	f040 808d 	bne.w	8003c4c <_printf_float+0x1d4>
 8003b32:	f04f 30ff 	mov.w	r0, #4294967295
 8003b36:	b00d      	add	sp, #52	; 0x34
 8003b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	4640      	mov	r0, r8
 8003b42:	4649      	mov	r1, r9
 8003b44:	f7fc fffa 	bl	8000b3c <__aeabi_dcmpun>
 8003b48:	b110      	cbz	r0, 8003b50 <_printf_float+0xd8>
 8003b4a:	4a8c      	ldr	r2, [pc, #560]	; (8003d7c <_printf_float+0x304>)
 8003b4c:	4b8c      	ldr	r3, [pc, #560]	; (8003d80 <_printf_float+0x308>)
 8003b4e:	e7da      	b.n	8003b06 <_printf_float+0x8e>
 8003b50:	6861      	ldr	r1, [r4, #4]
 8003b52:	1c4b      	adds	r3, r1, #1
 8003b54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003b58:	a80a      	add	r0, sp, #40	; 0x28
 8003b5a:	d13e      	bne.n	8003bda <_printf_float+0x162>
 8003b5c:	2306      	movs	r3, #6
 8003b5e:	6063      	str	r3, [r4, #4]
 8003b60:	2300      	movs	r3, #0
 8003b62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003b66:	ab09      	add	r3, sp, #36	; 0x24
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	ec49 8b10 	vmov	d0, r8, r9
 8003b6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b72:	6022      	str	r2, [r4, #0]
 8003b74:	f8cd a004 	str.w	sl, [sp, #4]
 8003b78:	6861      	ldr	r1, [r4, #4]
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f7ff fee8 	bl	8003950 <__cvt>
 8003b80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003b84:	2b47      	cmp	r3, #71	; 0x47
 8003b86:	4680      	mov	r8, r0
 8003b88:	d109      	bne.n	8003b9e <_printf_float+0x126>
 8003b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b8c:	1cd8      	adds	r0, r3, #3
 8003b8e:	db02      	blt.n	8003b96 <_printf_float+0x11e>
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	4293      	cmp	r3, r2
 8003b94:	dd47      	ble.n	8003c26 <_printf_float+0x1ae>
 8003b96:	f1aa 0a02 	sub.w	sl, sl, #2
 8003b9a:	fa5f fa8a 	uxtb.w	sl, sl
 8003b9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003ba2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ba4:	d824      	bhi.n	8003bf0 <_printf_float+0x178>
 8003ba6:	3901      	subs	r1, #1
 8003ba8:	4652      	mov	r2, sl
 8003baa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bae:	9109      	str	r1, [sp, #36]	; 0x24
 8003bb0:	f7ff ff2f 	bl	8003a12 <__exponent>
 8003bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bb6:	1813      	adds	r3, r2, r0
 8003bb8:	2a01      	cmp	r2, #1
 8003bba:	4681      	mov	r9, r0
 8003bbc:	6123      	str	r3, [r4, #16]
 8003bbe:	dc02      	bgt.n	8003bc6 <_printf_float+0x14e>
 8003bc0:	6822      	ldr	r2, [r4, #0]
 8003bc2:	07d1      	lsls	r1, r2, #31
 8003bc4:	d501      	bpl.n	8003bca <_printf_float+0x152>
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	6123      	str	r3, [r4, #16]
 8003bca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0a5      	beq.n	8003b1e <_printf_float+0xa6>
 8003bd2:	232d      	movs	r3, #45	; 0x2d
 8003bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd8:	e7a1      	b.n	8003b1e <_printf_float+0xa6>
 8003bda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003bde:	f000 8177 	beq.w	8003ed0 <_printf_float+0x458>
 8003be2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003be6:	d1bb      	bne.n	8003b60 <_printf_float+0xe8>
 8003be8:	2900      	cmp	r1, #0
 8003bea:	d1b9      	bne.n	8003b60 <_printf_float+0xe8>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e7b6      	b.n	8003b5e <_printf_float+0xe6>
 8003bf0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003bf4:	d119      	bne.n	8003c2a <_printf_float+0x1b2>
 8003bf6:	2900      	cmp	r1, #0
 8003bf8:	6863      	ldr	r3, [r4, #4]
 8003bfa:	dd0c      	ble.n	8003c16 <_printf_float+0x19e>
 8003bfc:	6121      	str	r1, [r4, #16]
 8003bfe:	b913      	cbnz	r3, 8003c06 <_printf_float+0x18e>
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	07d2      	lsls	r2, r2, #31
 8003c04:	d502      	bpl.n	8003c0c <_printf_float+0x194>
 8003c06:	3301      	adds	r3, #1
 8003c08:	440b      	add	r3, r1
 8003c0a:	6123      	str	r3, [r4, #16]
 8003c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c10:	f04f 0900 	mov.w	r9, #0
 8003c14:	e7d9      	b.n	8003bca <_printf_float+0x152>
 8003c16:	b913      	cbnz	r3, 8003c1e <_printf_float+0x1a6>
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	07d0      	lsls	r0, r2, #31
 8003c1c:	d501      	bpl.n	8003c22 <_printf_float+0x1aa>
 8003c1e:	3302      	adds	r3, #2
 8003c20:	e7f3      	b.n	8003c0a <_printf_float+0x192>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e7f1      	b.n	8003c0a <_printf_float+0x192>
 8003c26:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003c2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	db05      	blt.n	8003c3e <_printf_float+0x1c6>
 8003c32:	6822      	ldr	r2, [r4, #0]
 8003c34:	6123      	str	r3, [r4, #16]
 8003c36:	07d1      	lsls	r1, r2, #31
 8003c38:	d5e8      	bpl.n	8003c0c <_printf_float+0x194>
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	e7e5      	b.n	8003c0a <_printf_float+0x192>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bfd4      	ite	le
 8003c42:	f1c3 0302 	rsble	r3, r3, #2
 8003c46:	2301      	movgt	r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	e7de      	b.n	8003c0a <_printf_float+0x192>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	055a      	lsls	r2, r3, #21
 8003c50:	d407      	bmi.n	8003c62 <_printf_float+0x1ea>
 8003c52:	6923      	ldr	r3, [r4, #16]
 8003c54:	4642      	mov	r2, r8
 8003c56:	4631      	mov	r1, r6
 8003c58:	4628      	mov	r0, r5
 8003c5a:	47b8      	blx	r7
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d12b      	bne.n	8003cb8 <_printf_float+0x240>
 8003c60:	e767      	b.n	8003b32 <_printf_float+0xba>
 8003c62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003c66:	f240 80dc 	bls.w	8003e22 <_printf_float+0x3aa>
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c72:	f7fc ff31 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d033      	beq.n	8003ce2 <_printf_float+0x26a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4a41      	ldr	r2, [pc, #260]	; (8003d84 <_printf_float+0x30c>)
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4628      	mov	r0, r5
 8003c82:	47b8      	blx	r7
 8003c84:	3001      	adds	r0, #1
 8003c86:	f43f af54 	beq.w	8003b32 <_printf_float+0xba>
 8003c8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	db02      	blt.n	8003c98 <_printf_float+0x220>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	07d8      	lsls	r0, r3, #31
 8003c96:	d50f      	bpl.n	8003cb8 <_printf_float+0x240>
 8003c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c9c:	4631      	mov	r1, r6
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	47b8      	blx	r7
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f43f af45 	beq.w	8003b32 <_printf_float+0xba>
 8003ca8:	f04f 0800 	mov.w	r8, #0
 8003cac:	f104 091a 	add.w	r9, r4, #26
 8003cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	4543      	cmp	r3, r8
 8003cb6:	dc09      	bgt.n	8003ccc <_printf_float+0x254>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	079b      	lsls	r3, r3, #30
 8003cbc:	f100 8103 	bmi.w	8003ec6 <_printf_float+0x44e>
 8003cc0:	68e0      	ldr	r0, [r4, #12]
 8003cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cc4:	4298      	cmp	r0, r3
 8003cc6:	bfb8      	it	lt
 8003cc8:	4618      	movlt	r0, r3
 8003cca:	e734      	b.n	8003b36 <_printf_float+0xbe>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	464a      	mov	r2, r9
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	47b8      	blx	r7
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f43f af2b 	beq.w	8003b32 <_printf_float+0xba>
 8003cdc:	f108 0801 	add.w	r8, r8, #1
 8003ce0:	e7e6      	b.n	8003cb0 <_printf_float+0x238>
 8003ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dc2b      	bgt.n	8003d40 <_printf_float+0x2c8>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <_printf_float+0x30c>)
 8003cec:	4631      	mov	r1, r6
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b8      	blx	r7
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	f43f af1d 	beq.w	8003b32 <_printf_float+0xba>
 8003cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cfa:	b923      	cbnz	r3, 8003d06 <_printf_float+0x28e>
 8003cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cfe:	b913      	cbnz	r3, 8003d06 <_printf_float+0x28e>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	07d9      	lsls	r1, r3, #31
 8003d04:	d5d8      	bpl.n	8003cb8 <_printf_float+0x240>
 8003d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d0a:	4631      	mov	r1, r6
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	47b8      	blx	r7
 8003d10:	3001      	adds	r0, #1
 8003d12:	f43f af0e 	beq.w	8003b32 <_printf_float+0xba>
 8003d16:	f04f 0900 	mov.w	r9, #0
 8003d1a:	f104 0a1a 	add.w	sl, r4, #26
 8003d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d20:	425b      	negs	r3, r3
 8003d22:	454b      	cmp	r3, r9
 8003d24:	dc01      	bgt.n	8003d2a <_printf_float+0x2b2>
 8003d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d28:	e794      	b.n	8003c54 <_printf_float+0x1dc>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4652      	mov	r2, sl
 8003d2e:	4631      	mov	r1, r6
 8003d30:	4628      	mov	r0, r5
 8003d32:	47b8      	blx	r7
 8003d34:	3001      	adds	r0, #1
 8003d36:	f43f aefc 	beq.w	8003b32 <_printf_float+0xba>
 8003d3a:	f109 0901 	add.w	r9, r9, #1
 8003d3e:	e7ee      	b.n	8003d1e <_printf_float+0x2a6>
 8003d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d44:	429a      	cmp	r2, r3
 8003d46:	bfa8      	it	ge
 8003d48:	461a      	movge	r2, r3
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	4691      	mov	r9, r2
 8003d4e:	dd07      	ble.n	8003d60 <_printf_float+0x2e8>
 8003d50:	4613      	mov	r3, r2
 8003d52:	4631      	mov	r1, r6
 8003d54:	4642      	mov	r2, r8
 8003d56:	4628      	mov	r0, r5
 8003d58:	47b8      	blx	r7
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f43f aee9 	beq.w	8003b32 <_printf_float+0xba>
 8003d60:	f104 031a 	add.w	r3, r4, #26
 8003d64:	f04f 0b00 	mov.w	fp, #0
 8003d68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d6c:	9306      	str	r3, [sp, #24]
 8003d6e:	e015      	b.n	8003d9c <_printf_float+0x324>
 8003d70:	7fefffff 	.word	0x7fefffff
 8003d74:	080087dc 	.word	0x080087dc
 8003d78:	080087d8 	.word	0x080087d8
 8003d7c:	080087e4 	.word	0x080087e4
 8003d80:	080087e0 	.word	0x080087e0
 8003d84:	08008a03 	.word	0x08008a03
 8003d88:	2301      	movs	r3, #1
 8003d8a:	9a06      	ldr	r2, [sp, #24]
 8003d8c:	4631      	mov	r1, r6
 8003d8e:	4628      	mov	r0, r5
 8003d90:	47b8      	blx	r7
 8003d92:	3001      	adds	r0, #1
 8003d94:	f43f aecd 	beq.w	8003b32 <_printf_float+0xba>
 8003d98:	f10b 0b01 	add.w	fp, fp, #1
 8003d9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003da0:	ebaa 0309 	sub.w	r3, sl, r9
 8003da4:	455b      	cmp	r3, fp
 8003da6:	dcef      	bgt.n	8003d88 <_printf_float+0x310>
 8003da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dac:	429a      	cmp	r2, r3
 8003dae:	44d0      	add	r8, sl
 8003db0:	db15      	blt.n	8003dde <_printf_float+0x366>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	07da      	lsls	r2, r3, #31
 8003db6:	d412      	bmi.n	8003dde <_printf_float+0x366>
 8003db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dbc:	eba3 020a 	sub.w	r2, r3, sl
 8003dc0:	eba3 0a01 	sub.w	sl, r3, r1
 8003dc4:	4592      	cmp	sl, r2
 8003dc6:	bfa8      	it	ge
 8003dc8:	4692      	movge	sl, r2
 8003dca:	f1ba 0f00 	cmp.w	sl, #0
 8003dce:	dc0e      	bgt.n	8003dee <_printf_float+0x376>
 8003dd0:	f04f 0800 	mov.w	r8, #0
 8003dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003dd8:	f104 091a 	add.w	r9, r4, #26
 8003ddc:	e019      	b.n	8003e12 <_printf_float+0x39a>
 8003dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003de2:	4631      	mov	r1, r6
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b8      	blx	r7
 8003de8:	3001      	adds	r0, #1
 8003dea:	d1e5      	bne.n	8003db8 <_printf_float+0x340>
 8003dec:	e6a1      	b.n	8003b32 <_printf_float+0xba>
 8003dee:	4653      	mov	r3, sl
 8003df0:	4642      	mov	r2, r8
 8003df2:	4631      	mov	r1, r6
 8003df4:	4628      	mov	r0, r5
 8003df6:	47b8      	blx	r7
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d1e9      	bne.n	8003dd0 <_printf_float+0x358>
 8003dfc:	e699      	b.n	8003b32 <_printf_float+0xba>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	464a      	mov	r2, r9
 8003e02:	4631      	mov	r1, r6
 8003e04:	4628      	mov	r0, r5
 8003e06:	47b8      	blx	r7
 8003e08:	3001      	adds	r0, #1
 8003e0a:	f43f ae92 	beq.w	8003b32 <_printf_float+0xba>
 8003e0e:	f108 0801 	add.w	r8, r8, #1
 8003e12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	eba3 030a 	sub.w	r3, r3, sl
 8003e1c:	4543      	cmp	r3, r8
 8003e1e:	dcee      	bgt.n	8003dfe <_printf_float+0x386>
 8003e20:	e74a      	b.n	8003cb8 <_printf_float+0x240>
 8003e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e24:	2a01      	cmp	r2, #1
 8003e26:	dc01      	bgt.n	8003e2c <_printf_float+0x3b4>
 8003e28:	07db      	lsls	r3, r3, #31
 8003e2a:	d53a      	bpl.n	8003ea2 <_printf_float+0x42a>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4642      	mov	r2, r8
 8003e30:	4631      	mov	r1, r6
 8003e32:	4628      	mov	r0, r5
 8003e34:	47b8      	blx	r7
 8003e36:	3001      	adds	r0, #1
 8003e38:	f43f ae7b 	beq.w	8003b32 <_printf_float+0xba>
 8003e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e40:	4631      	mov	r1, r6
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b8      	blx	r7
 8003e46:	3001      	adds	r0, #1
 8003e48:	f108 0801 	add.w	r8, r8, #1
 8003e4c:	f43f ae71 	beq.w	8003b32 <_printf_float+0xba>
 8003e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e52:	2200      	movs	r2, #0
 8003e54:	f103 3aff 	add.w	sl, r3, #4294967295
 8003e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f7fc fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e62:	b9c8      	cbnz	r0, 8003e98 <_printf_float+0x420>
 8003e64:	4653      	mov	r3, sl
 8003e66:	4642      	mov	r2, r8
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d10e      	bne.n	8003e90 <_printf_float+0x418>
 8003e72:	e65e      	b.n	8003b32 <_printf_float+0xba>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4652      	mov	r2, sl
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	f43f ae57 	beq.w	8003b32 <_printf_float+0xba>
 8003e84:	f108 0801 	add.w	r8, r8, #1
 8003e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	4543      	cmp	r3, r8
 8003e8e:	dcf1      	bgt.n	8003e74 <_printf_float+0x3fc>
 8003e90:	464b      	mov	r3, r9
 8003e92:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e96:	e6de      	b.n	8003c56 <_printf_float+0x1de>
 8003e98:	f04f 0800 	mov.w	r8, #0
 8003e9c:	f104 0a1a 	add.w	sl, r4, #26
 8003ea0:	e7f2      	b.n	8003e88 <_printf_float+0x410>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e7df      	b.n	8003e66 <_printf_float+0x3ee>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	464a      	mov	r2, r9
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f43f ae3e 	beq.w	8003b32 <_printf_float+0xba>
 8003eb6:	f108 0801 	add.w	r8, r8, #1
 8003eba:	68e3      	ldr	r3, [r4, #12]
 8003ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	4543      	cmp	r3, r8
 8003ec2:	dcf0      	bgt.n	8003ea6 <_printf_float+0x42e>
 8003ec4:	e6fc      	b.n	8003cc0 <_printf_float+0x248>
 8003ec6:	f04f 0800 	mov.w	r8, #0
 8003eca:	f104 0919 	add.w	r9, r4, #25
 8003ece:	e7f4      	b.n	8003eba <_printf_float+0x442>
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	f43f ae8b 	beq.w	8003bec <_printf_float+0x174>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003edc:	ab09      	add	r3, sp, #36	; 0x24
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	ec49 8b10 	vmov	d0, r8, r9
 8003ee4:	6022      	str	r2, [r4, #0]
 8003ee6:	f8cd a004 	str.w	sl, [sp, #4]
 8003eea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f7ff fd2e 	bl	8003950 <__cvt>
 8003ef4:	4680      	mov	r8, r0
 8003ef6:	e648      	b.n	8003b8a <_printf_float+0x112>

08003ef8 <_printf_common>:
 8003ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003efc:	4691      	mov	r9, r2
 8003efe:	461f      	mov	r7, r3
 8003f00:	688a      	ldr	r2, [r1, #8]
 8003f02:	690b      	ldr	r3, [r1, #16]
 8003f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	bfb8      	it	lt
 8003f0c:	4613      	movlt	r3, r2
 8003f0e:	f8c9 3000 	str.w	r3, [r9]
 8003f12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f16:	4606      	mov	r6, r0
 8003f18:	460c      	mov	r4, r1
 8003f1a:	b112      	cbz	r2, 8003f22 <_printf_common+0x2a>
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f8c9 3000 	str.w	r3, [r9]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	0699      	lsls	r1, r3, #26
 8003f26:	bf42      	ittt	mi
 8003f28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f2c:	3302      	addmi	r3, #2
 8003f2e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f32:	6825      	ldr	r5, [r4, #0]
 8003f34:	f015 0506 	ands.w	r5, r5, #6
 8003f38:	d107      	bne.n	8003f4a <_printf_common+0x52>
 8003f3a:	f104 0a19 	add.w	sl, r4, #25
 8003f3e:	68e3      	ldr	r3, [r4, #12]
 8003f40:	f8d9 2000 	ldr.w	r2, [r9]
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	42ab      	cmp	r3, r5
 8003f48:	dc28      	bgt.n	8003f9c <_printf_common+0xa4>
 8003f4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	3300      	adds	r3, #0
 8003f52:	bf18      	it	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	0692      	lsls	r2, r2, #26
 8003f58:	d42d      	bmi.n	8003fb6 <_printf_common+0xbe>
 8003f5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f5e:	4639      	mov	r1, r7
 8003f60:	4630      	mov	r0, r6
 8003f62:	47c0      	blx	r8
 8003f64:	3001      	adds	r0, #1
 8003f66:	d020      	beq.n	8003faa <_printf_common+0xb2>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	68e5      	ldr	r5, [r4, #12]
 8003f6c:	f8d9 2000 	ldr.w	r2, [r9]
 8003f70:	f003 0306 	and.w	r3, r3, #6
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	bf08      	it	eq
 8003f78:	1aad      	subeq	r5, r5, r2
 8003f7a:	68a3      	ldr	r3, [r4, #8]
 8003f7c:	6922      	ldr	r2, [r4, #16]
 8003f7e:	bf0c      	ite	eq
 8003f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f84:	2500      	movne	r5, #0
 8003f86:	4293      	cmp	r3, r2
 8003f88:	bfc4      	itt	gt
 8003f8a:	1a9b      	subgt	r3, r3, r2
 8003f8c:	18ed      	addgt	r5, r5, r3
 8003f8e:	f04f 0900 	mov.w	r9, #0
 8003f92:	341a      	adds	r4, #26
 8003f94:	454d      	cmp	r5, r9
 8003f96:	d11a      	bne.n	8003fce <_printf_common+0xd6>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e008      	b.n	8003fae <_printf_common+0xb6>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4652      	mov	r2, sl
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	47c0      	blx	r8
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d103      	bne.n	8003fb2 <_printf_common+0xba>
 8003faa:	f04f 30ff 	mov.w	r0, #4294967295
 8003fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb2:	3501      	adds	r5, #1
 8003fb4:	e7c3      	b.n	8003f3e <_printf_common+0x46>
 8003fb6:	18e1      	adds	r1, r4, r3
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	2030      	movs	r0, #48	; 0x30
 8003fbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc0:	4422      	add	r2, r4
 8003fc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fca:	3302      	adds	r3, #2
 8003fcc:	e7c5      	b.n	8003f5a <_printf_common+0x62>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	47c0      	blx	r8
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d0e6      	beq.n	8003faa <_printf_common+0xb2>
 8003fdc:	f109 0901 	add.w	r9, r9, #1
 8003fe0:	e7d8      	b.n	8003f94 <_printf_common+0x9c>
	...

08003fe4 <_printf_i>:
 8003fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fe8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003fec:	460c      	mov	r4, r1
 8003fee:	7e09      	ldrb	r1, [r1, #24]
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	296e      	cmp	r1, #110	; 0x6e
 8003ff4:	4617      	mov	r7, r2
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	4698      	mov	r8, r3
 8003ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ffc:	f000 80b3 	beq.w	8004166 <_printf_i+0x182>
 8004000:	d822      	bhi.n	8004048 <_printf_i+0x64>
 8004002:	2963      	cmp	r1, #99	; 0x63
 8004004:	d036      	beq.n	8004074 <_printf_i+0x90>
 8004006:	d80a      	bhi.n	800401e <_printf_i+0x3a>
 8004008:	2900      	cmp	r1, #0
 800400a:	f000 80b9 	beq.w	8004180 <_printf_i+0x19c>
 800400e:	2958      	cmp	r1, #88	; 0x58
 8004010:	f000 8083 	beq.w	800411a <_printf_i+0x136>
 8004014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004018:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800401c:	e032      	b.n	8004084 <_printf_i+0xa0>
 800401e:	2964      	cmp	r1, #100	; 0x64
 8004020:	d001      	beq.n	8004026 <_printf_i+0x42>
 8004022:	2969      	cmp	r1, #105	; 0x69
 8004024:	d1f6      	bne.n	8004014 <_printf_i+0x30>
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	0605      	lsls	r5, r0, #24
 800402c:	f103 0104 	add.w	r1, r3, #4
 8004030:	d52a      	bpl.n	8004088 <_printf_i+0xa4>
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	da03      	bge.n	8004042 <_printf_i+0x5e>
 800403a:	222d      	movs	r2, #45	; 0x2d
 800403c:	425b      	negs	r3, r3
 800403e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004042:	486f      	ldr	r0, [pc, #444]	; (8004200 <_printf_i+0x21c>)
 8004044:	220a      	movs	r2, #10
 8004046:	e039      	b.n	80040bc <_printf_i+0xd8>
 8004048:	2973      	cmp	r1, #115	; 0x73
 800404a:	f000 809d 	beq.w	8004188 <_printf_i+0x1a4>
 800404e:	d808      	bhi.n	8004062 <_printf_i+0x7e>
 8004050:	296f      	cmp	r1, #111	; 0x6f
 8004052:	d020      	beq.n	8004096 <_printf_i+0xb2>
 8004054:	2970      	cmp	r1, #112	; 0x70
 8004056:	d1dd      	bne.n	8004014 <_printf_i+0x30>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	f043 0320 	orr.w	r3, r3, #32
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	e003      	b.n	800406a <_printf_i+0x86>
 8004062:	2975      	cmp	r1, #117	; 0x75
 8004064:	d017      	beq.n	8004096 <_printf_i+0xb2>
 8004066:	2978      	cmp	r1, #120	; 0x78
 8004068:	d1d4      	bne.n	8004014 <_printf_i+0x30>
 800406a:	2378      	movs	r3, #120	; 0x78
 800406c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004070:	4864      	ldr	r0, [pc, #400]	; (8004204 <_printf_i+0x220>)
 8004072:	e055      	b.n	8004120 <_printf_i+0x13c>
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	1d19      	adds	r1, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6011      	str	r1, [r2, #0]
 800407c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004084:	2301      	movs	r3, #1
 8004086:	e08c      	b.n	80041a2 <_printf_i+0x1be>
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6011      	str	r1, [r2, #0]
 800408c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004090:	bf18      	it	ne
 8004092:	b21b      	sxthne	r3, r3
 8004094:	e7cf      	b.n	8004036 <_printf_i+0x52>
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	6825      	ldr	r5, [r4, #0]
 800409a:	1d18      	adds	r0, r3, #4
 800409c:	6010      	str	r0, [r2, #0]
 800409e:	0628      	lsls	r0, r5, #24
 80040a0:	d501      	bpl.n	80040a6 <_printf_i+0xc2>
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	e002      	b.n	80040ac <_printf_i+0xc8>
 80040a6:	0668      	lsls	r0, r5, #25
 80040a8:	d5fb      	bpl.n	80040a2 <_printf_i+0xbe>
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	4854      	ldr	r0, [pc, #336]	; (8004200 <_printf_i+0x21c>)
 80040ae:	296f      	cmp	r1, #111	; 0x6f
 80040b0:	bf14      	ite	ne
 80040b2:	220a      	movne	r2, #10
 80040b4:	2208      	moveq	r2, #8
 80040b6:	2100      	movs	r1, #0
 80040b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040bc:	6865      	ldr	r5, [r4, #4]
 80040be:	60a5      	str	r5, [r4, #8]
 80040c0:	2d00      	cmp	r5, #0
 80040c2:	f2c0 8095 	blt.w	80041f0 <_printf_i+0x20c>
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	f021 0104 	bic.w	r1, r1, #4
 80040cc:	6021      	str	r1, [r4, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d13d      	bne.n	800414e <_printf_i+0x16a>
 80040d2:	2d00      	cmp	r5, #0
 80040d4:	f040 808e 	bne.w	80041f4 <_printf_i+0x210>
 80040d8:	4665      	mov	r5, ip
 80040da:	2a08      	cmp	r2, #8
 80040dc:	d10b      	bne.n	80040f6 <_printf_i+0x112>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	07db      	lsls	r3, r3, #31
 80040e2:	d508      	bpl.n	80040f6 <_printf_i+0x112>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	6862      	ldr	r2, [r4, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	bfde      	ittt	le
 80040ec:	2330      	movle	r3, #48	; 0x30
 80040ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040f6:	ebac 0305 	sub.w	r3, ip, r5
 80040fa:	6123      	str	r3, [r4, #16]
 80040fc:	f8cd 8000 	str.w	r8, [sp]
 8004100:	463b      	mov	r3, r7
 8004102:	aa03      	add	r2, sp, #12
 8004104:	4621      	mov	r1, r4
 8004106:	4630      	mov	r0, r6
 8004108:	f7ff fef6 	bl	8003ef8 <_printf_common>
 800410c:	3001      	adds	r0, #1
 800410e:	d14d      	bne.n	80041ac <_printf_i+0x1c8>
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	b005      	add	sp, #20
 8004116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800411a:	4839      	ldr	r0, [pc, #228]	; (8004200 <_printf_i+0x21c>)
 800411c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004120:	6813      	ldr	r3, [r2, #0]
 8004122:	6821      	ldr	r1, [r4, #0]
 8004124:	1d1d      	adds	r5, r3, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6015      	str	r5, [r2, #0]
 800412a:	060a      	lsls	r2, r1, #24
 800412c:	d50b      	bpl.n	8004146 <_printf_i+0x162>
 800412e:	07ca      	lsls	r2, r1, #31
 8004130:	bf44      	itt	mi
 8004132:	f041 0120 	orrmi.w	r1, r1, #32
 8004136:	6021      	strmi	r1, [r4, #0]
 8004138:	b91b      	cbnz	r3, 8004142 <_printf_i+0x15e>
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	f022 0220 	bic.w	r2, r2, #32
 8004140:	6022      	str	r2, [r4, #0]
 8004142:	2210      	movs	r2, #16
 8004144:	e7b7      	b.n	80040b6 <_printf_i+0xd2>
 8004146:	064d      	lsls	r5, r1, #25
 8004148:	bf48      	it	mi
 800414a:	b29b      	uxthmi	r3, r3
 800414c:	e7ef      	b.n	800412e <_printf_i+0x14a>
 800414e:	4665      	mov	r5, ip
 8004150:	fbb3 f1f2 	udiv	r1, r3, r2
 8004154:	fb02 3311 	mls	r3, r2, r1, r3
 8004158:	5cc3      	ldrb	r3, [r0, r3]
 800415a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800415e:	460b      	mov	r3, r1
 8004160:	2900      	cmp	r1, #0
 8004162:	d1f5      	bne.n	8004150 <_printf_i+0x16c>
 8004164:	e7b9      	b.n	80040da <_printf_i+0xf6>
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	6825      	ldr	r5, [r4, #0]
 800416a:	6961      	ldr	r1, [r4, #20]
 800416c:	1d18      	adds	r0, r3, #4
 800416e:	6010      	str	r0, [r2, #0]
 8004170:	0628      	lsls	r0, r5, #24
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	d501      	bpl.n	800417a <_printf_i+0x196>
 8004176:	6019      	str	r1, [r3, #0]
 8004178:	e002      	b.n	8004180 <_printf_i+0x19c>
 800417a:	066a      	lsls	r2, r5, #25
 800417c:	d5fb      	bpl.n	8004176 <_printf_i+0x192>
 800417e:	8019      	strh	r1, [r3, #0]
 8004180:	2300      	movs	r3, #0
 8004182:	6123      	str	r3, [r4, #16]
 8004184:	4665      	mov	r5, ip
 8004186:	e7b9      	b.n	80040fc <_printf_i+0x118>
 8004188:	6813      	ldr	r3, [r2, #0]
 800418a:	1d19      	adds	r1, r3, #4
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	681d      	ldr	r5, [r3, #0]
 8004190:	6862      	ldr	r2, [r4, #4]
 8004192:	2100      	movs	r1, #0
 8004194:	4628      	mov	r0, r5
 8004196:	f7fc f82b 	bl	80001f0 <memchr>
 800419a:	b108      	cbz	r0, 80041a0 <_printf_i+0x1bc>
 800419c:	1b40      	subs	r0, r0, r5
 800419e:	6060      	str	r0, [r4, #4]
 80041a0:	6863      	ldr	r3, [r4, #4]
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	2300      	movs	r3, #0
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041aa:	e7a7      	b.n	80040fc <_printf_i+0x118>
 80041ac:	6923      	ldr	r3, [r4, #16]
 80041ae:	462a      	mov	r2, r5
 80041b0:	4639      	mov	r1, r7
 80041b2:	4630      	mov	r0, r6
 80041b4:	47c0      	blx	r8
 80041b6:	3001      	adds	r0, #1
 80041b8:	d0aa      	beq.n	8004110 <_printf_i+0x12c>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	079b      	lsls	r3, r3, #30
 80041be:	d413      	bmi.n	80041e8 <_printf_i+0x204>
 80041c0:	68e0      	ldr	r0, [r4, #12]
 80041c2:	9b03      	ldr	r3, [sp, #12]
 80041c4:	4298      	cmp	r0, r3
 80041c6:	bfb8      	it	lt
 80041c8:	4618      	movlt	r0, r3
 80041ca:	e7a3      	b.n	8004114 <_printf_i+0x130>
 80041cc:	2301      	movs	r3, #1
 80041ce:	464a      	mov	r2, r9
 80041d0:	4639      	mov	r1, r7
 80041d2:	4630      	mov	r0, r6
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d09a      	beq.n	8004110 <_printf_i+0x12c>
 80041da:	3501      	adds	r5, #1
 80041dc:	68e3      	ldr	r3, [r4, #12]
 80041de:	9a03      	ldr	r2, [sp, #12]
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	42ab      	cmp	r3, r5
 80041e4:	dcf2      	bgt.n	80041cc <_printf_i+0x1e8>
 80041e6:	e7eb      	b.n	80041c0 <_printf_i+0x1dc>
 80041e8:	2500      	movs	r5, #0
 80041ea:	f104 0919 	add.w	r9, r4, #25
 80041ee:	e7f5      	b.n	80041dc <_printf_i+0x1f8>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ac      	bne.n	800414e <_printf_i+0x16a>
 80041f4:	7803      	ldrb	r3, [r0, #0]
 80041f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041fe:	e76c      	b.n	80040da <_printf_i+0xf6>
 8004200:	080087e8 	.word	0x080087e8
 8004204:	080087f9 	.word	0x080087f9

08004208 <_scanf_float>:
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	469a      	mov	sl, r3
 800420e:	688b      	ldr	r3, [r1, #8]
 8004210:	4616      	mov	r6, r2
 8004212:	1e5a      	subs	r2, r3, #1
 8004214:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004218:	b087      	sub	sp, #28
 800421a:	bf83      	ittte	hi
 800421c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004220:	189b      	addhi	r3, r3, r2
 8004222:	9301      	strhi	r3, [sp, #4]
 8004224:	2300      	movls	r3, #0
 8004226:	bf86      	itte	hi
 8004228:	f240 135d 	movwhi	r3, #349	; 0x15d
 800422c:	608b      	strhi	r3, [r1, #8]
 800422e:	9301      	strls	r3, [sp, #4]
 8004230:	680b      	ldr	r3, [r1, #0]
 8004232:	4688      	mov	r8, r1
 8004234:	f04f 0b00 	mov.w	fp, #0
 8004238:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800423c:	f848 3b1c 	str.w	r3, [r8], #28
 8004240:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004244:	4607      	mov	r7, r0
 8004246:	460c      	mov	r4, r1
 8004248:	4645      	mov	r5, r8
 800424a:	465a      	mov	r2, fp
 800424c:	46d9      	mov	r9, fp
 800424e:	f8cd b008 	str.w	fp, [sp, #8]
 8004252:	68a1      	ldr	r1, [r4, #8]
 8004254:	b181      	cbz	r1, 8004278 <_scanf_float+0x70>
 8004256:	6833      	ldr	r3, [r6, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b49      	cmp	r3, #73	; 0x49
 800425c:	d071      	beq.n	8004342 <_scanf_float+0x13a>
 800425e:	d84d      	bhi.n	80042fc <_scanf_float+0xf4>
 8004260:	2b39      	cmp	r3, #57	; 0x39
 8004262:	d840      	bhi.n	80042e6 <_scanf_float+0xde>
 8004264:	2b31      	cmp	r3, #49	; 0x31
 8004266:	f080 8088 	bcs.w	800437a <_scanf_float+0x172>
 800426a:	2b2d      	cmp	r3, #45	; 0x2d
 800426c:	f000 8090 	beq.w	8004390 <_scanf_float+0x188>
 8004270:	d815      	bhi.n	800429e <_scanf_float+0x96>
 8004272:	2b2b      	cmp	r3, #43	; 0x2b
 8004274:	f000 808c 	beq.w	8004390 <_scanf_float+0x188>
 8004278:	f1b9 0f00 	cmp.w	r9, #0
 800427c:	d003      	beq.n	8004286 <_scanf_float+0x7e>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	3a01      	subs	r2, #1
 8004288:	2a01      	cmp	r2, #1
 800428a:	f200 80ea 	bhi.w	8004462 <_scanf_float+0x25a>
 800428e:	4545      	cmp	r5, r8
 8004290:	f200 80dc 	bhi.w	800444c <_scanf_float+0x244>
 8004294:	2601      	movs	r6, #1
 8004296:	4630      	mov	r0, r6
 8004298:	b007      	add	sp, #28
 800429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429e:	2b2e      	cmp	r3, #46	; 0x2e
 80042a0:	f000 809f 	beq.w	80043e2 <_scanf_float+0x1da>
 80042a4:	2b30      	cmp	r3, #48	; 0x30
 80042a6:	d1e7      	bne.n	8004278 <_scanf_float+0x70>
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	f410 7f80 	tst.w	r0, #256	; 0x100
 80042ae:	d064      	beq.n	800437a <_scanf_float+0x172>
 80042b0:	9b01      	ldr	r3, [sp, #4]
 80042b2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80042b6:	6020      	str	r0, [r4, #0]
 80042b8:	f109 0901 	add.w	r9, r9, #1
 80042bc:	b11b      	cbz	r3, 80042c6 <_scanf_float+0xbe>
 80042be:	3b01      	subs	r3, #1
 80042c0:	3101      	adds	r1, #1
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	60a1      	str	r1, [r4, #8]
 80042c6:	68a3      	ldr	r3, [r4, #8]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	60a3      	str	r3, [r4, #8]
 80042cc:	6923      	ldr	r3, [r4, #16]
 80042ce:	3301      	adds	r3, #1
 80042d0:	6123      	str	r3, [r4, #16]
 80042d2:	6873      	ldr	r3, [r6, #4]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	6073      	str	r3, [r6, #4]
 80042da:	f340 80ac 	ble.w	8004436 <_scanf_float+0x22e>
 80042de:	6833      	ldr	r3, [r6, #0]
 80042e0:	3301      	adds	r3, #1
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	e7b5      	b.n	8004252 <_scanf_float+0x4a>
 80042e6:	2b45      	cmp	r3, #69	; 0x45
 80042e8:	f000 8085 	beq.w	80043f6 <_scanf_float+0x1ee>
 80042ec:	2b46      	cmp	r3, #70	; 0x46
 80042ee:	d06a      	beq.n	80043c6 <_scanf_float+0x1be>
 80042f0:	2b41      	cmp	r3, #65	; 0x41
 80042f2:	d1c1      	bne.n	8004278 <_scanf_float+0x70>
 80042f4:	2a01      	cmp	r2, #1
 80042f6:	d1bf      	bne.n	8004278 <_scanf_float+0x70>
 80042f8:	2202      	movs	r2, #2
 80042fa:	e046      	b.n	800438a <_scanf_float+0x182>
 80042fc:	2b65      	cmp	r3, #101	; 0x65
 80042fe:	d07a      	beq.n	80043f6 <_scanf_float+0x1ee>
 8004300:	d818      	bhi.n	8004334 <_scanf_float+0x12c>
 8004302:	2b54      	cmp	r3, #84	; 0x54
 8004304:	d066      	beq.n	80043d4 <_scanf_float+0x1cc>
 8004306:	d811      	bhi.n	800432c <_scanf_float+0x124>
 8004308:	2b4e      	cmp	r3, #78	; 0x4e
 800430a:	d1b5      	bne.n	8004278 <_scanf_float+0x70>
 800430c:	2a00      	cmp	r2, #0
 800430e:	d146      	bne.n	800439e <_scanf_float+0x196>
 8004310:	f1b9 0f00 	cmp.w	r9, #0
 8004314:	d145      	bne.n	80043a2 <_scanf_float+0x19a>
 8004316:	6821      	ldr	r1, [r4, #0]
 8004318:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800431c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004320:	d13f      	bne.n	80043a2 <_scanf_float+0x19a>
 8004322:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004326:	6021      	str	r1, [r4, #0]
 8004328:	2201      	movs	r2, #1
 800432a:	e02e      	b.n	800438a <_scanf_float+0x182>
 800432c:	2b59      	cmp	r3, #89	; 0x59
 800432e:	d01e      	beq.n	800436e <_scanf_float+0x166>
 8004330:	2b61      	cmp	r3, #97	; 0x61
 8004332:	e7de      	b.n	80042f2 <_scanf_float+0xea>
 8004334:	2b6e      	cmp	r3, #110	; 0x6e
 8004336:	d0e9      	beq.n	800430c <_scanf_float+0x104>
 8004338:	d815      	bhi.n	8004366 <_scanf_float+0x15e>
 800433a:	2b66      	cmp	r3, #102	; 0x66
 800433c:	d043      	beq.n	80043c6 <_scanf_float+0x1be>
 800433e:	2b69      	cmp	r3, #105	; 0x69
 8004340:	d19a      	bne.n	8004278 <_scanf_float+0x70>
 8004342:	f1bb 0f00 	cmp.w	fp, #0
 8004346:	d138      	bne.n	80043ba <_scanf_float+0x1b2>
 8004348:	f1b9 0f00 	cmp.w	r9, #0
 800434c:	d197      	bne.n	800427e <_scanf_float+0x76>
 800434e:	6821      	ldr	r1, [r4, #0]
 8004350:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004354:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004358:	d195      	bne.n	8004286 <_scanf_float+0x7e>
 800435a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800435e:	6021      	str	r1, [r4, #0]
 8004360:	f04f 0b01 	mov.w	fp, #1
 8004364:	e011      	b.n	800438a <_scanf_float+0x182>
 8004366:	2b74      	cmp	r3, #116	; 0x74
 8004368:	d034      	beq.n	80043d4 <_scanf_float+0x1cc>
 800436a:	2b79      	cmp	r3, #121	; 0x79
 800436c:	d184      	bne.n	8004278 <_scanf_float+0x70>
 800436e:	f1bb 0f07 	cmp.w	fp, #7
 8004372:	d181      	bne.n	8004278 <_scanf_float+0x70>
 8004374:	f04f 0b08 	mov.w	fp, #8
 8004378:	e007      	b.n	800438a <_scanf_float+0x182>
 800437a:	eb12 0f0b 	cmn.w	r2, fp
 800437e:	f47f af7b 	bne.w	8004278 <_scanf_float+0x70>
 8004382:	6821      	ldr	r1, [r4, #0]
 8004384:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004388:	6021      	str	r1, [r4, #0]
 800438a:	702b      	strb	r3, [r5, #0]
 800438c:	3501      	adds	r5, #1
 800438e:	e79a      	b.n	80042c6 <_scanf_float+0xbe>
 8004390:	6821      	ldr	r1, [r4, #0]
 8004392:	0608      	lsls	r0, r1, #24
 8004394:	f57f af70 	bpl.w	8004278 <_scanf_float+0x70>
 8004398:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800439c:	e7f4      	b.n	8004388 <_scanf_float+0x180>
 800439e:	2a02      	cmp	r2, #2
 80043a0:	d047      	beq.n	8004432 <_scanf_float+0x22a>
 80043a2:	f1bb 0f01 	cmp.w	fp, #1
 80043a6:	d003      	beq.n	80043b0 <_scanf_float+0x1a8>
 80043a8:	f1bb 0f04 	cmp.w	fp, #4
 80043ac:	f47f af64 	bne.w	8004278 <_scanf_float+0x70>
 80043b0:	f10b 0b01 	add.w	fp, fp, #1
 80043b4:	fa5f fb8b 	uxtb.w	fp, fp
 80043b8:	e7e7      	b.n	800438a <_scanf_float+0x182>
 80043ba:	f1bb 0f03 	cmp.w	fp, #3
 80043be:	d0f7      	beq.n	80043b0 <_scanf_float+0x1a8>
 80043c0:	f1bb 0f05 	cmp.w	fp, #5
 80043c4:	e7f2      	b.n	80043ac <_scanf_float+0x1a4>
 80043c6:	f1bb 0f02 	cmp.w	fp, #2
 80043ca:	f47f af55 	bne.w	8004278 <_scanf_float+0x70>
 80043ce:	f04f 0b03 	mov.w	fp, #3
 80043d2:	e7da      	b.n	800438a <_scanf_float+0x182>
 80043d4:	f1bb 0f06 	cmp.w	fp, #6
 80043d8:	f47f af4e 	bne.w	8004278 <_scanf_float+0x70>
 80043dc:	f04f 0b07 	mov.w	fp, #7
 80043e0:	e7d3      	b.n	800438a <_scanf_float+0x182>
 80043e2:	6821      	ldr	r1, [r4, #0]
 80043e4:	0588      	lsls	r0, r1, #22
 80043e6:	f57f af47 	bpl.w	8004278 <_scanf_float+0x70>
 80043ea:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80043ee:	6021      	str	r1, [r4, #0]
 80043f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80043f4:	e7c9      	b.n	800438a <_scanf_float+0x182>
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80043fc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004400:	d006      	beq.n	8004410 <_scanf_float+0x208>
 8004402:	0548      	lsls	r0, r1, #21
 8004404:	f57f af38 	bpl.w	8004278 <_scanf_float+0x70>
 8004408:	f1b9 0f00 	cmp.w	r9, #0
 800440c:	f43f af3b 	beq.w	8004286 <_scanf_float+0x7e>
 8004410:	0588      	lsls	r0, r1, #22
 8004412:	bf58      	it	pl
 8004414:	9802      	ldrpl	r0, [sp, #8]
 8004416:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800441a:	bf58      	it	pl
 800441c:	eba9 0000 	subpl.w	r0, r9, r0
 8004420:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004424:	bf58      	it	pl
 8004426:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800442a:	6021      	str	r1, [r4, #0]
 800442c:	f04f 0900 	mov.w	r9, #0
 8004430:	e7ab      	b.n	800438a <_scanf_float+0x182>
 8004432:	2203      	movs	r2, #3
 8004434:	e7a9      	b.n	800438a <_scanf_float+0x182>
 8004436:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800443a:	9205      	str	r2, [sp, #20]
 800443c:	4631      	mov	r1, r6
 800443e:	4638      	mov	r0, r7
 8004440:	4798      	blx	r3
 8004442:	9a05      	ldr	r2, [sp, #20]
 8004444:	2800      	cmp	r0, #0
 8004446:	f43f af04 	beq.w	8004252 <_scanf_float+0x4a>
 800444a:	e715      	b.n	8004278 <_scanf_float+0x70>
 800444c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004450:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004454:	4632      	mov	r2, r6
 8004456:	4638      	mov	r0, r7
 8004458:	4798      	blx	r3
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	3b01      	subs	r3, #1
 800445e:	6123      	str	r3, [r4, #16]
 8004460:	e715      	b.n	800428e <_scanf_float+0x86>
 8004462:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004466:	2b06      	cmp	r3, #6
 8004468:	d80a      	bhi.n	8004480 <_scanf_float+0x278>
 800446a:	f1bb 0f02 	cmp.w	fp, #2
 800446e:	d968      	bls.n	8004542 <_scanf_float+0x33a>
 8004470:	f1ab 0b03 	sub.w	fp, fp, #3
 8004474:	fa5f fb8b 	uxtb.w	fp, fp
 8004478:	eba5 0b0b 	sub.w	fp, r5, fp
 800447c:	455d      	cmp	r5, fp
 800447e:	d14b      	bne.n	8004518 <_scanf_float+0x310>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	05da      	lsls	r2, r3, #23
 8004484:	d51f      	bpl.n	80044c6 <_scanf_float+0x2be>
 8004486:	055b      	lsls	r3, r3, #21
 8004488:	d468      	bmi.n	800455c <_scanf_float+0x354>
 800448a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	2965      	cmp	r1, #101	; 0x65
 8004492:	f103 33ff 	add.w	r3, r3, #4294967295
 8004496:	f105 3bff 	add.w	fp, r5, #4294967295
 800449a:	6123      	str	r3, [r4, #16]
 800449c:	d00d      	beq.n	80044ba <_scanf_float+0x2b2>
 800449e:	2945      	cmp	r1, #69	; 0x45
 80044a0:	d00b      	beq.n	80044ba <_scanf_float+0x2b2>
 80044a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044a6:	4632      	mov	r2, r6
 80044a8:	4638      	mov	r0, r7
 80044aa:	4798      	blx	r3
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	f1a5 0b02 	sub.w	fp, r5, #2
 80044b8:	6123      	str	r3, [r4, #16]
 80044ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044be:	4632      	mov	r2, r6
 80044c0:	4638      	mov	r0, r7
 80044c2:	4798      	blx	r3
 80044c4:	465d      	mov	r5, fp
 80044c6:	6826      	ldr	r6, [r4, #0]
 80044c8:	f016 0610 	ands.w	r6, r6, #16
 80044cc:	d17a      	bne.n	80045c4 <_scanf_float+0x3bc>
 80044ce:	702e      	strb	r6, [r5, #0]
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044da:	d142      	bne.n	8004562 <_scanf_float+0x35a>
 80044dc:	9b02      	ldr	r3, [sp, #8]
 80044de:	eba9 0303 	sub.w	r3, r9, r3
 80044e2:	425a      	negs	r2, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d149      	bne.n	800457c <_scanf_float+0x374>
 80044e8:	2200      	movs	r2, #0
 80044ea:	4641      	mov	r1, r8
 80044ec:	4638      	mov	r0, r7
 80044ee:	f000 fed3 	bl	8005298 <_strtod_r>
 80044f2:	6825      	ldr	r5, [r4, #0]
 80044f4:	f8da 3000 	ldr.w	r3, [sl]
 80044f8:	f015 0f02 	tst.w	r5, #2
 80044fc:	f103 0204 	add.w	r2, r3, #4
 8004500:	ec59 8b10 	vmov	r8, r9, d0
 8004504:	f8ca 2000 	str.w	r2, [sl]
 8004508:	d043      	beq.n	8004592 <_scanf_float+0x38a>
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	e9c3 8900 	strd	r8, r9, [r3]
 8004510:	68e3      	ldr	r3, [r4, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60e3      	str	r3, [r4, #12]
 8004516:	e6be      	b.n	8004296 <_scanf_float+0x8e>
 8004518:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800451c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004520:	4632      	mov	r2, r6
 8004522:	4638      	mov	r0, r7
 8004524:	4798      	blx	r3
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	3b01      	subs	r3, #1
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	e7a6      	b.n	800447c <_scanf_float+0x274>
 800452e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004532:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004536:	4632      	mov	r2, r6
 8004538:	4638      	mov	r0, r7
 800453a:	4798      	blx	r3
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	3b01      	subs	r3, #1
 8004540:	6123      	str	r3, [r4, #16]
 8004542:	4545      	cmp	r5, r8
 8004544:	d8f3      	bhi.n	800452e <_scanf_float+0x326>
 8004546:	e6a5      	b.n	8004294 <_scanf_float+0x8c>
 8004548:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800454c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004550:	4632      	mov	r2, r6
 8004552:	4638      	mov	r0, r7
 8004554:	4798      	blx	r3
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	3b01      	subs	r3, #1
 800455a:	6123      	str	r3, [r4, #16]
 800455c:	4545      	cmp	r5, r8
 800455e:	d8f3      	bhi.n	8004548 <_scanf_float+0x340>
 8004560:	e698      	b.n	8004294 <_scanf_float+0x8c>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0bf      	beq.n	80044e8 <_scanf_float+0x2e0>
 8004568:	9904      	ldr	r1, [sp, #16]
 800456a:	230a      	movs	r3, #10
 800456c:	4632      	mov	r2, r6
 800456e:	3101      	adds	r1, #1
 8004570:	4638      	mov	r0, r7
 8004572:	f000 ff1d 	bl	80053b0 <_strtol_r>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	9d04      	ldr	r5, [sp, #16]
 800457a:	1ac2      	subs	r2, r0, r3
 800457c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004580:	429d      	cmp	r5, r3
 8004582:	bf28      	it	cs
 8004584:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004588:	490f      	ldr	r1, [pc, #60]	; (80045c8 <_scanf_float+0x3c0>)
 800458a:	4628      	mov	r0, r5
 800458c:	f000 f854 	bl	8004638 <siprintf>
 8004590:	e7aa      	b.n	80044e8 <_scanf_float+0x2e0>
 8004592:	f015 0504 	ands.w	r5, r5, #4
 8004596:	d1b8      	bne.n	800450a <_scanf_float+0x302>
 8004598:	681f      	ldr	r7, [r3, #0]
 800459a:	ee10 2a10 	vmov	r2, s0
 800459e:	464b      	mov	r3, r9
 80045a0:	ee10 0a10 	vmov	r0, s0
 80045a4:	4649      	mov	r1, r9
 80045a6:	f7fc fac9 	bl	8000b3c <__aeabi_dcmpun>
 80045aa:	b128      	cbz	r0, 80045b8 <_scanf_float+0x3b0>
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f83d 	bl	800462c <nanf>
 80045b2:	ed87 0a00 	vstr	s0, [r7]
 80045b6:	e7ab      	b.n	8004510 <_scanf_float+0x308>
 80045b8:	4640      	mov	r0, r8
 80045ba:	4649      	mov	r1, r9
 80045bc:	f7fc fb1c 	bl	8000bf8 <__aeabi_d2f>
 80045c0:	6038      	str	r0, [r7, #0]
 80045c2:	e7a5      	b.n	8004510 <_scanf_float+0x308>
 80045c4:	2600      	movs	r6, #0
 80045c6:	e666      	b.n	8004296 <_scanf_float+0x8e>
 80045c8:	0800880a 	.word	0x0800880a

080045cc <iprintf>:
 80045cc:	b40f      	push	{r0, r1, r2, r3}
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <iprintf+0x2c>)
 80045d0:	b513      	push	{r0, r1, r4, lr}
 80045d2:	681c      	ldr	r4, [r3, #0]
 80045d4:	b124      	cbz	r4, 80045e0 <iprintf+0x14>
 80045d6:	69a3      	ldr	r3, [r4, #24]
 80045d8:	b913      	cbnz	r3, 80045e0 <iprintf+0x14>
 80045da:	4620      	mov	r0, r4
 80045dc:	f001 fd80 	bl	80060e0 <__sinit>
 80045e0:	ab05      	add	r3, sp, #20
 80045e2:	9a04      	ldr	r2, [sp, #16]
 80045e4:	68a1      	ldr	r1, [r4, #8]
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	4620      	mov	r0, r4
 80045ea:	f002 ffbd 	bl	8007568 <_vfiprintf_r>
 80045ee:	b002      	add	sp, #8
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f4:	b004      	add	sp, #16
 80045f6:	4770      	bx	lr
 80045f8:	2000000c 	.word	0x2000000c

080045fc <iscanf>:
 80045fc:	b40f      	push	{r0, r1, r2, r3}
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <iscanf+0x2c>)
 8004600:	b513      	push	{r0, r1, r4, lr}
 8004602:	681c      	ldr	r4, [r3, #0]
 8004604:	b124      	cbz	r4, 8004610 <iscanf+0x14>
 8004606:	69a3      	ldr	r3, [r4, #24]
 8004608:	b913      	cbnz	r3, 8004610 <iscanf+0x14>
 800460a:	4620      	mov	r0, r4
 800460c:	f001 fd68 	bl	80060e0 <__sinit>
 8004610:	ab05      	add	r3, sp, #20
 8004612:	9a04      	ldr	r2, [sp, #16]
 8004614:	6861      	ldr	r1, [r4, #4]
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	4620      	mov	r0, r4
 800461a:	f003 fa0b 	bl	8007a34 <_vfiscanf_r>
 800461e:	b002      	add	sp, #8
 8004620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004624:	b004      	add	sp, #16
 8004626:	4770      	bx	lr
 8004628:	2000000c 	.word	0x2000000c

0800462c <nanf>:
 800462c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004634 <nanf+0x8>
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	7fc00000 	.word	0x7fc00000

08004638 <siprintf>:
 8004638:	b40e      	push	{r1, r2, r3}
 800463a:	b500      	push	{lr}
 800463c:	b09c      	sub	sp, #112	; 0x70
 800463e:	ab1d      	add	r3, sp, #116	; 0x74
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004648:	4809      	ldr	r0, [pc, #36]	; (8004670 <siprintf+0x38>)
 800464a:	9107      	str	r1, [sp, #28]
 800464c:	9104      	str	r1, [sp, #16]
 800464e:	4909      	ldr	r1, [pc, #36]	; (8004674 <siprintf+0x3c>)
 8004650:	f853 2b04 	ldr.w	r2, [r3], #4
 8004654:	9105      	str	r1, [sp, #20]
 8004656:	6800      	ldr	r0, [r0, #0]
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	a902      	add	r1, sp, #8
 800465c:	f002 fe62 	bl	8007324 <_svfiprintf_r>
 8004660:	9b02      	ldr	r3, [sp, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	b01c      	add	sp, #112	; 0x70
 8004668:	f85d eb04 	ldr.w	lr, [sp], #4
 800466c:	b003      	add	sp, #12
 800466e:	4770      	bx	lr
 8004670:	2000000c 	.word	0x2000000c
 8004674:	ffff0208 	.word	0xffff0208

08004678 <sulp>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4604      	mov	r4, r0
 800467c:	460d      	mov	r5, r1
 800467e:	ec45 4b10 	vmov	d0, r4, r5
 8004682:	4616      	mov	r6, r2
 8004684:	f002 fc0a 	bl	8006e9c <__ulp>
 8004688:	ec51 0b10 	vmov	r0, r1, d0
 800468c:	b17e      	cbz	r6, 80046ae <sulp+0x36>
 800468e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004692:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004696:	2b00      	cmp	r3, #0
 8004698:	dd09      	ble.n	80046ae <sulp+0x36>
 800469a:	051b      	lsls	r3, r3, #20
 800469c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80046a0:	2400      	movs	r4, #0
 80046a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80046a6:	4622      	mov	r2, r4
 80046a8:	462b      	mov	r3, r5
 80046aa:	f7fb ffad 	bl	8000608 <__aeabi_dmul>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}

080046b0 <_strtod_l>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	461f      	mov	r7, r3
 80046b6:	b0a1      	sub	sp, #132	; 0x84
 80046b8:	2300      	movs	r3, #0
 80046ba:	4681      	mov	r9, r0
 80046bc:	4638      	mov	r0, r7
 80046be:	460e      	mov	r6, r1
 80046c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80046c2:	931c      	str	r3, [sp, #112]	; 0x70
 80046c4:	f002 f8ea 	bl	800689c <__localeconv_l>
 80046c8:	4680      	mov	r8, r0
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	f7fb fd88 	bl	80001e0 <strlen>
 80046d0:	f04f 0a00 	mov.w	sl, #0
 80046d4:	4604      	mov	r4, r0
 80046d6:	f04f 0b00 	mov.w	fp, #0
 80046da:	961b      	str	r6, [sp, #108]	; 0x6c
 80046dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	2a0d      	cmp	r2, #13
 80046e2:	d832      	bhi.n	800474a <_strtod_l+0x9a>
 80046e4:	2a09      	cmp	r2, #9
 80046e6:	d236      	bcs.n	8004756 <_strtod_l+0xa6>
 80046e8:	2a00      	cmp	r2, #0
 80046ea:	d03e      	beq.n	800476a <_strtod_l+0xba>
 80046ec:	2300      	movs	r3, #0
 80046ee:	930d      	str	r3, [sp, #52]	; 0x34
 80046f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80046f2:	782b      	ldrb	r3, [r5, #0]
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	f040 80ac 	bne.w	8004852 <_strtod_l+0x1a2>
 80046fa:	786b      	ldrb	r3, [r5, #1]
 80046fc:	2b58      	cmp	r3, #88	; 0x58
 80046fe:	d001      	beq.n	8004704 <_strtod_l+0x54>
 8004700:	2b78      	cmp	r3, #120	; 0x78
 8004702:	d167      	bne.n	80047d4 <_strtod_l+0x124>
 8004704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	ab1c      	add	r3, sp, #112	; 0x70
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	9702      	str	r7, [sp, #8]
 800470e:	ab1d      	add	r3, sp, #116	; 0x74
 8004710:	4a88      	ldr	r2, [pc, #544]	; (8004934 <_strtod_l+0x284>)
 8004712:	a91b      	add	r1, sp, #108	; 0x6c
 8004714:	4648      	mov	r0, r9
 8004716:	f001 fdd8 	bl	80062ca <__gethex>
 800471a:	f010 0407 	ands.w	r4, r0, #7
 800471e:	4606      	mov	r6, r0
 8004720:	d005      	beq.n	800472e <_strtod_l+0x7e>
 8004722:	2c06      	cmp	r4, #6
 8004724:	d12b      	bne.n	800477e <_strtod_l+0xce>
 8004726:	3501      	adds	r5, #1
 8004728:	2300      	movs	r3, #0
 800472a:	951b      	str	r5, [sp, #108]	; 0x6c
 800472c:	930d      	str	r3, [sp, #52]	; 0x34
 800472e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 859a 	bne.w	800526a <_strtod_l+0xbba>
 8004736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004738:	b1e3      	cbz	r3, 8004774 <_strtod_l+0xc4>
 800473a:	4652      	mov	r2, sl
 800473c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004740:	ec43 2b10 	vmov	d0, r2, r3
 8004744:	b021      	add	sp, #132	; 0x84
 8004746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474a:	2a2b      	cmp	r2, #43	; 0x2b
 800474c:	d015      	beq.n	800477a <_strtod_l+0xca>
 800474e:	2a2d      	cmp	r2, #45	; 0x2d
 8004750:	d004      	beq.n	800475c <_strtod_l+0xac>
 8004752:	2a20      	cmp	r2, #32
 8004754:	d1ca      	bne.n	80046ec <_strtod_l+0x3c>
 8004756:	3301      	adds	r3, #1
 8004758:	931b      	str	r3, [sp, #108]	; 0x6c
 800475a:	e7bf      	b.n	80046dc <_strtod_l+0x2c>
 800475c:	2201      	movs	r2, #1
 800475e:	920d      	str	r2, [sp, #52]	; 0x34
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	921b      	str	r2, [sp, #108]	; 0x6c
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1c2      	bne.n	80046f0 <_strtod_l+0x40>
 800476a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800476c:	961b      	str	r6, [sp, #108]	; 0x6c
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 8579 	bne.w	8005266 <_strtod_l+0xbb6>
 8004774:	4652      	mov	r2, sl
 8004776:	465b      	mov	r3, fp
 8004778:	e7e2      	b.n	8004740 <_strtod_l+0x90>
 800477a:	2200      	movs	r2, #0
 800477c:	e7ef      	b.n	800475e <_strtod_l+0xae>
 800477e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004780:	b13a      	cbz	r2, 8004792 <_strtod_l+0xe2>
 8004782:	2135      	movs	r1, #53	; 0x35
 8004784:	a81e      	add	r0, sp, #120	; 0x78
 8004786:	f002 fc81 	bl	800708c <__copybits>
 800478a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800478c:	4648      	mov	r0, r9
 800478e:	f002 f8ee 	bl	800696e <_Bfree>
 8004792:	3c01      	subs	r4, #1
 8004794:	2c04      	cmp	r4, #4
 8004796:	d806      	bhi.n	80047a6 <_strtod_l+0xf6>
 8004798:	e8df f004 	tbb	[pc, r4]
 800479c:	1714030a 	.word	0x1714030a
 80047a0:	0a          	.byte	0x0a
 80047a1:	00          	.byte	0x00
 80047a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80047a6:	0730      	lsls	r0, r6, #28
 80047a8:	d5c1      	bpl.n	800472e <_strtod_l+0x7e>
 80047aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80047ae:	e7be      	b.n	800472e <_strtod_l+0x7e>
 80047b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80047b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80047b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80047be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80047c2:	e7f0      	b.n	80047a6 <_strtod_l+0xf6>
 80047c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004938 <_strtod_l+0x288>
 80047c8:	e7ed      	b.n	80047a6 <_strtod_l+0xf6>
 80047ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80047ce:	f04f 3aff 	mov.w	sl, #4294967295
 80047d2:	e7e8      	b.n	80047a6 <_strtod_l+0xf6>
 80047d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b30      	cmp	r3, #48	; 0x30
 80047de:	d0f9      	beq.n	80047d4 <_strtod_l+0x124>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0a4      	beq.n	800472e <_strtod_l+0x7e>
 80047e4:	2301      	movs	r3, #1
 80047e6:	2500      	movs	r5, #0
 80047e8:	9306      	str	r3, [sp, #24]
 80047ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047ec:	9308      	str	r3, [sp, #32]
 80047ee:	9507      	str	r5, [sp, #28]
 80047f0:	9505      	str	r5, [sp, #20]
 80047f2:	220a      	movs	r2, #10
 80047f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80047f6:	7807      	ldrb	r7, [r0, #0]
 80047f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80047fc:	b2d9      	uxtb	r1, r3
 80047fe:	2909      	cmp	r1, #9
 8004800:	d929      	bls.n	8004856 <_strtod_l+0x1a6>
 8004802:	4622      	mov	r2, r4
 8004804:	f8d8 1000 	ldr.w	r1, [r8]
 8004808:	f003 fbaf 	bl	8007f6a <strncmp>
 800480c:	2800      	cmp	r0, #0
 800480e:	d031      	beq.n	8004874 <_strtod_l+0x1c4>
 8004810:	2000      	movs	r0, #0
 8004812:	9c05      	ldr	r4, [sp, #20]
 8004814:	9004      	str	r0, [sp, #16]
 8004816:	463b      	mov	r3, r7
 8004818:	4602      	mov	r2, r0
 800481a:	2b65      	cmp	r3, #101	; 0x65
 800481c:	d001      	beq.n	8004822 <_strtod_l+0x172>
 800481e:	2b45      	cmp	r3, #69	; 0x45
 8004820:	d114      	bne.n	800484c <_strtod_l+0x19c>
 8004822:	b924      	cbnz	r4, 800482e <_strtod_l+0x17e>
 8004824:	b910      	cbnz	r0, 800482c <_strtod_l+0x17c>
 8004826:	9b06      	ldr	r3, [sp, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d09e      	beq.n	800476a <_strtod_l+0xba>
 800482c:	2400      	movs	r4, #0
 800482e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004830:	1c73      	adds	r3, r6, #1
 8004832:	931b      	str	r3, [sp, #108]	; 0x6c
 8004834:	7873      	ldrb	r3, [r6, #1]
 8004836:	2b2b      	cmp	r3, #43	; 0x2b
 8004838:	d078      	beq.n	800492c <_strtod_l+0x27c>
 800483a:	2b2d      	cmp	r3, #45	; 0x2d
 800483c:	d070      	beq.n	8004920 <_strtod_l+0x270>
 800483e:	f04f 0c00 	mov.w	ip, #0
 8004842:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004846:	2f09      	cmp	r7, #9
 8004848:	d97c      	bls.n	8004944 <_strtod_l+0x294>
 800484a:	961b      	str	r6, [sp, #108]	; 0x6c
 800484c:	f04f 0e00 	mov.w	lr, #0
 8004850:	e09a      	b.n	8004988 <_strtod_l+0x2d8>
 8004852:	2300      	movs	r3, #0
 8004854:	e7c7      	b.n	80047e6 <_strtod_l+0x136>
 8004856:	9905      	ldr	r1, [sp, #20]
 8004858:	2908      	cmp	r1, #8
 800485a:	bfdd      	ittte	le
 800485c:	9907      	ldrle	r1, [sp, #28]
 800485e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004862:	9307      	strle	r3, [sp, #28]
 8004864:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004868:	9b05      	ldr	r3, [sp, #20]
 800486a:	3001      	adds	r0, #1
 800486c:	3301      	adds	r3, #1
 800486e:	9305      	str	r3, [sp, #20]
 8004870:	901b      	str	r0, [sp, #108]	; 0x6c
 8004872:	e7bf      	b.n	80047f4 <_strtod_l+0x144>
 8004874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004876:	191a      	adds	r2, r3, r4
 8004878:	921b      	str	r2, [sp, #108]	; 0x6c
 800487a:	9a05      	ldr	r2, [sp, #20]
 800487c:	5d1b      	ldrb	r3, [r3, r4]
 800487e:	2a00      	cmp	r2, #0
 8004880:	d037      	beq.n	80048f2 <_strtod_l+0x242>
 8004882:	9c05      	ldr	r4, [sp, #20]
 8004884:	4602      	mov	r2, r0
 8004886:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800488a:	2909      	cmp	r1, #9
 800488c:	d913      	bls.n	80048b6 <_strtod_l+0x206>
 800488e:	2101      	movs	r1, #1
 8004890:	9104      	str	r1, [sp, #16]
 8004892:	e7c2      	b.n	800481a <_strtod_l+0x16a>
 8004894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	921b      	str	r2, [sp, #108]	; 0x6c
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	3001      	adds	r0, #1
 800489e:	2b30      	cmp	r3, #48	; 0x30
 80048a0:	d0f8      	beq.n	8004894 <_strtod_l+0x1e4>
 80048a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80048a6:	2a08      	cmp	r2, #8
 80048a8:	f200 84e4 	bhi.w	8005274 <_strtod_l+0xbc4>
 80048ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80048ae:	9208      	str	r2, [sp, #32]
 80048b0:	4602      	mov	r2, r0
 80048b2:	2000      	movs	r0, #0
 80048b4:	4604      	mov	r4, r0
 80048b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80048ba:	f100 0101 	add.w	r1, r0, #1
 80048be:	d012      	beq.n	80048e6 <_strtod_l+0x236>
 80048c0:	440a      	add	r2, r1
 80048c2:	eb00 0c04 	add.w	ip, r0, r4
 80048c6:	4621      	mov	r1, r4
 80048c8:	270a      	movs	r7, #10
 80048ca:	458c      	cmp	ip, r1
 80048cc:	d113      	bne.n	80048f6 <_strtod_l+0x246>
 80048ce:	1821      	adds	r1, r4, r0
 80048d0:	2908      	cmp	r1, #8
 80048d2:	f104 0401 	add.w	r4, r4, #1
 80048d6:	4404      	add	r4, r0
 80048d8:	dc19      	bgt.n	800490e <_strtod_l+0x25e>
 80048da:	9b07      	ldr	r3, [sp, #28]
 80048dc:	210a      	movs	r1, #10
 80048de:	fb01 e303 	mla	r3, r1, r3, lr
 80048e2:	9307      	str	r3, [sp, #28]
 80048e4:	2100      	movs	r1, #0
 80048e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048e8:	1c58      	adds	r0, r3, #1
 80048ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	4608      	mov	r0, r1
 80048f0:	e7c9      	b.n	8004886 <_strtod_l+0x1d6>
 80048f2:	9805      	ldr	r0, [sp, #20]
 80048f4:	e7d3      	b.n	800489e <_strtod_l+0x1ee>
 80048f6:	2908      	cmp	r1, #8
 80048f8:	f101 0101 	add.w	r1, r1, #1
 80048fc:	dc03      	bgt.n	8004906 <_strtod_l+0x256>
 80048fe:	9b07      	ldr	r3, [sp, #28]
 8004900:	437b      	muls	r3, r7
 8004902:	9307      	str	r3, [sp, #28]
 8004904:	e7e1      	b.n	80048ca <_strtod_l+0x21a>
 8004906:	2910      	cmp	r1, #16
 8004908:	bfd8      	it	le
 800490a:	437d      	mulle	r5, r7
 800490c:	e7dd      	b.n	80048ca <_strtod_l+0x21a>
 800490e:	2c10      	cmp	r4, #16
 8004910:	bfdc      	itt	le
 8004912:	210a      	movle	r1, #10
 8004914:	fb01 e505 	mlale	r5, r1, r5, lr
 8004918:	e7e4      	b.n	80048e4 <_strtod_l+0x234>
 800491a:	2301      	movs	r3, #1
 800491c:	9304      	str	r3, [sp, #16]
 800491e:	e781      	b.n	8004824 <_strtod_l+0x174>
 8004920:	f04f 0c01 	mov.w	ip, #1
 8004924:	1cb3      	adds	r3, r6, #2
 8004926:	931b      	str	r3, [sp, #108]	; 0x6c
 8004928:	78b3      	ldrb	r3, [r6, #2]
 800492a:	e78a      	b.n	8004842 <_strtod_l+0x192>
 800492c:	f04f 0c00 	mov.w	ip, #0
 8004930:	e7f8      	b.n	8004924 <_strtod_l+0x274>
 8004932:	bf00      	nop
 8004934:	08008810 	.word	0x08008810
 8004938:	7ff00000 	.word	0x7ff00000
 800493c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800493e:	1c5f      	adds	r7, r3, #1
 8004940:	971b      	str	r7, [sp, #108]	; 0x6c
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	2b30      	cmp	r3, #48	; 0x30
 8004946:	d0f9      	beq.n	800493c <_strtod_l+0x28c>
 8004948:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800494c:	2f08      	cmp	r7, #8
 800494e:	f63f af7d 	bhi.w	800484c <_strtod_l+0x19c>
 8004952:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004958:	930a      	str	r3, [sp, #40]	; 0x28
 800495a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800495c:	1c5f      	adds	r7, r3, #1
 800495e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004966:	f1b8 0f09 	cmp.w	r8, #9
 800496a:	d937      	bls.n	80049dc <_strtod_l+0x32c>
 800496c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800496e:	1a7f      	subs	r7, r7, r1
 8004970:	2f08      	cmp	r7, #8
 8004972:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004976:	dc37      	bgt.n	80049e8 <_strtod_l+0x338>
 8004978:	45be      	cmp	lr, r7
 800497a:	bfa8      	it	ge
 800497c:	46be      	movge	lr, r7
 800497e:	f1bc 0f00 	cmp.w	ip, #0
 8004982:	d001      	beq.n	8004988 <_strtod_l+0x2d8>
 8004984:	f1ce 0e00 	rsb	lr, lr, #0
 8004988:	2c00      	cmp	r4, #0
 800498a:	d151      	bne.n	8004a30 <_strtod_l+0x380>
 800498c:	2800      	cmp	r0, #0
 800498e:	f47f aece 	bne.w	800472e <_strtod_l+0x7e>
 8004992:	9a06      	ldr	r2, [sp, #24]
 8004994:	2a00      	cmp	r2, #0
 8004996:	f47f aeca 	bne.w	800472e <_strtod_l+0x7e>
 800499a:	9a04      	ldr	r2, [sp, #16]
 800499c:	2a00      	cmp	r2, #0
 800499e:	f47f aee4 	bne.w	800476a <_strtod_l+0xba>
 80049a2:	2b4e      	cmp	r3, #78	; 0x4e
 80049a4:	d027      	beq.n	80049f6 <_strtod_l+0x346>
 80049a6:	dc21      	bgt.n	80049ec <_strtod_l+0x33c>
 80049a8:	2b49      	cmp	r3, #73	; 0x49
 80049aa:	f47f aede 	bne.w	800476a <_strtod_l+0xba>
 80049ae:	49a0      	ldr	r1, [pc, #640]	; (8004c30 <_strtod_l+0x580>)
 80049b0:	a81b      	add	r0, sp, #108	; 0x6c
 80049b2:	f001 febd 	bl	8006730 <__match>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f43f aed7 	beq.w	800476a <_strtod_l+0xba>
 80049bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049be:	499d      	ldr	r1, [pc, #628]	; (8004c34 <_strtod_l+0x584>)
 80049c0:	3b01      	subs	r3, #1
 80049c2:	a81b      	add	r0, sp, #108	; 0x6c
 80049c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80049c6:	f001 feb3 	bl	8006730 <__match>
 80049ca:	b910      	cbnz	r0, 80049d2 <_strtod_l+0x322>
 80049cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049ce:	3301      	adds	r3, #1
 80049d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80049d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004c48 <_strtod_l+0x598>
 80049d6:	f04f 0a00 	mov.w	sl, #0
 80049da:	e6a8      	b.n	800472e <_strtod_l+0x7e>
 80049dc:	210a      	movs	r1, #10
 80049de:	fb01 3e0e 	mla	lr, r1, lr, r3
 80049e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80049e6:	e7b8      	b.n	800495a <_strtod_l+0x2aa>
 80049e8:	46be      	mov	lr, r7
 80049ea:	e7c8      	b.n	800497e <_strtod_l+0x2ce>
 80049ec:	2b69      	cmp	r3, #105	; 0x69
 80049ee:	d0de      	beq.n	80049ae <_strtod_l+0x2fe>
 80049f0:	2b6e      	cmp	r3, #110	; 0x6e
 80049f2:	f47f aeba 	bne.w	800476a <_strtod_l+0xba>
 80049f6:	4990      	ldr	r1, [pc, #576]	; (8004c38 <_strtod_l+0x588>)
 80049f8:	a81b      	add	r0, sp, #108	; 0x6c
 80049fa:	f001 fe99 	bl	8006730 <__match>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f43f aeb3 	beq.w	800476a <_strtod_l+0xba>
 8004a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b28      	cmp	r3, #40	; 0x28
 8004a0a:	d10e      	bne.n	8004a2a <_strtod_l+0x37a>
 8004a0c:	aa1e      	add	r2, sp, #120	; 0x78
 8004a0e:	498b      	ldr	r1, [pc, #556]	; (8004c3c <_strtod_l+0x58c>)
 8004a10:	a81b      	add	r0, sp, #108	; 0x6c
 8004a12:	f001 fea1 	bl	8006758 <__hexnan>
 8004a16:	2805      	cmp	r0, #5
 8004a18:	d107      	bne.n	8004a2a <_strtod_l+0x37a>
 8004a1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004a1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004a20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004a24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004a28:	e681      	b.n	800472e <_strtod_l+0x7e>
 8004a2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004c50 <_strtod_l+0x5a0>
 8004a2e:	e7d2      	b.n	80049d6 <_strtod_l+0x326>
 8004a30:	ebae 0302 	sub.w	r3, lr, r2
 8004a34:	9306      	str	r3, [sp, #24]
 8004a36:	9b05      	ldr	r3, [sp, #20]
 8004a38:	9807      	ldr	r0, [sp, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf08      	it	eq
 8004a3e:	4623      	moveq	r3, r4
 8004a40:	2c10      	cmp	r4, #16
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	46a0      	mov	r8, r4
 8004a46:	bfa8      	it	ge
 8004a48:	f04f 0810 	movge.w	r8, #16
 8004a4c:	f7fb fd62 	bl	8000514 <__aeabi_ui2d>
 8004a50:	2c09      	cmp	r4, #9
 8004a52:	4682      	mov	sl, r0
 8004a54:	468b      	mov	fp, r1
 8004a56:	dc13      	bgt.n	8004a80 <_strtod_l+0x3d0>
 8004a58:	9b06      	ldr	r3, [sp, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f43f ae67 	beq.w	800472e <_strtod_l+0x7e>
 8004a60:	9b06      	ldr	r3, [sp, #24]
 8004a62:	dd7a      	ble.n	8004b5a <_strtod_l+0x4aa>
 8004a64:	2b16      	cmp	r3, #22
 8004a66:	dc61      	bgt.n	8004b2c <_strtod_l+0x47c>
 8004a68:	4a75      	ldr	r2, [pc, #468]	; (8004c40 <_strtod_l+0x590>)
 8004a6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004a6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8004a72:	4652      	mov	r2, sl
 8004a74:	465b      	mov	r3, fp
 8004a76:	f7fb fdc7 	bl	8000608 <__aeabi_dmul>
 8004a7a:	4682      	mov	sl, r0
 8004a7c:	468b      	mov	fp, r1
 8004a7e:	e656      	b.n	800472e <_strtod_l+0x7e>
 8004a80:	4b6f      	ldr	r3, [pc, #444]	; (8004c40 <_strtod_l+0x590>)
 8004a82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004a86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004a8a:	f7fb fdbd 	bl	8000608 <__aeabi_dmul>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	4628      	mov	r0, r5
 8004a92:	460f      	mov	r7, r1
 8004a94:	f7fb fd3e 	bl	8000514 <__aeabi_ui2d>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	f7fb fbfc 	bl	800029c <__adddf3>
 8004aa4:	2c0f      	cmp	r4, #15
 8004aa6:	4682      	mov	sl, r0
 8004aa8:	468b      	mov	fp, r1
 8004aaa:	ddd5      	ble.n	8004a58 <_strtod_l+0x3a8>
 8004aac:	9b06      	ldr	r3, [sp, #24]
 8004aae:	eba4 0808 	sub.w	r8, r4, r8
 8004ab2:	4498      	add	r8, r3
 8004ab4:	f1b8 0f00 	cmp.w	r8, #0
 8004ab8:	f340 8096 	ble.w	8004be8 <_strtod_l+0x538>
 8004abc:	f018 030f 	ands.w	r3, r8, #15
 8004ac0:	d00a      	beq.n	8004ad8 <_strtod_l+0x428>
 8004ac2:	495f      	ldr	r1, [pc, #380]	; (8004c40 <_strtod_l+0x590>)
 8004ac4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ac8:	4652      	mov	r2, sl
 8004aca:	465b      	mov	r3, fp
 8004acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ad0:	f7fb fd9a 	bl	8000608 <__aeabi_dmul>
 8004ad4:	4682      	mov	sl, r0
 8004ad6:	468b      	mov	fp, r1
 8004ad8:	f038 080f 	bics.w	r8, r8, #15
 8004adc:	d073      	beq.n	8004bc6 <_strtod_l+0x516>
 8004ade:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004ae2:	dd47      	ble.n	8004b74 <_strtod_l+0x4c4>
 8004ae4:	2400      	movs	r4, #0
 8004ae6:	46a0      	mov	r8, r4
 8004ae8:	9407      	str	r4, [sp, #28]
 8004aea:	9405      	str	r4, [sp, #20]
 8004aec:	2322      	movs	r3, #34	; 0x22
 8004aee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004c48 <_strtod_l+0x598>
 8004af2:	f8c9 3000 	str.w	r3, [r9]
 8004af6:	f04f 0a00 	mov.w	sl, #0
 8004afa:	9b07      	ldr	r3, [sp, #28]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f43f ae16 	beq.w	800472e <_strtod_l+0x7e>
 8004b02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b04:	4648      	mov	r0, r9
 8004b06:	f001 ff32 	bl	800696e <_Bfree>
 8004b0a:	9905      	ldr	r1, [sp, #20]
 8004b0c:	4648      	mov	r0, r9
 8004b0e:	f001 ff2e 	bl	800696e <_Bfree>
 8004b12:	4641      	mov	r1, r8
 8004b14:	4648      	mov	r0, r9
 8004b16:	f001 ff2a 	bl	800696e <_Bfree>
 8004b1a:	9907      	ldr	r1, [sp, #28]
 8004b1c:	4648      	mov	r0, r9
 8004b1e:	f001 ff26 	bl	800696e <_Bfree>
 8004b22:	4621      	mov	r1, r4
 8004b24:	4648      	mov	r0, r9
 8004b26:	f001 ff22 	bl	800696e <_Bfree>
 8004b2a:	e600      	b.n	800472e <_strtod_l+0x7e>
 8004b2c:	9a06      	ldr	r2, [sp, #24]
 8004b2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004b32:	4293      	cmp	r3, r2
 8004b34:	dbba      	blt.n	8004aac <_strtod_l+0x3fc>
 8004b36:	4d42      	ldr	r5, [pc, #264]	; (8004c40 <_strtod_l+0x590>)
 8004b38:	f1c4 040f 	rsb	r4, r4, #15
 8004b3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004b40:	4652      	mov	r2, sl
 8004b42:	465b      	mov	r3, fp
 8004b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b48:	f7fb fd5e 	bl	8000608 <__aeabi_dmul>
 8004b4c:	9b06      	ldr	r3, [sp, #24]
 8004b4e:	1b1c      	subs	r4, r3, r4
 8004b50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004b54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b58:	e78d      	b.n	8004a76 <_strtod_l+0x3c6>
 8004b5a:	f113 0f16 	cmn.w	r3, #22
 8004b5e:	dba5      	blt.n	8004aac <_strtod_l+0x3fc>
 8004b60:	4a37      	ldr	r2, [pc, #220]	; (8004c40 <_strtod_l+0x590>)
 8004b62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004b66:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	4659      	mov	r1, fp
 8004b6e:	f7fb fe75 	bl	800085c <__aeabi_ddiv>
 8004b72:	e782      	b.n	8004a7a <_strtod_l+0x3ca>
 8004b74:	2300      	movs	r3, #0
 8004b76:	4e33      	ldr	r6, [pc, #204]	; (8004c44 <_strtod_l+0x594>)
 8004b78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	4659      	mov	r1, fp
 8004b80:	461d      	mov	r5, r3
 8004b82:	f1b8 0f01 	cmp.w	r8, #1
 8004b86:	dc21      	bgt.n	8004bcc <_strtod_l+0x51c>
 8004b88:	b10b      	cbz	r3, 8004b8e <_strtod_l+0x4de>
 8004b8a:	4682      	mov	sl, r0
 8004b8c:	468b      	mov	fp, r1
 8004b8e:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <_strtod_l+0x594>)
 8004b90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004b94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004b98:	4652      	mov	r2, sl
 8004b9a:	465b      	mov	r3, fp
 8004b9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004ba0:	f7fb fd32 	bl	8000608 <__aeabi_dmul>
 8004ba4:	4b28      	ldr	r3, [pc, #160]	; (8004c48 <_strtod_l+0x598>)
 8004ba6:	460a      	mov	r2, r1
 8004ba8:	400b      	ands	r3, r1
 8004baa:	4928      	ldr	r1, [pc, #160]	; (8004c4c <_strtod_l+0x59c>)
 8004bac:	428b      	cmp	r3, r1
 8004bae:	4682      	mov	sl, r0
 8004bb0:	d898      	bhi.n	8004ae4 <_strtod_l+0x434>
 8004bb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004bb6:	428b      	cmp	r3, r1
 8004bb8:	bf86      	itte	hi
 8004bba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004c54 <_strtod_l+0x5a4>
 8004bbe:	f04f 3aff 	movhi.w	sl, #4294967295
 8004bc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	e077      	b.n	8004cbc <_strtod_l+0x60c>
 8004bcc:	f018 0f01 	tst.w	r8, #1
 8004bd0:	d006      	beq.n	8004be0 <_strtod_l+0x530>
 8004bd2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f7fb fd15 	bl	8000608 <__aeabi_dmul>
 8004bde:	2301      	movs	r3, #1
 8004be0:	3501      	adds	r5, #1
 8004be2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004be6:	e7cc      	b.n	8004b82 <_strtod_l+0x4d2>
 8004be8:	d0ed      	beq.n	8004bc6 <_strtod_l+0x516>
 8004bea:	f1c8 0800 	rsb	r8, r8, #0
 8004bee:	f018 020f 	ands.w	r2, r8, #15
 8004bf2:	d00a      	beq.n	8004c0a <_strtod_l+0x55a>
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <_strtod_l+0x590>)
 8004bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f7fb fe2b 	bl	800085c <__aeabi_ddiv>
 8004c06:	4682      	mov	sl, r0
 8004c08:	468b      	mov	fp, r1
 8004c0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004c0e:	d0da      	beq.n	8004bc6 <_strtod_l+0x516>
 8004c10:	f1b8 0f1f 	cmp.w	r8, #31
 8004c14:	dd20      	ble.n	8004c58 <_strtod_l+0x5a8>
 8004c16:	2400      	movs	r4, #0
 8004c18:	46a0      	mov	r8, r4
 8004c1a:	9407      	str	r4, [sp, #28]
 8004c1c:	9405      	str	r4, [sp, #20]
 8004c1e:	2322      	movs	r3, #34	; 0x22
 8004c20:	f04f 0a00 	mov.w	sl, #0
 8004c24:	f04f 0b00 	mov.w	fp, #0
 8004c28:	f8c9 3000 	str.w	r3, [r9]
 8004c2c:	e765      	b.n	8004afa <_strtod_l+0x44a>
 8004c2e:	bf00      	nop
 8004c30:	080087dd 	.word	0x080087dd
 8004c34:	08008863 	.word	0x08008863
 8004c38:	080087e5 	.word	0x080087e5
 8004c3c:	08008824 	.word	0x08008824
 8004c40:	08008908 	.word	0x08008908
 8004c44:	080088e0 	.word	0x080088e0
 8004c48:	7ff00000 	.word	0x7ff00000
 8004c4c:	7ca00000 	.word	0x7ca00000
 8004c50:	fff80000 	.word	0xfff80000
 8004c54:	7fefffff 	.word	0x7fefffff
 8004c58:	f018 0310 	ands.w	r3, r8, #16
 8004c5c:	bf18      	it	ne
 8004c5e:	236a      	movne	r3, #106	; 0x6a
 8004c60:	4da0      	ldr	r5, [pc, #640]	; (8004ee4 <_strtod_l+0x834>)
 8004c62:	9304      	str	r3, [sp, #16]
 8004c64:	4650      	mov	r0, sl
 8004c66:	4659      	mov	r1, fp
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f1b8 0f00 	cmp.w	r8, #0
 8004c6e:	f300 810a 	bgt.w	8004e86 <_strtod_l+0x7d6>
 8004c72:	b10b      	cbz	r3, 8004c78 <_strtod_l+0x5c8>
 8004c74:	4682      	mov	sl, r0
 8004c76:	468b      	mov	fp, r1
 8004c78:	9b04      	ldr	r3, [sp, #16]
 8004c7a:	b1bb      	cbz	r3, 8004cac <_strtod_l+0x5fc>
 8004c7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004c80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	4659      	mov	r1, fp
 8004c88:	dd10      	ble.n	8004cac <_strtod_l+0x5fc>
 8004c8a:	2b1f      	cmp	r3, #31
 8004c8c:	f340 8107 	ble.w	8004e9e <_strtod_l+0x7ee>
 8004c90:	2b34      	cmp	r3, #52	; 0x34
 8004c92:	bfde      	ittt	le
 8004c94:	3b20      	suble	r3, #32
 8004c96:	f04f 32ff 	movle.w	r2, #4294967295
 8004c9a:	fa02 f303 	lslle.w	r3, r2, r3
 8004c9e:	f04f 0a00 	mov.w	sl, #0
 8004ca2:	bfcc      	ite	gt
 8004ca4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004ca8:	ea03 0b01 	andle.w	fp, r3, r1
 8004cac:	2200      	movs	r2, #0
 8004cae:	2300      	movs	r3, #0
 8004cb0:	4650      	mov	r0, sl
 8004cb2:	4659      	mov	r1, fp
 8004cb4:	f7fb ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d1ac      	bne.n	8004c16 <_strtod_l+0x566>
 8004cbc:	9b07      	ldr	r3, [sp, #28]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	9a05      	ldr	r2, [sp, #20]
 8004cc2:	9908      	ldr	r1, [sp, #32]
 8004cc4:	4623      	mov	r3, r4
 8004cc6:	4648      	mov	r0, r9
 8004cc8:	f001 fea3 	bl	8006a12 <__s2b>
 8004ccc:	9007      	str	r0, [sp, #28]
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	f43f af08 	beq.w	8004ae4 <_strtod_l+0x434>
 8004cd4:	9a06      	ldr	r2, [sp, #24]
 8004cd6:	9b06      	ldr	r3, [sp, #24]
 8004cd8:	2a00      	cmp	r2, #0
 8004cda:	f1c3 0300 	rsb	r3, r3, #0
 8004cde:	bfa8      	it	ge
 8004ce0:	2300      	movge	r3, #0
 8004ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ce4:	2400      	movs	r4, #0
 8004ce6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004cea:	9316      	str	r3, [sp, #88]	; 0x58
 8004cec:	46a0      	mov	r8, r4
 8004cee:	9b07      	ldr	r3, [sp, #28]
 8004cf0:	4648      	mov	r0, r9
 8004cf2:	6859      	ldr	r1, [r3, #4]
 8004cf4:	f001 fe07 	bl	8006906 <_Balloc>
 8004cf8:	9005      	str	r0, [sp, #20]
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	f43f aef6 	beq.w	8004aec <_strtod_l+0x43c>
 8004d00:	9b07      	ldr	r3, [sp, #28]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	3202      	adds	r2, #2
 8004d06:	f103 010c 	add.w	r1, r3, #12
 8004d0a:	0092      	lsls	r2, r2, #2
 8004d0c:	300c      	adds	r0, #12
 8004d0e:	f001 fdef 	bl	80068f0 <memcpy>
 8004d12:	aa1e      	add	r2, sp, #120	; 0x78
 8004d14:	a91d      	add	r1, sp, #116	; 0x74
 8004d16:	ec4b ab10 	vmov	d0, sl, fp
 8004d1a:	4648      	mov	r0, r9
 8004d1c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004d20:	f002 f932 	bl	8006f88 <__d2b>
 8004d24:	901c      	str	r0, [sp, #112]	; 0x70
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f43f aee0 	beq.w	8004aec <_strtod_l+0x43c>
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	4648      	mov	r0, r9
 8004d30:	f001 fefb 	bl	8006b2a <__i2b>
 8004d34:	4680      	mov	r8, r0
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f43f aed8 	beq.w	8004aec <_strtod_l+0x43c>
 8004d3c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004d3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	bfab      	itete	ge
 8004d44:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004d46:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004d48:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004d4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004d4c:	bfac      	ite	ge
 8004d4e:	18f7      	addge	r7, r6, r3
 8004d50:	1b9d      	sublt	r5, r3, r6
 8004d52:	9b04      	ldr	r3, [sp, #16]
 8004d54:	1af6      	subs	r6, r6, r3
 8004d56:	4416      	add	r6, r2
 8004d58:	4b63      	ldr	r3, [pc, #396]	; (8004ee8 <_strtod_l+0x838>)
 8004d5a:	3e01      	subs	r6, #1
 8004d5c:	429e      	cmp	r6, r3
 8004d5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004d62:	f280 80af 	bge.w	8004ec4 <_strtod_l+0x814>
 8004d66:	1b9b      	subs	r3, r3, r6
 8004d68:	2b1f      	cmp	r3, #31
 8004d6a:	eba2 0203 	sub.w	r2, r2, r3
 8004d6e:	f04f 0101 	mov.w	r1, #1
 8004d72:	f300 809b 	bgt.w	8004eac <_strtod_l+0x7fc>
 8004d76:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d80:	18be      	adds	r6, r7, r2
 8004d82:	9b04      	ldr	r3, [sp, #16]
 8004d84:	42b7      	cmp	r7, r6
 8004d86:	4415      	add	r5, r2
 8004d88:	441d      	add	r5, r3
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	bfa8      	it	ge
 8004d8e:	4633      	movge	r3, r6
 8004d90:	42ab      	cmp	r3, r5
 8004d92:	bfa8      	it	ge
 8004d94:	462b      	movge	r3, r5
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfc2      	ittt	gt
 8004d9a:	1af6      	subgt	r6, r6, r3
 8004d9c:	1aed      	subgt	r5, r5, r3
 8004d9e:	1aff      	subgt	r7, r7, r3
 8004da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004da2:	b1bb      	cbz	r3, 8004dd4 <_strtod_l+0x724>
 8004da4:	4641      	mov	r1, r8
 8004da6:	461a      	mov	r2, r3
 8004da8:	4648      	mov	r0, r9
 8004daa:	f001 ff5d 	bl	8006c68 <__pow5mult>
 8004dae:	4680      	mov	r8, r0
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f43f ae9b 	beq.w	8004aec <_strtod_l+0x43c>
 8004db6:	4601      	mov	r1, r0
 8004db8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004dba:	4648      	mov	r0, r9
 8004dbc:	f001 febe 	bl	8006b3c <__multiply>
 8004dc0:	900c      	str	r0, [sp, #48]	; 0x30
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	f43f ae92 	beq.w	8004aec <_strtod_l+0x43c>
 8004dc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004dca:	4648      	mov	r0, r9
 8004dcc:	f001 fdcf 	bl	800696e <_Bfree>
 8004dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dd2:	931c      	str	r3, [sp, #112]	; 0x70
 8004dd4:	2e00      	cmp	r6, #0
 8004dd6:	dc7a      	bgt.n	8004ece <_strtod_l+0x81e>
 8004dd8:	9b06      	ldr	r3, [sp, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	dd08      	ble.n	8004df0 <_strtod_l+0x740>
 8004dde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004de0:	9905      	ldr	r1, [sp, #20]
 8004de2:	4648      	mov	r0, r9
 8004de4:	f001 ff40 	bl	8006c68 <__pow5mult>
 8004de8:	9005      	str	r0, [sp, #20]
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f43f ae7e 	beq.w	8004aec <_strtod_l+0x43c>
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	dd08      	ble.n	8004e06 <_strtod_l+0x756>
 8004df4:	462a      	mov	r2, r5
 8004df6:	9905      	ldr	r1, [sp, #20]
 8004df8:	4648      	mov	r0, r9
 8004dfa:	f001 ff83 	bl	8006d04 <__lshift>
 8004dfe:	9005      	str	r0, [sp, #20]
 8004e00:	2800      	cmp	r0, #0
 8004e02:	f43f ae73 	beq.w	8004aec <_strtod_l+0x43c>
 8004e06:	2f00      	cmp	r7, #0
 8004e08:	dd08      	ble.n	8004e1c <_strtod_l+0x76c>
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	463a      	mov	r2, r7
 8004e0e:	4648      	mov	r0, r9
 8004e10:	f001 ff78 	bl	8006d04 <__lshift>
 8004e14:	4680      	mov	r8, r0
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f43f ae68 	beq.w	8004aec <_strtod_l+0x43c>
 8004e1c:	9a05      	ldr	r2, [sp, #20]
 8004e1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e20:	4648      	mov	r0, r9
 8004e22:	f001 ffdd 	bl	8006de0 <__mdiff>
 8004e26:	4604      	mov	r4, r0
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	f43f ae5f 	beq.w	8004aec <_strtod_l+0x43c>
 8004e2e:	68c3      	ldr	r3, [r0, #12]
 8004e30:	930c      	str	r3, [sp, #48]	; 0x30
 8004e32:	2300      	movs	r3, #0
 8004e34:	60c3      	str	r3, [r0, #12]
 8004e36:	4641      	mov	r1, r8
 8004e38:	f001 ffb8 	bl	8006dac <__mcmp>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	da55      	bge.n	8004eec <_strtod_l+0x83c>
 8004e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e42:	b9e3      	cbnz	r3, 8004e7e <_strtod_l+0x7ce>
 8004e44:	f1ba 0f00 	cmp.w	sl, #0
 8004e48:	d119      	bne.n	8004e7e <_strtod_l+0x7ce>
 8004e4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e4e:	b9b3      	cbnz	r3, 8004e7e <_strtod_l+0x7ce>
 8004e50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e54:	0d1b      	lsrs	r3, r3, #20
 8004e56:	051b      	lsls	r3, r3, #20
 8004e58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004e5c:	d90f      	bls.n	8004e7e <_strtod_l+0x7ce>
 8004e5e:	6963      	ldr	r3, [r4, #20]
 8004e60:	b913      	cbnz	r3, 8004e68 <_strtod_l+0x7b8>
 8004e62:	6923      	ldr	r3, [r4, #16]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	dd0a      	ble.n	8004e7e <_strtod_l+0x7ce>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4648      	mov	r0, r9
 8004e6e:	f001 ff49 	bl	8006d04 <__lshift>
 8004e72:	4641      	mov	r1, r8
 8004e74:	4604      	mov	r4, r0
 8004e76:	f001 ff99 	bl	8006dac <__mcmp>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	dc67      	bgt.n	8004f4e <_strtod_l+0x89e>
 8004e7e:	9b04      	ldr	r3, [sp, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d171      	bne.n	8004f68 <_strtod_l+0x8b8>
 8004e84:	e63d      	b.n	8004b02 <_strtod_l+0x452>
 8004e86:	f018 0f01 	tst.w	r8, #1
 8004e8a:	d004      	beq.n	8004e96 <_strtod_l+0x7e6>
 8004e8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e90:	f7fb fbba 	bl	8000608 <__aeabi_dmul>
 8004e94:	2301      	movs	r3, #1
 8004e96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e9a:	3508      	adds	r5, #8
 8004e9c:	e6e5      	b.n	8004c6a <_strtod_l+0x5ba>
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	ea03 0a0a 	and.w	sl, r3, sl
 8004eaa:	e6ff      	b.n	8004cac <_strtod_l+0x5fc>
 8004eac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004eb0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004eb4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004eb8:	36e2      	adds	r6, #226	; 0xe2
 8004eba:	fa01 f306 	lsl.w	r3, r1, r6
 8004ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec0:	910f      	str	r1, [sp, #60]	; 0x3c
 8004ec2:	e75d      	b.n	8004d80 <_strtod_l+0x6d0>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec8:	2301      	movs	r3, #1
 8004eca:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ecc:	e758      	b.n	8004d80 <_strtod_l+0x6d0>
 8004ece:	4632      	mov	r2, r6
 8004ed0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ed2:	4648      	mov	r0, r9
 8004ed4:	f001 ff16 	bl	8006d04 <__lshift>
 8004ed8:	901c      	str	r0, [sp, #112]	; 0x70
 8004eda:	2800      	cmp	r0, #0
 8004edc:	f47f af7c 	bne.w	8004dd8 <_strtod_l+0x728>
 8004ee0:	e604      	b.n	8004aec <_strtod_l+0x43c>
 8004ee2:	bf00      	nop
 8004ee4:	08008838 	.word	0x08008838
 8004ee8:	fffffc02 	.word	0xfffffc02
 8004eec:	465d      	mov	r5, fp
 8004eee:	f040 8086 	bne.w	8004ffe <_strtod_l+0x94e>
 8004ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ef8:	b32a      	cbz	r2, 8004f46 <_strtod_l+0x896>
 8004efa:	4aaf      	ldr	r2, [pc, #700]	; (80051b8 <_strtod_l+0xb08>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d153      	bne.n	8004fa8 <_strtod_l+0x8f8>
 8004f00:	9b04      	ldr	r3, [sp, #16]
 8004f02:	4650      	mov	r0, sl
 8004f04:	b1d3      	cbz	r3, 8004f3c <_strtod_l+0x88c>
 8004f06:	4aad      	ldr	r2, [pc, #692]	; (80051bc <_strtod_l+0xb0c>)
 8004f08:	402a      	ands	r2, r5
 8004f0a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f12:	d816      	bhi.n	8004f42 <_strtod_l+0x892>
 8004f14:	0d12      	lsrs	r2, r2, #20
 8004f16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1e:	4298      	cmp	r0, r3
 8004f20:	d142      	bne.n	8004fa8 <_strtod_l+0x8f8>
 8004f22:	4ba7      	ldr	r3, [pc, #668]	; (80051c0 <_strtod_l+0xb10>)
 8004f24:	429d      	cmp	r5, r3
 8004f26:	d102      	bne.n	8004f2e <_strtod_l+0x87e>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	f43f addf 	beq.w	8004aec <_strtod_l+0x43c>
 8004f2e:	4ba3      	ldr	r3, [pc, #652]	; (80051bc <_strtod_l+0xb0c>)
 8004f30:	402b      	ands	r3, r5
 8004f32:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004f36:	f04f 0a00 	mov.w	sl, #0
 8004f3a:	e7a0      	b.n	8004e7e <_strtod_l+0x7ce>
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	e7ed      	b.n	8004f1e <_strtod_l+0x86e>
 8004f42:	460b      	mov	r3, r1
 8004f44:	e7eb      	b.n	8004f1e <_strtod_l+0x86e>
 8004f46:	bb7b      	cbnz	r3, 8004fa8 <_strtod_l+0x8f8>
 8004f48:	f1ba 0f00 	cmp.w	sl, #0
 8004f4c:	d12c      	bne.n	8004fa8 <_strtod_l+0x8f8>
 8004f4e:	9904      	ldr	r1, [sp, #16]
 8004f50:	4a9a      	ldr	r2, [pc, #616]	; (80051bc <_strtod_l+0xb0c>)
 8004f52:	465b      	mov	r3, fp
 8004f54:	b1f1      	cbz	r1, 8004f94 <_strtod_l+0x8e4>
 8004f56:	ea02 010b 	and.w	r1, r2, fp
 8004f5a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004f5e:	dc19      	bgt.n	8004f94 <_strtod_l+0x8e4>
 8004f60:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004f64:	f77f ae5b 	ble.w	8004c1e <_strtod_l+0x56e>
 8004f68:	4a96      	ldr	r2, [pc, #600]	; (80051c4 <_strtod_l+0xb14>)
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004f70:	4650      	mov	r0, sl
 8004f72:	4659      	mov	r1, fp
 8004f74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004f78:	f7fb fb46 	bl	8000608 <__aeabi_dmul>
 8004f7c:	4682      	mov	sl, r0
 8004f7e:	468b      	mov	fp, r1
 8004f80:	2900      	cmp	r1, #0
 8004f82:	f47f adbe 	bne.w	8004b02 <_strtod_l+0x452>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	f47f adbb 	bne.w	8004b02 <_strtod_l+0x452>
 8004f8c:	2322      	movs	r3, #34	; 0x22
 8004f8e:	f8c9 3000 	str.w	r3, [r9]
 8004f92:	e5b6      	b.n	8004b02 <_strtod_l+0x452>
 8004f94:	4013      	ands	r3, r2
 8004f96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004f9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004f9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004fa2:	f04f 3aff 	mov.w	sl, #4294967295
 8004fa6:	e76a      	b.n	8004e7e <_strtod_l+0x7ce>
 8004fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004faa:	b193      	cbz	r3, 8004fd2 <_strtod_l+0x922>
 8004fac:	422b      	tst	r3, r5
 8004fae:	f43f af66 	beq.w	8004e7e <_strtod_l+0x7ce>
 8004fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fb4:	9a04      	ldr	r2, [sp, #16]
 8004fb6:	4650      	mov	r0, sl
 8004fb8:	4659      	mov	r1, fp
 8004fba:	b173      	cbz	r3, 8004fda <_strtod_l+0x92a>
 8004fbc:	f7ff fb5c 	bl	8004678 <sulp>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004fc8:	f7fb f968 	bl	800029c <__adddf3>
 8004fcc:	4682      	mov	sl, r0
 8004fce:	468b      	mov	fp, r1
 8004fd0:	e755      	b.n	8004e7e <_strtod_l+0x7ce>
 8004fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fd4:	ea13 0f0a 	tst.w	r3, sl
 8004fd8:	e7e9      	b.n	8004fae <_strtod_l+0x8fe>
 8004fda:	f7ff fb4d 	bl	8004678 <sulp>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004fe6:	f7fb f957 	bl	8000298 <__aeabi_dsub>
 8004fea:	2200      	movs	r2, #0
 8004fec:	2300      	movs	r3, #0
 8004fee:	4682      	mov	sl, r0
 8004ff0:	468b      	mov	fp, r1
 8004ff2:	f7fb fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f47f ae11 	bne.w	8004c1e <_strtod_l+0x56e>
 8004ffc:	e73f      	b.n	8004e7e <_strtod_l+0x7ce>
 8004ffe:	4641      	mov	r1, r8
 8005000:	4620      	mov	r0, r4
 8005002:	f002 f810 	bl	8007026 <__ratio>
 8005006:	ec57 6b10 	vmov	r6, r7, d0
 800500a:	2200      	movs	r2, #0
 800500c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005010:	ee10 0a10 	vmov	r0, s0
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb fd73 	bl	8000b00 <__aeabi_dcmple>
 800501a:	2800      	cmp	r0, #0
 800501c:	d077      	beq.n	800510e <_strtod_l+0xa5e>
 800501e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005020:	2b00      	cmp	r3, #0
 8005022:	d04a      	beq.n	80050ba <_strtod_l+0xa0a>
 8005024:	4b68      	ldr	r3, [pc, #416]	; (80051c8 <_strtod_l+0xb18>)
 8005026:	2200      	movs	r2, #0
 8005028:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800502c:	4f66      	ldr	r7, [pc, #408]	; (80051c8 <_strtod_l+0xb18>)
 800502e:	2600      	movs	r6, #0
 8005030:	4b62      	ldr	r3, [pc, #392]	; (80051bc <_strtod_l+0xb0c>)
 8005032:	402b      	ands	r3, r5
 8005034:	930f      	str	r3, [sp, #60]	; 0x3c
 8005036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005038:	4b64      	ldr	r3, [pc, #400]	; (80051cc <_strtod_l+0xb1c>)
 800503a:	429a      	cmp	r2, r3
 800503c:	f040 80ce 	bne.w	80051dc <_strtod_l+0xb2c>
 8005040:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005044:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005048:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800504c:	ec4b ab10 	vmov	d0, sl, fp
 8005050:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005054:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005058:	f001 ff20 	bl	8006e9c <__ulp>
 800505c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005060:	ec53 2b10 	vmov	r2, r3, d0
 8005064:	f7fb fad0 	bl	8000608 <__aeabi_dmul>
 8005068:	4652      	mov	r2, sl
 800506a:	465b      	mov	r3, fp
 800506c:	f7fb f916 	bl	800029c <__adddf3>
 8005070:	460b      	mov	r3, r1
 8005072:	4952      	ldr	r1, [pc, #328]	; (80051bc <_strtod_l+0xb0c>)
 8005074:	4a56      	ldr	r2, [pc, #344]	; (80051d0 <_strtod_l+0xb20>)
 8005076:	4019      	ands	r1, r3
 8005078:	4291      	cmp	r1, r2
 800507a:	4682      	mov	sl, r0
 800507c:	d95b      	bls.n	8005136 <_strtod_l+0xa86>
 800507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005080:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <_strtod_l+0x9e0>
 8005088:	9b08      	ldr	r3, [sp, #32]
 800508a:	3301      	adds	r3, #1
 800508c:	f43f ad2e 	beq.w	8004aec <_strtod_l+0x43c>
 8005090:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80051c0 <_strtod_l+0xb10>
 8005094:	f04f 3aff 	mov.w	sl, #4294967295
 8005098:	991c      	ldr	r1, [sp, #112]	; 0x70
 800509a:	4648      	mov	r0, r9
 800509c:	f001 fc67 	bl	800696e <_Bfree>
 80050a0:	9905      	ldr	r1, [sp, #20]
 80050a2:	4648      	mov	r0, r9
 80050a4:	f001 fc63 	bl	800696e <_Bfree>
 80050a8:	4641      	mov	r1, r8
 80050aa:	4648      	mov	r0, r9
 80050ac:	f001 fc5f 	bl	800696e <_Bfree>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4648      	mov	r0, r9
 80050b4:	f001 fc5b 	bl	800696e <_Bfree>
 80050b8:	e619      	b.n	8004cee <_strtod_l+0x63e>
 80050ba:	f1ba 0f00 	cmp.w	sl, #0
 80050be:	d11a      	bne.n	80050f6 <_strtod_l+0xa46>
 80050c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050c4:	b9eb      	cbnz	r3, 8005102 <_strtod_l+0xa52>
 80050c6:	2200      	movs	r2, #0
 80050c8:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <_strtod_l+0xb18>)
 80050ca:	4630      	mov	r0, r6
 80050cc:	4639      	mov	r1, r7
 80050ce:	f7fb fd0d 	bl	8000aec <__aeabi_dcmplt>
 80050d2:	b9c8      	cbnz	r0, 8005108 <_strtod_l+0xa58>
 80050d4:	4630      	mov	r0, r6
 80050d6:	4639      	mov	r1, r7
 80050d8:	2200      	movs	r2, #0
 80050da:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <_strtod_l+0xb24>)
 80050dc:	f7fb fa94 	bl	8000608 <__aeabi_dmul>
 80050e0:	4606      	mov	r6, r0
 80050e2:	460f      	mov	r7, r1
 80050e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80050e8:	9618      	str	r6, [sp, #96]	; 0x60
 80050ea:	9319      	str	r3, [sp, #100]	; 0x64
 80050ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80050f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80050f4:	e79c      	b.n	8005030 <_strtod_l+0x980>
 80050f6:	f1ba 0f01 	cmp.w	sl, #1
 80050fa:	d102      	bne.n	8005102 <_strtod_l+0xa52>
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	f43f ad8e 	beq.w	8004c1e <_strtod_l+0x56e>
 8005102:	2200      	movs	r2, #0
 8005104:	4b34      	ldr	r3, [pc, #208]	; (80051d8 <_strtod_l+0xb28>)
 8005106:	e78f      	b.n	8005028 <_strtod_l+0x978>
 8005108:	2600      	movs	r6, #0
 800510a:	4f32      	ldr	r7, [pc, #200]	; (80051d4 <_strtod_l+0xb24>)
 800510c:	e7ea      	b.n	80050e4 <_strtod_l+0xa34>
 800510e:	4b31      	ldr	r3, [pc, #196]	; (80051d4 <_strtod_l+0xb24>)
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	2200      	movs	r2, #0
 8005116:	f7fb fa77 	bl	8000608 <__aeabi_dmul>
 800511a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800511c:	4606      	mov	r6, r0
 800511e:	460f      	mov	r7, r1
 8005120:	b933      	cbnz	r3, 8005130 <_strtod_l+0xa80>
 8005122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005126:	9010      	str	r0, [sp, #64]	; 0x40
 8005128:	9311      	str	r3, [sp, #68]	; 0x44
 800512a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800512e:	e7df      	b.n	80050f0 <_strtod_l+0xa40>
 8005130:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005134:	e7f9      	b.n	800512a <_strtod_l+0xa7a>
 8005136:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800513a:	9b04      	ldr	r3, [sp, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ab      	bne.n	8005098 <_strtod_l+0x9e8>
 8005140:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005144:	0d1b      	lsrs	r3, r3, #20
 8005146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005148:	051b      	lsls	r3, r3, #20
 800514a:	429a      	cmp	r2, r3
 800514c:	465d      	mov	r5, fp
 800514e:	d1a3      	bne.n	8005098 <_strtod_l+0x9e8>
 8005150:	4639      	mov	r1, r7
 8005152:	4630      	mov	r0, r6
 8005154:	f7fb fd08 	bl	8000b68 <__aeabi_d2iz>
 8005158:	f7fb f9ec 	bl	8000534 <__aeabi_i2d>
 800515c:	460b      	mov	r3, r1
 800515e:	4602      	mov	r2, r0
 8005160:	4639      	mov	r1, r7
 8005162:	4630      	mov	r0, r6
 8005164:	f7fb f898 	bl	8000298 <__aeabi_dsub>
 8005168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800516a:	4606      	mov	r6, r0
 800516c:	460f      	mov	r7, r1
 800516e:	b933      	cbnz	r3, 800517e <_strtod_l+0xace>
 8005170:	f1ba 0f00 	cmp.w	sl, #0
 8005174:	d103      	bne.n	800517e <_strtod_l+0xace>
 8005176:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800517a:	2d00      	cmp	r5, #0
 800517c:	d06d      	beq.n	800525a <_strtod_l+0xbaa>
 800517e:	a30a      	add	r3, pc, #40	; (adr r3, 80051a8 <_strtod_l+0xaf8>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	4630      	mov	r0, r6
 8005186:	4639      	mov	r1, r7
 8005188:	f7fb fcb0 	bl	8000aec <__aeabi_dcmplt>
 800518c:	2800      	cmp	r0, #0
 800518e:	f47f acb8 	bne.w	8004b02 <_strtod_l+0x452>
 8005192:	a307      	add	r3, pc, #28	; (adr r3, 80051b0 <_strtod_l+0xb00>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	4630      	mov	r0, r6
 800519a:	4639      	mov	r1, r7
 800519c:	f7fb fcc4 	bl	8000b28 <__aeabi_dcmpgt>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f43f af79 	beq.w	8005098 <_strtod_l+0x9e8>
 80051a6:	e4ac      	b.n	8004b02 <_strtod_l+0x452>
 80051a8:	94a03595 	.word	0x94a03595
 80051ac:	3fdfffff 	.word	0x3fdfffff
 80051b0:	35afe535 	.word	0x35afe535
 80051b4:	3fe00000 	.word	0x3fe00000
 80051b8:	000fffff 	.word	0x000fffff
 80051bc:	7ff00000 	.word	0x7ff00000
 80051c0:	7fefffff 	.word	0x7fefffff
 80051c4:	39500000 	.word	0x39500000
 80051c8:	3ff00000 	.word	0x3ff00000
 80051cc:	7fe00000 	.word	0x7fe00000
 80051d0:	7c9fffff 	.word	0x7c9fffff
 80051d4:	3fe00000 	.word	0x3fe00000
 80051d8:	bff00000 	.word	0xbff00000
 80051dc:	9b04      	ldr	r3, [sp, #16]
 80051de:	b333      	cbz	r3, 800522e <_strtod_l+0xb7e>
 80051e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051e6:	d822      	bhi.n	800522e <_strtod_l+0xb7e>
 80051e8:	a327      	add	r3, pc, #156	; (adr r3, 8005288 <_strtod_l+0xbd8>)
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	4630      	mov	r0, r6
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7fb fc85 	bl	8000b00 <__aeabi_dcmple>
 80051f6:	b1a0      	cbz	r0, 8005222 <_strtod_l+0xb72>
 80051f8:	4639      	mov	r1, r7
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7fb fcdc 	bl	8000bb8 <__aeabi_d2uiz>
 8005200:	2800      	cmp	r0, #0
 8005202:	bf08      	it	eq
 8005204:	2001      	moveq	r0, #1
 8005206:	f7fb f985 	bl	8000514 <__aeabi_ui2d>
 800520a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800520c:	4606      	mov	r6, r0
 800520e:	460f      	mov	r7, r1
 8005210:	bb03      	cbnz	r3, 8005254 <_strtod_l+0xba4>
 8005212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005216:	9012      	str	r0, [sp, #72]	; 0x48
 8005218:	9313      	str	r3, [sp, #76]	; 0x4c
 800521a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800521e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005226:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	930b      	str	r3, [sp, #44]	; 0x2c
 800522e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005232:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005236:	f001 fe31 	bl	8006e9c <__ulp>
 800523a:	4650      	mov	r0, sl
 800523c:	ec53 2b10 	vmov	r2, r3, d0
 8005240:	4659      	mov	r1, fp
 8005242:	f7fb f9e1 	bl	8000608 <__aeabi_dmul>
 8005246:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800524a:	f7fb f827 	bl	800029c <__adddf3>
 800524e:	4682      	mov	sl, r0
 8005250:	468b      	mov	fp, r1
 8005252:	e772      	b.n	800513a <_strtod_l+0xa8a>
 8005254:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005258:	e7df      	b.n	800521a <_strtod_l+0xb6a>
 800525a:	a30d      	add	r3, pc, #52	; (adr r3, 8005290 <_strtod_l+0xbe0>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f7fb fc44 	bl	8000aec <__aeabi_dcmplt>
 8005264:	e79c      	b.n	80051a0 <_strtod_l+0xaf0>
 8005266:	2300      	movs	r3, #0
 8005268:	930d      	str	r3, [sp, #52]	; 0x34
 800526a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800526c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	f7ff ba61 	b.w	8004736 <_strtod_l+0x86>
 8005274:	2b65      	cmp	r3, #101	; 0x65
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f43f ab4e 	beq.w	800491a <_strtod_l+0x26a>
 800527e:	2101      	movs	r1, #1
 8005280:	4614      	mov	r4, r2
 8005282:	9104      	str	r1, [sp, #16]
 8005284:	f7ff bacb 	b.w	800481e <_strtod_l+0x16e>
 8005288:	ffc00000 	.word	0xffc00000
 800528c:	41dfffff 	.word	0x41dfffff
 8005290:	94a03595 	.word	0x94a03595
 8005294:	3fcfffff 	.word	0x3fcfffff

08005298 <_strtod_r>:
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <_strtod_r+0x18>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	b410      	push	{r4}
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4c04      	ldr	r4, [pc, #16]	; (80052b4 <_strtod_r+0x1c>)
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bf08      	it	eq
 80052a6:	4623      	moveq	r3, r4
 80052a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ac:	f7ff ba00 	b.w	80046b0 <_strtod_l>
 80052b0:	2000000c 	.word	0x2000000c
 80052b4:	20000070 	.word	0x20000070

080052b8 <_strtol_l.isra.0>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4680      	mov	r8, r0
 80052be:	4689      	mov	r9, r1
 80052c0:	4692      	mov	sl, r2
 80052c2:	461e      	mov	r6, r3
 80052c4:	460f      	mov	r7, r1
 80052c6:	463d      	mov	r5, r7
 80052c8:	9808      	ldr	r0, [sp, #32]
 80052ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052ce:	f001 fad3 	bl	8006878 <__locale_ctype_ptr_l>
 80052d2:	4420      	add	r0, r4
 80052d4:	7843      	ldrb	r3, [r0, #1]
 80052d6:	f013 0308 	ands.w	r3, r3, #8
 80052da:	d132      	bne.n	8005342 <_strtol_l.isra.0+0x8a>
 80052dc:	2c2d      	cmp	r4, #45	; 0x2d
 80052de:	d132      	bne.n	8005346 <_strtol_l.isra.0+0x8e>
 80052e0:	787c      	ldrb	r4, [r7, #1]
 80052e2:	1cbd      	adds	r5, r7, #2
 80052e4:	2201      	movs	r2, #1
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	d05d      	beq.n	80053a6 <_strtol_l.isra.0+0xee>
 80052ea:	2e10      	cmp	r6, #16
 80052ec:	d109      	bne.n	8005302 <_strtol_l.isra.0+0x4a>
 80052ee:	2c30      	cmp	r4, #48	; 0x30
 80052f0:	d107      	bne.n	8005302 <_strtol_l.isra.0+0x4a>
 80052f2:	782b      	ldrb	r3, [r5, #0]
 80052f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80052f8:	2b58      	cmp	r3, #88	; 0x58
 80052fa:	d14f      	bne.n	800539c <_strtol_l.isra.0+0xe4>
 80052fc:	786c      	ldrb	r4, [r5, #1]
 80052fe:	2610      	movs	r6, #16
 8005300:	3502      	adds	r5, #2
 8005302:	2a00      	cmp	r2, #0
 8005304:	bf14      	ite	ne
 8005306:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800530a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800530e:	2700      	movs	r7, #0
 8005310:	fbb1 fcf6 	udiv	ip, r1, r6
 8005314:	4638      	mov	r0, r7
 8005316:	fb06 1e1c 	mls	lr, r6, ip, r1
 800531a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800531e:	2b09      	cmp	r3, #9
 8005320:	d817      	bhi.n	8005352 <_strtol_l.isra.0+0x9a>
 8005322:	461c      	mov	r4, r3
 8005324:	42a6      	cmp	r6, r4
 8005326:	dd23      	ble.n	8005370 <_strtol_l.isra.0+0xb8>
 8005328:	1c7b      	adds	r3, r7, #1
 800532a:	d007      	beq.n	800533c <_strtol_l.isra.0+0x84>
 800532c:	4584      	cmp	ip, r0
 800532e:	d31c      	bcc.n	800536a <_strtol_l.isra.0+0xb2>
 8005330:	d101      	bne.n	8005336 <_strtol_l.isra.0+0x7e>
 8005332:	45a6      	cmp	lr, r4
 8005334:	db19      	blt.n	800536a <_strtol_l.isra.0+0xb2>
 8005336:	fb00 4006 	mla	r0, r0, r6, r4
 800533a:	2701      	movs	r7, #1
 800533c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005340:	e7eb      	b.n	800531a <_strtol_l.isra.0+0x62>
 8005342:	462f      	mov	r7, r5
 8005344:	e7bf      	b.n	80052c6 <_strtol_l.isra.0+0xe>
 8005346:	2c2b      	cmp	r4, #43	; 0x2b
 8005348:	bf04      	itt	eq
 800534a:	1cbd      	addeq	r5, r7, #2
 800534c:	787c      	ldrbeq	r4, [r7, #1]
 800534e:	461a      	mov	r2, r3
 8005350:	e7c9      	b.n	80052e6 <_strtol_l.isra.0+0x2e>
 8005352:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005356:	2b19      	cmp	r3, #25
 8005358:	d801      	bhi.n	800535e <_strtol_l.isra.0+0xa6>
 800535a:	3c37      	subs	r4, #55	; 0x37
 800535c:	e7e2      	b.n	8005324 <_strtol_l.isra.0+0x6c>
 800535e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005362:	2b19      	cmp	r3, #25
 8005364:	d804      	bhi.n	8005370 <_strtol_l.isra.0+0xb8>
 8005366:	3c57      	subs	r4, #87	; 0x57
 8005368:	e7dc      	b.n	8005324 <_strtol_l.isra.0+0x6c>
 800536a:	f04f 37ff 	mov.w	r7, #4294967295
 800536e:	e7e5      	b.n	800533c <_strtol_l.isra.0+0x84>
 8005370:	1c7b      	adds	r3, r7, #1
 8005372:	d108      	bne.n	8005386 <_strtol_l.isra.0+0xce>
 8005374:	2322      	movs	r3, #34	; 0x22
 8005376:	f8c8 3000 	str.w	r3, [r8]
 800537a:	4608      	mov	r0, r1
 800537c:	f1ba 0f00 	cmp.w	sl, #0
 8005380:	d107      	bne.n	8005392 <_strtol_l.isra.0+0xda>
 8005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005386:	b102      	cbz	r2, 800538a <_strtol_l.isra.0+0xd2>
 8005388:	4240      	negs	r0, r0
 800538a:	f1ba 0f00 	cmp.w	sl, #0
 800538e:	d0f8      	beq.n	8005382 <_strtol_l.isra.0+0xca>
 8005390:	b10f      	cbz	r7, 8005396 <_strtol_l.isra.0+0xde>
 8005392:	f105 39ff 	add.w	r9, r5, #4294967295
 8005396:	f8ca 9000 	str.w	r9, [sl]
 800539a:	e7f2      	b.n	8005382 <_strtol_l.isra.0+0xca>
 800539c:	2430      	movs	r4, #48	; 0x30
 800539e:	2e00      	cmp	r6, #0
 80053a0:	d1af      	bne.n	8005302 <_strtol_l.isra.0+0x4a>
 80053a2:	2608      	movs	r6, #8
 80053a4:	e7ad      	b.n	8005302 <_strtol_l.isra.0+0x4a>
 80053a6:	2c30      	cmp	r4, #48	; 0x30
 80053a8:	d0a3      	beq.n	80052f2 <_strtol_l.isra.0+0x3a>
 80053aa:	260a      	movs	r6, #10
 80053ac:	e7a9      	b.n	8005302 <_strtol_l.isra.0+0x4a>
	...

080053b0 <_strtol_r>:
 80053b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053b2:	4c06      	ldr	r4, [pc, #24]	; (80053cc <_strtol_r+0x1c>)
 80053b4:	4d06      	ldr	r5, [pc, #24]	; (80053d0 <_strtol_r+0x20>)
 80053b6:	6824      	ldr	r4, [r4, #0]
 80053b8:	6a24      	ldr	r4, [r4, #32]
 80053ba:	2c00      	cmp	r4, #0
 80053bc:	bf08      	it	eq
 80053be:	462c      	moveq	r4, r5
 80053c0:	9400      	str	r4, [sp, #0]
 80053c2:	f7ff ff79 	bl	80052b8 <_strtol_l.isra.0>
 80053c6:	b003      	add	sp, #12
 80053c8:	bd30      	pop	{r4, r5, pc}
 80053ca:	bf00      	nop
 80053cc:	2000000c 	.word	0x2000000c
 80053d0:	20000070 	.word	0x20000070

080053d4 <quorem>:
 80053d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d8:	6903      	ldr	r3, [r0, #16]
 80053da:	690c      	ldr	r4, [r1, #16]
 80053dc:	42a3      	cmp	r3, r4
 80053de:	4680      	mov	r8, r0
 80053e0:	f2c0 8082 	blt.w	80054e8 <quorem+0x114>
 80053e4:	3c01      	subs	r4, #1
 80053e6:	f101 0714 	add.w	r7, r1, #20
 80053ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80053ee:	f100 0614 	add.w	r6, r0, #20
 80053f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80053f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80053fa:	eb06 030c 	add.w	r3, r6, ip
 80053fe:	3501      	adds	r5, #1
 8005400:	eb07 090c 	add.w	r9, r7, ip
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	fbb0 f5f5 	udiv	r5, r0, r5
 800540a:	b395      	cbz	r5, 8005472 <quorem+0x9e>
 800540c:	f04f 0a00 	mov.w	sl, #0
 8005410:	4638      	mov	r0, r7
 8005412:	46b6      	mov	lr, r6
 8005414:	46d3      	mov	fp, sl
 8005416:	f850 2b04 	ldr.w	r2, [r0], #4
 800541a:	b293      	uxth	r3, r2
 800541c:	fb05 a303 	mla	r3, r5, r3, sl
 8005420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005424:	b29b      	uxth	r3, r3
 8005426:	ebab 0303 	sub.w	r3, fp, r3
 800542a:	0c12      	lsrs	r2, r2, #16
 800542c:	f8de b000 	ldr.w	fp, [lr]
 8005430:	fb05 a202 	mla	r2, r5, r2, sl
 8005434:	fa13 f38b 	uxtah	r3, r3, fp
 8005438:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800543c:	fa1f fb82 	uxth.w	fp, r2
 8005440:	f8de 2000 	ldr.w	r2, [lr]
 8005444:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800544c:	b29b      	uxth	r3, r3
 800544e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005452:	4581      	cmp	r9, r0
 8005454:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005458:	f84e 3b04 	str.w	r3, [lr], #4
 800545c:	d2db      	bcs.n	8005416 <quorem+0x42>
 800545e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005462:	b933      	cbnz	r3, 8005472 <quorem+0x9e>
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	3b04      	subs	r3, #4
 8005468:	429e      	cmp	r6, r3
 800546a:	461a      	mov	r2, r3
 800546c:	d330      	bcc.n	80054d0 <quorem+0xfc>
 800546e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005472:	4640      	mov	r0, r8
 8005474:	f001 fc9a 	bl	8006dac <__mcmp>
 8005478:	2800      	cmp	r0, #0
 800547a:	db25      	blt.n	80054c8 <quorem+0xf4>
 800547c:	3501      	adds	r5, #1
 800547e:	4630      	mov	r0, r6
 8005480:	f04f 0c00 	mov.w	ip, #0
 8005484:	f857 2b04 	ldr.w	r2, [r7], #4
 8005488:	f8d0 e000 	ldr.w	lr, [r0]
 800548c:	b293      	uxth	r3, r2
 800548e:	ebac 0303 	sub.w	r3, ip, r3
 8005492:	0c12      	lsrs	r2, r2, #16
 8005494:	fa13 f38e 	uxtah	r3, r3, lr
 8005498:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800549c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054a6:	45b9      	cmp	r9, r7
 80054a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80054ac:	f840 3b04 	str.w	r3, [r0], #4
 80054b0:	d2e8      	bcs.n	8005484 <quorem+0xb0>
 80054b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80054b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80054ba:	b92a      	cbnz	r2, 80054c8 <quorem+0xf4>
 80054bc:	3b04      	subs	r3, #4
 80054be:	429e      	cmp	r6, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	d30b      	bcc.n	80054dc <quorem+0x108>
 80054c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80054c8:	4628      	mov	r0, r5
 80054ca:	b003      	add	sp, #12
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	3b04      	subs	r3, #4
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	d1ca      	bne.n	800546e <quorem+0x9a>
 80054d8:	3c01      	subs	r4, #1
 80054da:	e7c5      	b.n	8005468 <quorem+0x94>
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	3b04      	subs	r3, #4
 80054e0:	2a00      	cmp	r2, #0
 80054e2:	d1ef      	bne.n	80054c4 <quorem+0xf0>
 80054e4:	3c01      	subs	r4, #1
 80054e6:	e7ea      	b.n	80054be <quorem+0xea>
 80054e8:	2000      	movs	r0, #0
 80054ea:	e7ee      	b.n	80054ca <quorem+0xf6>
 80054ec:	0000      	movs	r0, r0
	...

080054f0 <_dtoa_r>:
 80054f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	ec57 6b10 	vmov	r6, r7, d0
 80054f8:	b097      	sub	sp, #92	; 0x5c
 80054fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054fc:	9106      	str	r1, [sp, #24]
 80054fe:	4604      	mov	r4, r0
 8005500:	920b      	str	r2, [sp, #44]	; 0x2c
 8005502:	9312      	str	r3, [sp, #72]	; 0x48
 8005504:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005508:	e9cd 6700 	strd	r6, r7, [sp]
 800550c:	b93d      	cbnz	r5, 800551e <_dtoa_r+0x2e>
 800550e:	2010      	movs	r0, #16
 8005510:	f001 f9d4 	bl	80068bc <malloc>
 8005514:	6260      	str	r0, [r4, #36]	; 0x24
 8005516:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800551a:	6005      	str	r5, [r0, #0]
 800551c:	60c5      	str	r5, [r0, #12]
 800551e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	b151      	cbz	r1, 800553a <_dtoa_r+0x4a>
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	604a      	str	r2, [r1, #4]
 8005528:	2301      	movs	r3, #1
 800552a:	4093      	lsls	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
 800552e:	4620      	mov	r0, r4
 8005530:	f001 fa1d 	bl	800696e <_Bfree>
 8005534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	1e3b      	subs	r3, r7, #0
 800553c:	bfbb      	ittet	lt
 800553e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005542:	9301      	strlt	r3, [sp, #4]
 8005544:	2300      	movge	r3, #0
 8005546:	2201      	movlt	r2, #1
 8005548:	bfac      	ite	ge
 800554a:	f8c8 3000 	strge.w	r3, [r8]
 800554e:	f8c8 2000 	strlt.w	r2, [r8]
 8005552:	4baf      	ldr	r3, [pc, #700]	; (8005810 <_dtoa_r+0x320>)
 8005554:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005558:	ea33 0308 	bics.w	r3, r3, r8
 800555c:	d114      	bne.n	8005588 <_dtoa_r+0x98>
 800555e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005560:	f242 730f 	movw	r3, #9999	; 0x270f
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	9b00      	ldr	r3, [sp, #0]
 8005568:	b923      	cbnz	r3, 8005574 <_dtoa_r+0x84>
 800556a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800556e:	2800      	cmp	r0, #0
 8005570:	f000 8542 	beq.w	8005ff8 <_dtoa_r+0xb08>
 8005574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005576:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005824 <_dtoa_r+0x334>
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8544 	beq.w	8006008 <_dtoa_r+0xb18>
 8005580:	f10b 0303 	add.w	r3, fp, #3
 8005584:	f000 bd3e 	b.w	8006004 <_dtoa_r+0xb14>
 8005588:	e9dd 6700 	ldrd	r6, r7, [sp]
 800558c:	2200      	movs	r2, #0
 800558e:	2300      	movs	r3, #0
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	f7fb faa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005598:	4681      	mov	r9, r0
 800559a:	b168      	cbz	r0, 80055b8 <_dtoa_r+0xc8>
 800559c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800559e:	2301      	movs	r3, #1
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8524 	beq.w	8005ff2 <_dtoa_r+0xb02>
 80055aa:	4b9a      	ldr	r3, [pc, #616]	; (8005814 <_dtoa_r+0x324>)
 80055ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	f000 bd28 	b.w	8006008 <_dtoa_r+0xb18>
 80055b8:	aa14      	add	r2, sp, #80	; 0x50
 80055ba:	a915      	add	r1, sp, #84	; 0x54
 80055bc:	ec47 6b10 	vmov	d0, r6, r7
 80055c0:	4620      	mov	r0, r4
 80055c2:	f001 fce1 	bl	8006f88 <__d2b>
 80055c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80055ca:	9004      	str	r0, [sp, #16]
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	d07c      	beq.n	80056ca <_dtoa_r+0x1da>
 80055d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80055d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80055d8:	46b2      	mov	sl, r6
 80055da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80055de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80055e6:	2200      	movs	r2, #0
 80055e8:	4b8b      	ldr	r3, [pc, #556]	; (8005818 <_dtoa_r+0x328>)
 80055ea:	4650      	mov	r0, sl
 80055ec:	4659      	mov	r1, fp
 80055ee:	f7fa fe53 	bl	8000298 <__aeabi_dsub>
 80055f2:	a381      	add	r3, pc, #516	; (adr r3, 80057f8 <_dtoa_r+0x308>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fb f806 	bl	8000608 <__aeabi_dmul>
 80055fc:	a380      	add	r3, pc, #512	; (adr r3, 8005800 <_dtoa_r+0x310>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fa fe4b 	bl	800029c <__adddf3>
 8005606:	4606      	mov	r6, r0
 8005608:	4628      	mov	r0, r5
 800560a:	460f      	mov	r7, r1
 800560c:	f7fa ff92 	bl	8000534 <__aeabi_i2d>
 8005610:	a37d      	add	r3, pc, #500	; (adr r3, 8005808 <_dtoa_r+0x318>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa fff7 	bl	8000608 <__aeabi_dmul>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	f7fa fe3b 	bl	800029c <__adddf3>
 8005626:	4606      	mov	r6, r0
 8005628:	460f      	mov	r7, r1
 800562a:	f7fb fa9d 	bl	8000b68 <__aeabi_d2iz>
 800562e:	2200      	movs	r2, #0
 8005630:	4682      	mov	sl, r0
 8005632:	2300      	movs	r3, #0
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f7fb fa58 	bl	8000aec <__aeabi_dcmplt>
 800563c:	b148      	cbz	r0, 8005652 <_dtoa_r+0x162>
 800563e:	4650      	mov	r0, sl
 8005640:	f7fa ff78 	bl	8000534 <__aeabi_i2d>
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	f7fb fa46 	bl	8000ad8 <__aeabi_dcmpeq>
 800564c:	b908      	cbnz	r0, 8005652 <_dtoa_r+0x162>
 800564e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005652:	f1ba 0f16 	cmp.w	sl, #22
 8005656:	d859      	bhi.n	800570c <_dtoa_r+0x21c>
 8005658:	4970      	ldr	r1, [pc, #448]	; (800581c <_dtoa_r+0x32c>)
 800565a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800565e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005666:	f7fb fa5f 	bl	8000b28 <__aeabi_dcmpgt>
 800566a:	2800      	cmp	r0, #0
 800566c:	d050      	beq.n	8005710 <_dtoa_r+0x220>
 800566e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005672:	2300      	movs	r3, #0
 8005674:	930f      	str	r3, [sp, #60]	; 0x3c
 8005676:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005678:	1b5d      	subs	r5, r3, r5
 800567a:	f1b5 0801 	subs.w	r8, r5, #1
 800567e:	bf49      	itett	mi
 8005680:	f1c5 0301 	rsbmi	r3, r5, #1
 8005684:	2300      	movpl	r3, #0
 8005686:	9305      	strmi	r3, [sp, #20]
 8005688:	f04f 0800 	movmi.w	r8, #0
 800568c:	bf58      	it	pl
 800568e:	9305      	strpl	r3, [sp, #20]
 8005690:	f1ba 0f00 	cmp.w	sl, #0
 8005694:	db3e      	blt.n	8005714 <_dtoa_r+0x224>
 8005696:	2300      	movs	r3, #0
 8005698:	44d0      	add	r8, sl
 800569a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800569e:	9307      	str	r3, [sp, #28]
 80056a0:	9b06      	ldr	r3, [sp, #24]
 80056a2:	2b09      	cmp	r3, #9
 80056a4:	f200 8090 	bhi.w	80057c8 <_dtoa_r+0x2d8>
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	bfc4      	itt	gt
 80056ac:	3b04      	subgt	r3, #4
 80056ae:	9306      	strgt	r3, [sp, #24]
 80056b0:	9b06      	ldr	r3, [sp, #24]
 80056b2:	f1a3 0302 	sub.w	r3, r3, #2
 80056b6:	bfcc      	ite	gt
 80056b8:	2500      	movgt	r5, #0
 80056ba:	2501      	movle	r5, #1
 80056bc:	2b03      	cmp	r3, #3
 80056be:	f200 808f 	bhi.w	80057e0 <_dtoa_r+0x2f0>
 80056c2:	e8df f003 	tbb	[pc, r3]
 80056c6:	7f7d      	.short	0x7f7d
 80056c8:	7131      	.short	0x7131
 80056ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80056ce:	441d      	add	r5, r3
 80056d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80056d4:	2820      	cmp	r0, #32
 80056d6:	dd13      	ble.n	8005700 <_dtoa_r+0x210>
 80056d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80056dc:	9b00      	ldr	r3, [sp, #0]
 80056de:	fa08 f800 	lsl.w	r8, r8, r0
 80056e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80056e6:	fa23 f000 	lsr.w	r0, r3, r0
 80056ea:	ea48 0000 	orr.w	r0, r8, r0
 80056ee:	f7fa ff11 	bl	8000514 <__aeabi_ui2d>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4682      	mov	sl, r0
 80056f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80056fa:	3d01      	subs	r5, #1
 80056fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80056fe:	e772      	b.n	80055e6 <_dtoa_r+0xf6>
 8005700:	9b00      	ldr	r3, [sp, #0]
 8005702:	f1c0 0020 	rsb	r0, r0, #32
 8005706:	fa03 f000 	lsl.w	r0, r3, r0
 800570a:	e7f0      	b.n	80056ee <_dtoa_r+0x1fe>
 800570c:	2301      	movs	r3, #1
 800570e:	e7b1      	b.n	8005674 <_dtoa_r+0x184>
 8005710:	900f      	str	r0, [sp, #60]	; 0x3c
 8005712:	e7b0      	b.n	8005676 <_dtoa_r+0x186>
 8005714:	9b05      	ldr	r3, [sp, #20]
 8005716:	eba3 030a 	sub.w	r3, r3, sl
 800571a:	9305      	str	r3, [sp, #20]
 800571c:	f1ca 0300 	rsb	r3, sl, #0
 8005720:	9307      	str	r3, [sp, #28]
 8005722:	2300      	movs	r3, #0
 8005724:	930e      	str	r3, [sp, #56]	; 0x38
 8005726:	e7bb      	b.n	80056a0 <_dtoa_r+0x1b0>
 8005728:	2301      	movs	r3, #1
 800572a:	930a      	str	r3, [sp, #40]	; 0x28
 800572c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800572e:	2b00      	cmp	r3, #0
 8005730:	dd59      	ble.n	80057e6 <_dtoa_r+0x2f6>
 8005732:	9302      	str	r3, [sp, #8]
 8005734:	4699      	mov	r9, r3
 8005736:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005738:	2200      	movs	r2, #0
 800573a:	6072      	str	r2, [r6, #4]
 800573c:	2204      	movs	r2, #4
 800573e:	f102 0014 	add.w	r0, r2, #20
 8005742:	4298      	cmp	r0, r3
 8005744:	6871      	ldr	r1, [r6, #4]
 8005746:	d953      	bls.n	80057f0 <_dtoa_r+0x300>
 8005748:	4620      	mov	r0, r4
 800574a:	f001 f8dc 	bl	8006906 <_Balloc>
 800574e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005750:	6030      	str	r0, [r6, #0]
 8005752:	f1b9 0f0e 	cmp.w	r9, #14
 8005756:	f8d3 b000 	ldr.w	fp, [r3]
 800575a:	f200 80e6 	bhi.w	800592a <_dtoa_r+0x43a>
 800575e:	2d00      	cmp	r5, #0
 8005760:	f000 80e3 	beq.w	800592a <_dtoa_r+0x43a>
 8005764:	ed9d 7b00 	vldr	d7, [sp]
 8005768:	f1ba 0f00 	cmp.w	sl, #0
 800576c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005770:	dd74      	ble.n	800585c <_dtoa_r+0x36c>
 8005772:	4a2a      	ldr	r2, [pc, #168]	; (800581c <_dtoa_r+0x32c>)
 8005774:	f00a 030f 	and.w	r3, sl, #15
 8005778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800577c:	ed93 7b00 	vldr	d7, [r3]
 8005780:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005784:	06f0      	lsls	r0, r6, #27
 8005786:	ed8d 7b08 	vstr	d7, [sp, #32]
 800578a:	d565      	bpl.n	8005858 <_dtoa_r+0x368>
 800578c:	4b24      	ldr	r3, [pc, #144]	; (8005820 <_dtoa_r+0x330>)
 800578e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005792:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005796:	f7fb f861 	bl	800085c <__aeabi_ddiv>
 800579a:	e9cd 0100 	strd	r0, r1, [sp]
 800579e:	f006 060f 	and.w	r6, r6, #15
 80057a2:	2503      	movs	r5, #3
 80057a4:	4f1e      	ldr	r7, [pc, #120]	; (8005820 <_dtoa_r+0x330>)
 80057a6:	e04c      	b.n	8005842 <_dtoa_r+0x352>
 80057a8:	2301      	movs	r3, #1
 80057aa:	930a      	str	r3, [sp, #40]	; 0x28
 80057ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ae:	4453      	add	r3, sl
 80057b0:	f103 0901 	add.w	r9, r3, #1
 80057b4:	9302      	str	r3, [sp, #8]
 80057b6:	464b      	mov	r3, r9
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	bfb8      	it	lt
 80057bc:	2301      	movlt	r3, #1
 80057be:	e7ba      	b.n	8005736 <_dtoa_r+0x246>
 80057c0:	2300      	movs	r3, #0
 80057c2:	e7b2      	b.n	800572a <_dtoa_r+0x23a>
 80057c4:	2300      	movs	r3, #0
 80057c6:	e7f0      	b.n	80057aa <_dtoa_r+0x2ba>
 80057c8:	2501      	movs	r5, #1
 80057ca:	2300      	movs	r3, #0
 80057cc:	9306      	str	r3, [sp, #24]
 80057ce:	950a      	str	r5, [sp, #40]	; 0x28
 80057d0:	f04f 33ff 	mov.w	r3, #4294967295
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	4699      	mov	r9, r3
 80057d8:	2200      	movs	r2, #0
 80057da:	2312      	movs	r3, #18
 80057dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80057de:	e7aa      	b.n	8005736 <_dtoa_r+0x246>
 80057e0:	2301      	movs	r3, #1
 80057e2:	930a      	str	r3, [sp, #40]	; 0x28
 80057e4:	e7f4      	b.n	80057d0 <_dtoa_r+0x2e0>
 80057e6:	2301      	movs	r3, #1
 80057e8:	9302      	str	r3, [sp, #8]
 80057ea:	4699      	mov	r9, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	e7f5      	b.n	80057dc <_dtoa_r+0x2ec>
 80057f0:	3101      	adds	r1, #1
 80057f2:	6071      	str	r1, [r6, #4]
 80057f4:	0052      	lsls	r2, r2, #1
 80057f6:	e7a2      	b.n	800573e <_dtoa_r+0x24e>
 80057f8:	636f4361 	.word	0x636f4361
 80057fc:	3fd287a7 	.word	0x3fd287a7
 8005800:	8b60c8b3 	.word	0x8b60c8b3
 8005804:	3fc68a28 	.word	0x3fc68a28
 8005808:	509f79fb 	.word	0x509f79fb
 800580c:	3fd34413 	.word	0x3fd34413
 8005810:	7ff00000 	.word	0x7ff00000
 8005814:	08008a04 	.word	0x08008a04
 8005818:	3ff80000 	.word	0x3ff80000
 800581c:	08008908 	.word	0x08008908
 8005820:	080088e0 	.word	0x080088e0
 8005824:	08008869 	.word	0x08008869
 8005828:	07f1      	lsls	r1, r6, #31
 800582a:	d508      	bpl.n	800583e <_dtoa_r+0x34e>
 800582c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005834:	f7fa fee8 	bl	8000608 <__aeabi_dmul>
 8005838:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800583c:	3501      	adds	r5, #1
 800583e:	1076      	asrs	r6, r6, #1
 8005840:	3708      	adds	r7, #8
 8005842:	2e00      	cmp	r6, #0
 8005844:	d1f0      	bne.n	8005828 <_dtoa_r+0x338>
 8005846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800584a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800584e:	f7fb f805 	bl	800085c <__aeabi_ddiv>
 8005852:	e9cd 0100 	strd	r0, r1, [sp]
 8005856:	e01a      	b.n	800588e <_dtoa_r+0x39e>
 8005858:	2502      	movs	r5, #2
 800585a:	e7a3      	b.n	80057a4 <_dtoa_r+0x2b4>
 800585c:	f000 80a0 	beq.w	80059a0 <_dtoa_r+0x4b0>
 8005860:	f1ca 0600 	rsb	r6, sl, #0
 8005864:	4b9f      	ldr	r3, [pc, #636]	; (8005ae4 <_dtoa_r+0x5f4>)
 8005866:	4fa0      	ldr	r7, [pc, #640]	; (8005ae8 <_dtoa_r+0x5f8>)
 8005868:	f006 020f 	and.w	r2, r6, #15
 800586c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005878:	f7fa fec6 	bl	8000608 <__aeabi_dmul>
 800587c:	e9cd 0100 	strd	r0, r1, [sp]
 8005880:	1136      	asrs	r6, r6, #4
 8005882:	2300      	movs	r3, #0
 8005884:	2502      	movs	r5, #2
 8005886:	2e00      	cmp	r6, #0
 8005888:	d17f      	bne.n	800598a <_dtoa_r+0x49a>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e1      	bne.n	8005852 <_dtoa_r+0x362>
 800588e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8087 	beq.w	80059a4 <_dtoa_r+0x4b4>
 8005896:	e9dd 6700 	ldrd	r6, r7, [sp]
 800589a:	2200      	movs	r2, #0
 800589c:	4b93      	ldr	r3, [pc, #588]	; (8005aec <_dtoa_r+0x5fc>)
 800589e:	4630      	mov	r0, r6
 80058a0:	4639      	mov	r1, r7
 80058a2:	f7fb f923 	bl	8000aec <__aeabi_dcmplt>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d07c      	beq.n	80059a4 <_dtoa_r+0x4b4>
 80058aa:	f1b9 0f00 	cmp.w	r9, #0
 80058ae:	d079      	beq.n	80059a4 <_dtoa_r+0x4b4>
 80058b0:	9b02      	ldr	r3, [sp, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dd35      	ble.n	8005922 <_dtoa_r+0x432>
 80058b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80058ba:	9308      	str	r3, [sp, #32]
 80058bc:	4639      	mov	r1, r7
 80058be:	2200      	movs	r2, #0
 80058c0:	4b8b      	ldr	r3, [pc, #556]	; (8005af0 <_dtoa_r+0x600>)
 80058c2:	4630      	mov	r0, r6
 80058c4:	f7fa fea0 	bl	8000608 <__aeabi_dmul>
 80058c8:	e9cd 0100 	strd	r0, r1, [sp]
 80058cc:	9f02      	ldr	r7, [sp, #8]
 80058ce:	3501      	adds	r5, #1
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7fa fe2f 	bl	8000534 <__aeabi_i2d>
 80058d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058da:	f7fa fe95 	bl	8000608 <__aeabi_dmul>
 80058de:	2200      	movs	r2, #0
 80058e0:	4b84      	ldr	r3, [pc, #528]	; (8005af4 <_dtoa_r+0x604>)
 80058e2:	f7fa fcdb 	bl	800029c <__adddf3>
 80058e6:	4605      	mov	r5, r0
 80058e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	d15d      	bne.n	80059ac <_dtoa_r+0x4bc>
 80058f0:	2200      	movs	r2, #0
 80058f2:	4b81      	ldr	r3, [pc, #516]	; (8005af8 <_dtoa_r+0x608>)
 80058f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058f8:	f7fa fcce 	bl	8000298 <__aeabi_dsub>
 80058fc:	462a      	mov	r2, r5
 80058fe:	4633      	mov	r3, r6
 8005900:	e9cd 0100 	strd	r0, r1, [sp]
 8005904:	f7fb f910 	bl	8000b28 <__aeabi_dcmpgt>
 8005908:	2800      	cmp	r0, #0
 800590a:	f040 8288 	bne.w	8005e1e <_dtoa_r+0x92e>
 800590e:	462a      	mov	r2, r5
 8005910:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005918:	f7fb f8e8 	bl	8000aec <__aeabi_dcmplt>
 800591c:	2800      	cmp	r0, #0
 800591e:	f040 827c 	bne.w	8005e1a <_dtoa_r+0x92a>
 8005922:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005926:	e9cd 2300 	strd	r2, r3, [sp]
 800592a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800592c:	2b00      	cmp	r3, #0
 800592e:	f2c0 8150 	blt.w	8005bd2 <_dtoa_r+0x6e2>
 8005932:	f1ba 0f0e 	cmp.w	sl, #14
 8005936:	f300 814c 	bgt.w	8005bd2 <_dtoa_r+0x6e2>
 800593a:	4b6a      	ldr	r3, [pc, #424]	; (8005ae4 <_dtoa_r+0x5f4>)
 800593c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005940:	ed93 7b00 	vldr	d7, [r3]
 8005944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005946:	2b00      	cmp	r3, #0
 8005948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800594c:	f280 80d8 	bge.w	8005b00 <_dtoa_r+0x610>
 8005950:	f1b9 0f00 	cmp.w	r9, #0
 8005954:	f300 80d4 	bgt.w	8005b00 <_dtoa_r+0x610>
 8005958:	f040 825e 	bne.w	8005e18 <_dtoa_r+0x928>
 800595c:	2200      	movs	r2, #0
 800595e:	4b66      	ldr	r3, [pc, #408]	; (8005af8 <_dtoa_r+0x608>)
 8005960:	ec51 0b17 	vmov	r0, r1, d7
 8005964:	f7fa fe50 	bl	8000608 <__aeabi_dmul>
 8005968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800596c:	f7fb f8d2 	bl	8000b14 <__aeabi_dcmpge>
 8005970:	464f      	mov	r7, r9
 8005972:	464e      	mov	r6, r9
 8005974:	2800      	cmp	r0, #0
 8005976:	f040 8234 	bne.w	8005de2 <_dtoa_r+0x8f2>
 800597a:	2331      	movs	r3, #49	; 0x31
 800597c:	f10b 0501 	add.w	r5, fp, #1
 8005980:	f88b 3000 	strb.w	r3, [fp]
 8005984:	f10a 0a01 	add.w	sl, sl, #1
 8005988:	e22f      	b.n	8005dea <_dtoa_r+0x8fa>
 800598a:	07f2      	lsls	r2, r6, #31
 800598c:	d505      	bpl.n	800599a <_dtoa_r+0x4aa>
 800598e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005992:	f7fa fe39 	bl	8000608 <__aeabi_dmul>
 8005996:	3501      	adds	r5, #1
 8005998:	2301      	movs	r3, #1
 800599a:	1076      	asrs	r6, r6, #1
 800599c:	3708      	adds	r7, #8
 800599e:	e772      	b.n	8005886 <_dtoa_r+0x396>
 80059a0:	2502      	movs	r5, #2
 80059a2:	e774      	b.n	800588e <_dtoa_r+0x39e>
 80059a4:	f8cd a020 	str.w	sl, [sp, #32]
 80059a8:	464f      	mov	r7, r9
 80059aa:	e791      	b.n	80058d0 <_dtoa_r+0x3e0>
 80059ac:	4b4d      	ldr	r3, [pc, #308]	; (8005ae4 <_dtoa_r+0x5f4>)
 80059ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80059b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d047      	beq.n	8005a4c <_dtoa_r+0x55c>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	2000      	movs	r0, #0
 80059c2:	494e      	ldr	r1, [pc, #312]	; (8005afc <_dtoa_r+0x60c>)
 80059c4:	f7fa ff4a 	bl	800085c <__aeabi_ddiv>
 80059c8:	462a      	mov	r2, r5
 80059ca:	4633      	mov	r3, r6
 80059cc:	f7fa fc64 	bl	8000298 <__aeabi_dsub>
 80059d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80059d4:	465d      	mov	r5, fp
 80059d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059da:	f7fb f8c5 	bl	8000b68 <__aeabi_d2iz>
 80059de:	4606      	mov	r6, r0
 80059e0:	f7fa fda8 	bl	8000534 <__aeabi_i2d>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059ec:	f7fa fc54 	bl	8000298 <__aeabi_dsub>
 80059f0:	3630      	adds	r6, #48	; 0x30
 80059f2:	f805 6b01 	strb.w	r6, [r5], #1
 80059f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059fa:	e9cd 0100 	strd	r0, r1, [sp]
 80059fe:	f7fb f875 	bl	8000aec <__aeabi_dcmplt>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d163      	bne.n	8005ace <_dtoa_r+0x5de>
 8005a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	4937      	ldr	r1, [pc, #220]	; (8005aec <_dtoa_r+0x5fc>)
 8005a0e:	f7fa fc43 	bl	8000298 <__aeabi_dsub>
 8005a12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a16:	f7fb f869 	bl	8000aec <__aeabi_dcmplt>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	f040 80b7 	bne.w	8005b8e <_dtoa_r+0x69e>
 8005a20:	eba5 030b 	sub.w	r3, r5, fp
 8005a24:	429f      	cmp	r7, r3
 8005a26:	f77f af7c 	ble.w	8005922 <_dtoa_r+0x432>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <_dtoa_r+0x600>)
 8005a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a32:	f7fa fde9 	bl	8000608 <__aeabi_dmul>
 8005a36:	2200      	movs	r2, #0
 8005a38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a3c:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <_dtoa_r+0x600>)
 8005a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a42:	f7fa fde1 	bl	8000608 <__aeabi_dmul>
 8005a46:	e9cd 0100 	strd	r0, r1, [sp]
 8005a4a:	e7c4      	b.n	80059d6 <_dtoa_r+0x4e6>
 8005a4c:	462a      	mov	r2, r5
 8005a4e:	4633      	mov	r3, r6
 8005a50:	f7fa fdda 	bl	8000608 <__aeabi_dmul>
 8005a54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a58:	eb0b 0507 	add.w	r5, fp, r7
 8005a5c:	465e      	mov	r6, fp
 8005a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a62:	f7fb f881 	bl	8000b68 <__aeabi_d2iz>
 8005a66:	4607      	mov	r7, r0
 8005a68:	f7fa fd64 	bl	8000534 <__aeabi_i2d>
 8005a6c:	3730      	adds	r7, #48	; 0x30
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a76:	f7fa fc0f 	bl	8000298 <__aeabi_dsub>
 8005a7a:	f806 7b01 	strb.w	r7, [r6], #1
 8005a7e:	42ae      	cmp	r6, r5
 8005a80:	e9cd 0100 	strd	r0, r1, [sp]
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	d126      	bne.n	8005ad8 <_dtoa_r+0x5e8>
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <_dtoa_r+0x60c>)
 8005a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a90:	f7fa fc04 	bl	800029c <__adddf3>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a9c:	f7fb f844 	bl	8000b28 <__aeabi_dcmpgt>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d174      	bne.n	8005b8e <_dtoa_r+0x69e>
 8005aa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4914      	ldr	r1, [pc, #80]	; (8005afc <_dtoa_r+0x60c>)
 8005aac:	f7fa fbf4 	bl	8000298 <__aeabi_dsub>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ab8:	f7fb f818 	bl	8000aec <__aeabi_dcmplt>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f43f af30 	beq.w	8005922 <_dtoa_r+0x432>
 8005ac2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ac6:	2b30      	cmp	r3, #48	; 0x30
 8005ac8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005acc:	d002      	beq.n	8005ad4 <_dtoa_r+0x5e4>
 8005ace:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005ad2:	e04a      	b.n	8005b6a <_dtoa_r+0x67a>
 8005ad4:	4615      	mov	r5, r2
 8005ad6:	e7f4      	b.n	8005ac2 <_dtoa_r+0x5d2>
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <_dtoa_r+0x600>)
 8005ada:	f7fa fd95 	bl	8000608 <__aeabi_dmul>
 8005ade:	e9cd 0100 	strd	r0, r1, [sp]
 8005ae2:	e7bc      	b.n	8005a5e <_dtoa_r+0x56e>
 8005ae4:	08008908 	.word	0x08008908
 8005ae8:	080088e0 	.word	0x080088e0
 8005aec:	3ff00000 	.word	0x3ff00000
 8005af0:	40240000 	.word	0x40240000
 8005af4:	401c0000 	.word	0x401c0000
 8005af8:	40140000 	.word	0x40140000
 8005afc:	3fe00000 	.word	0x3fe00000
 8005b00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b04:	465d      	mov	r5, fp
 8005b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	f7fa fea5 	bl	800085c <__aeabi_ddiv>
 8005b12:	f7fb f829 	bl	8000b68 <__aeabi_d2iz>
 8005b16:	4680      	mov	r8, r0
 8005b18:	f7fa fd0c 	bl	8000534 <__aeabi_i2d>
 8005b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b20:	f7fa fd72 	bl	8000608 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005b30:	f7fa fbb2 	bl	8000298 <__aeabi_dsub>
 8005b34:	f805 6b01 	strb.w	r6, [r5], #1
 8005b38:	eba5 060b 	sub.w	r6, r5, fp
 8005b3c:	45b1      	cmp	r9, r6
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	d139      	bne.n	8005bb8 <_dtoa_r+0x6c8>
 8005b44:	f7fa fbaa 	bl	800029c <__adddf3>
 8005b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	460f      	mov	r7, r1
 8005b50:	f7fa ffea 	bl	8000b28 <__aeabi_dcmpgt>
 8005b54:	b9c8      	cbnz	r0, 8005b8a <_dtoa_r+0x69a>
 8005b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fa ffbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b62:	b110      	cbz	r0, 8005b6a <_dtoa_r+0x67a>
 8005b64:	f018 0f01 	tst.w	r8, #1
 8005b68:	d10f      	bne.n	8005b8a <_dtoa_r+0x69a>
 8005b6a:	9904      	ldr	r1, [sp, #16]
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 fefe 	bl	800696e <_Bfree>
 8005b72:	2300      	movs	r3, #0
 8005b74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b76:	702b      	strb	r3, [r5, #0]
 8005b78:	f10a 0301 	add.w	r3, sl, #1
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8241 	beq.w	8006008 <_dtoa_r+0xb18>
 8005b86:	601d      	str	r5, [r3, #0]
 8005b88:	e23e      	b.n	8006008 <_dtoa_r+0xb18>
 8005b8a:	f8cd a020 	str.w	sl, [sp, #32]
 8005b8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b92:	2a39      	cmp	r2, #57	; 0x39
 8005b94:	f105 33ff 	add.w	r3, r5, #4294967295
 8005b98:	d108      	bne.n	8005bac <_dtoa_r+0x6bc>
 8005b9a:	459b      	cmp	fp, r3
 8005b9c:	d10a      	bne.n	8005bb4 <_dtoa_r+0x6c4>
 8005b9e:	9b08      	ldr	r3, [sp, #32]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	9308      	str	r3, [sp, #32]
 8005ba4:	2330      	movs	r3, #48	; 0x30
 8005ba6:	f88b 3000 	strb.w	r3, [fp]
 8005baa:	465b      	mov	r3, fp
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	3201      	adds	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	e78c      	b.n	8005ace <_dtoa_r+0x5de>
 8005bb4:	461d      	mov	r5, r3
 8005bb6:	e7ea      	b.n	8005b8e <_dtoa_r+0x69e>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4b9b      	ldr	r3, [pc, #620]	; (8005e28 <_dtoa_r+0x938>)
 8005bbc:	f7fa fd24 	bl	8000608 <__aeabi_dmul>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	460f      	mov	r7, r1
 8005bc8:	f7fa ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d09a      	beq.n	8005b06 <_dtoa_r+0x616>
 8005bd0:	e7cb      	b.n	8005b6a <_dtoa_r+0x67a>
 8005bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd4:	2a00      	cmp	r2, #0
 8005bd6:	f000 808b 	beq.w	8005cf0 <_dtoa_r+0x800>
 8005bda:	9a06      	ldr	r2, [sp, #24]
 8005bdc:	2a01      	cmp	r2, #1
 8005bde:	dc6e      	bgt.n	8005cbe <_dtoa_r+0x7ce>
 8005be0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d067      	beq.n	8005cb6 <_dtoa_r+0x7c6>
 8005be6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bea:	9f07      	ldr	r7, [sp, #28]
 8005bec:	9d05      	ldr	r5, [sp, #20]
 8005bee:	9a05      	ldr	r2, [sp, #20]
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	441a      	add	r2, r3
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	9205      	str	r2, [sp, #20]
 8005bf8:	4498      	add	r8, r3
 8005bfa:	f000 ff96 	bl	8006b2a <__i2b>
 8005bfe:	4606      	mov	r6, r0
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	dd0c      	ble.n	8005c1e <_dtoa_r+0x72e>
 8005c04:	f1b8 0f00 	cmp.w	r8, #0
 8005c08:	dd09      	ble.n	8005c1e <_dtoa_r+0x72e>
 8005c0a:	4545      	cmp	r5, r8
 8005c0c:	9a05      	ldr	r2, [sp, #20]
 8005c0e:	462b      	mov	r3, r5
 8005c10:	bfa8      	it	ge
 8005c12:	4643      	movge	r3, r8
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	9205      	str	r2, [sp, #20]
 8005c18:	1aed      	subs	r5, r5, r3
 8005c1a:	eba8 0803 	sub.w	r8, r8, r3
 8005c1e:	9b07      	ldr	r3, [sp, #28]
 8005c20:	b1eb      	cbz	r3, 8005c5e <_dtoa_r+0x76e>
 8005c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d067      	beq.n	8005cf8 <_dtoa_r+0x808>
 8005c28:	b18f      	cbz	r7, 8005c4e <_dtoa_r+0x75e>
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	463a      	mov	r2, r7
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f001 f81a 	bl	8006c68 <__pow5mult>
 8005c34:	9a04      	ldr	r2, [sp, #16]
 8005c36:	4601      	mov	r1, r0
 8005c38:	4606      	mov	r6, r0
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 ff7e 	bl	8006b3c <__multiply>
 8005c40:	9904      	ldr	r1, [sp, #16]
 8005c42:	9008      	str	r0, [sp, #32]
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 fe92 	bl	800696e <_Bfree>
 8005c4a:	9b08      	ldr	r3, [sp, #32]
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	9b07      	ldr	r3, [sp, #28]
 8005c50:	1bda      	subs	r2, r3, r7
 8005c52:	d004      	beq.n	8005c5e <_dtoa_r+0x76e>
 8005c54:	9904      	ldr	r1, [sp, #16]
 8005c56:	4620      	mov	r0, r4
 8005c58:	f001 f806 	bl	8006c68 <__pow5mult>
 8005c5c:	9004      	str	r0, [sp, #16]
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 ff62 	bl	8006b2a <__i2b>
 8005c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c68:	4607      	mov	r7, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 81d0 	beq.w	8006010 <_dtoa_r+0xb20>
 8005c70:	461a      	mov	r2, r3
 8005c72:	4601      	mov	r1, r0
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 fff7 	bl	8006c68 <__pow5mult>
 8005c7a:	9b06      	ldr	r3, [sp, #24]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	4607      	mov	r7, r0
 8005c80:	dc40      	bgt.n	8005d04 <_dtoa_r+0x814>
 8005c82:	9b00      	ldr	r3, [sp, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d139      	bne.n	8005cfc <_dtoa_r+0x80c>
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d136      	bne.n	8005d00 <_dtoa_r+0x810>
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c98:	0d1b      	lsrs	r3, r3, #20
 8005c9a:	051b      	lsls	r3, r3, #20
 8005c9c:	b12b      	cbz	r3, 8005caa <_dtoa_r+0x7ba>
 8005c9e:	9b05      	ldr	r3, [sp, #20]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	9305      	str	r3, [sp, #20]
 8005ca4:	f108 0801 	add.w	r8, r8, #1
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9307      	str	r3, [sp, #28]
 8005cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d12a      	bne.n	8005d08 <_dtoa_r+0x818>
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	e030      	b.n	8005d18 <_dtoa_r+0x828>
 8005cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cbc:	e795      	b.n	8005bea <_dtoa_r+0x6fa>
 8005cbe:	9b07      	ldr	r3, [sp, #28]
 8005cc0:	f109 37ff 	add.w	r7, r9, #4294967295
 8005cc4:	42bb      	cmp	r3, r7
 8005cc6:	bfbf      	itttt	lt
 8005cc8:	9b07      	ldrlt	r3, [sp, #28]
 8005cca:	9707      	strlt	r7, [sp, #28]
 8005ccc:	1afa      	sublt	r2, r7, r3
 8005cce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005cd0:	bfbb      	ittet	lt
 8005cd2:	189b      	addlt	r3, r3, r2
 8005cd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005cd6:	1bdf      	subge	r7, r3, r7
 8005cd8:	2700      	movlt	r7, #0
 8005cda:	f1b9 0f00 	cmp.w	r9, #0
 8005cde:	bfb5      	itete	lt
 8005ce0:	9b05      	ldrlt	r3, [sp, #20]
 8005ce2:	9d05      	ldrge	r5, [sp, #20]
 8005ce4:	eba3 0509 	sublt.w	r5, r3, r9
 8005ce8:	464b      	movge	r3, r9
 8005cea:	bfb8      	it	lt
 8005cec:	2300      	movlt	r3, #0
 8005cee:	e77e      	b.n	8005bee <_dtoa_r+0x6fe>
 8005cf0:	9f07      	ldr	r7, [sp, #28]
 8005cf2:	9d05      	ldr	r5, [sp, #20]
 8005cf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005cf6:	e783      	b.n	8005c00 <_dtoa_r+0x710>
 8005cf8:	9a07      	ldr	r2, [sp, #28]
 8005cfa:	e7ab      	b.n	8005c54 <_dtoa_r+0x764>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e7d4      	b.n	8005caa <_dtoa_r+0x7ba>
 8005d00:	9b00      	ldr	r3, [sp, #0]
 8005d02:	e7d2      	b.n	8005caa <_dtoa_r+0x7ba>
 8005d04:	2300      	movs	r3, #0
 8005d06:	9307      	str	r3, [sp, #28]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005d0e:	6918      	ldr	r0, [r3, #16]
 8005d10:	f000 febd 	bl	8006a8e <__hi0bits>
 8005d14:	f1c0 0020 	rsb	r0, r0, #32
 8005d18:	4440      	add	r0, r8
 8005d1a:	f010 001f 	ands.w	r0, r0, #31
 8005d1e:	d047      	beq.n	8005db0 <_dtoa_r+0x8c0>
 8005d20:	f1c0 0320 	rsb	r3, r0, #32
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	dd3b      	ble.n	8005da0 <_dtoa_r+0x8b0>
 8005d28:	9b05      	ldr	r3, [sp, #20]
 8005d2a:	f1c0 001c 	rsb	r0, r0, #28
 8005d2e:	4403      	add	r3, r0
 8005d30:	9305      	str	r3, [sp, #20]
 8005d32:	4405      	add	r5, r0
 8005d34:	4480      	add	r8, r0
 8005d36:	9b05      	ldr	r3, [sp, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	dd05      	ble.n	8005d48 <_dtoa_r+0x858>
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	9904      	ldr	r1, [sp, #16]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 ffdf 	bl	8006d04 <__lshift>
 8005d46:	9004      	str	r0, [sp, #16]
 8005d48:	f1b8 0f00 	cmp.w	r8, #0
 8005d4c:	dd05      	ble.n	8005d5a <_dtoa_r+0x86a>
 8005d4e:	4639      	mov	r1, r7
 8005d50:	4642      	mov	r2, r8
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 ffd6 	bl	8006d04 <__lshift>
 8005d58:	4607      	mov	r7, r0
 8005d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d5c:	b353      	cbz	r3, 8005db4 <_dtoa_r+0x8c4>
 8005d5e:	4639      	mov	r1, r7
 8005d60:	9804      	ldr	r0, [sp, #16]
 8005d62:	f001 f823 	bl	8006dac <__mcmp>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	da24      	bge.n	8005db4 <_dtoa_r+0x8c4>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	220a      	movs	r2, #10
 8005d6e:	9904      	ldr	r1, [sp, #16]
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 fe13 	bl	800699c <__multadd>
 8005d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d78:	9004      	str	r0, [sp, #16]
 8005d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 814d 	beq.w	800601e <_dtoa_r+0xb2e>
 8005d84:	2300      	movs	r3, #0
 8005d86:	4631      	mov	r1, r6
 8005d88:	220a      	movs	r2, #10
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 fe06 	bl	800699c <__multadd>
 8005d90:	9b02      	ldr	r3, [sp, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	4606      	mov	r6, r0
 8005d96:	dc4f      	bgt.n	8005e38 <_dtoa_r+0x948>
 8005d98:	9b06      	ldr	r3, [sp, #24]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	dd4c      	ble.n	8005e38 <_dtoa_r+0x948>
 8005d9e:	e011      	b.n	8005dc4 <_dtoa_r+0x8d4>
 8005da0:	d0c9      	beq.n	8005d36 <_dtoa_r+0x846>
 8005da2:	9a05      	ldr	r2, [sp, #20]
 8005da4:	331c      	adds	r3, #28
 8005da6:	441a      	add	r2, r3
 8005da8:	9205      	str	r2, [sp, #20]
 8005daa:	441d      	add	r5, r3
 8005dac:	4498      	add	r8, r3
 8005dae:	e7c2      	b.n	8005d36 <_dtoa_r+0x846>
 8005db0:	4603      	mov	r3, r0
 8005db2:	e7f6      	b.n	8005da2 <_dtoa_r+0x8b2>
 8005db4:	f1b9 0f00 	cmp.w	r9, #0
 8005db8:	dc38      	bgt.n	8005e2c <_dtoa_r+0x93c>
 8005dba:	9b06      	ldr	r3, [sp, #24]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	dd35      	ble.n	8005e2c <_dtoa_r+0x93c>
 8005dc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8005dc4:	9b02      	ldr	r3, [sp, #8]
 8005dc6:	b963      	cbnz	r3, 8005de2 <_dtoa_r+0x8f2>
 8005dc8:	4639      	mov	r1, r7
 8005dca:	2205      	movs	r2, #5
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 fde5 	bl	800699c <__multadd>
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	9804      	ldr	r0, [sp, #16]
 8005dd8:	f000 ffe8 	bl	8006dac <__mcmp>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	f73f adcc 	bgt.w	800597a <_dtoa_r+0x48a>
 8005de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de4:	465d      	mov	r5, fp
 8005de6:	ea6f 0a03 	mvn.w	sl, r3
 8005dea:	f04f 0900 	mov.w	r9, #0
 8005dee:	4639      	mov	r1, r7
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 fdbc 	bl	800696e <_Bfree>
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	f43f aeb7 	beq.w	8005b6a <_dtoa_r+0x67a>
 8005dfc:	f1b9 0f00 	cmp.w	r9, #0
 8005e00:	d005      	beq.n	8005e0e <_dtoa_r+0x91e>
 8005e02:	45b1      	cmp	r9, r6
 8005e04:	d003      	beq.n	8005e0e <_dtoa_r+0x91e>
 8005e06:	4649      	mov	r1, r9
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fdb0 	bl	800696e <_Bfree>
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fdac 	bl	800696e <_Bfree>
 8005e16:	e6a8      	b.n	8005b6a <_dtoa_r+0x67a>
 8005e18:	2700      	movs	r7, #0
 8005e1a:	463e      	mov	r6, r7
 8005e1c:	e7e1      	b.n	8005de2 <_dtoa_r+0x8f2>
 8005e1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005e22:	463e      	mov	r6, r7
 8005e24:	e5a9      	b.n	800597a <_dtoa_r+0x48a>
 8005e26:	bf00      	nop
 8005e28:	40240000 	.word	0x40240000
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80fa 	beq.w	800602c <_dtoa_r+0xb3c>
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	dd05      	ble.n	8005e48 <_dtoa_r+0x958>
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4620      	mov	r0, r4
 8005e42:	f000 ff5f 	bl	8006d04 <__lshift>
 8005e46:	4606      	mov	r6, r0
 8005e48:	9b07      	ldr	r3, [sp, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d04c      	beq.n	8005ee8 <_dtoa_r+0x9f8>
 8005e4e:	6871      	ldr	r1, [r6, #4]
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fd58 	bl	8006906 <_Balloc>
 8005e56:	6932      	ldr	r2, [r6, #16]
 8005e58:	3202      	adds	r2, #2
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	0092      	lsls	r2, r2, #2
 8005e5e:	f106 010c 	add.w	r1, r6, #12
 8005e62:	300c      	adds	r0, #12
 8005e64:	f000 fd44 	bl	80068f0 <memcpy>
 8005e68:	2201      	movs	r2, #1
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 ff49 	bl	8006d04 <__lshift>
 8005e72:	9b00      	ldr	r3, [sp, #0]
 8005e74:	f8cd b014 	str.w	fp, [sp, #20]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	46b1      	mov	r9, r6
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	4606      	mov	r6, r0
 8005e82:	4639      	mov	r1, r7
 8005e84:	9804      	ldr	r0, [sp, #16]
 8005e86:	f7ff faa5 	bl	80053d4 <quorem>
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e92:	9804      	ldr	r0, [sp, #16]
 8005e94:	f000 ff8a 	bl	8006dac <__mcmp>
 8005e98:	4632      	mov	r2, r6
 8005e9a:	9000      	str	r0, [sp, #0]
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 ff9e 	bl	8006de0 <__mdiff>
 8005ea4:	68c3      	ldr	r3, [r0, #12]
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	bb03      	cbnz	r3, 8005eec <_dtoa_r+0x9fc>
 8005eaa:	4601      	mov	r1, r0
 8005eac:	9008      	str	r0, [sp, #32]
 8005eae:	9804      	ldr	r0, [sp, #16]
 8005eb0:	f000 ff7c 	bl	8006dac <__mcmp>
 8005eb4:	9a08      	ldr	r2, [sp, #32]
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4620      	mov	r0, r4
 8005ebc:	9308      	str	r3, [sp, #32]
 8005ebe:	f000 fd56 	bl	800696e <_Bfree>
 8005ec2:	9b08      	ldr	r3, [sp, #32]
 8005ec4:	b9a3      	cbnz	r3, 8005ef0 <_dtoa_r+0xa00>
 8005ec6:	9a06      	ldr	r2, [sp, #24]
 8005ec8:	b992      	cbnz	r2, 8005ef0 <_dtoa_r+0xa00>
 8005eca:	9a07      	ldr	r2, [sp, #28]
 8005ecc:	b982      	cbnz	r2, 8005ef0 <_dtoa_r+0xa00>
 8005ece:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ed2:	d029      	beq.n	8005f28 <_dtoa_r+0xa38>
 8005ed4:	9b00      	ldr	r3, [sp, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	dd01      	ble.n	8005ede <_dtoa_r+0x9ee>
 8005eda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005ede:	9b05      	ldr	r3, [sp, #20]
 8005ee0:	1c5d      	adds	r5, r3, #1
 8005ee2:	f883 8000 	strb.w	r8, [r3]
 8005ee6:	e782      	b.n	8005dee <_dtoa_r+0x8fe>
 8005ee8:	4630      	mov	r0, r6
 8005eea:	e7c2      	b.n	8005e72 <_dtoa_r+0x982>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e7e3      	b.n	8005eb8 <_dtoa_r+0x9c8>
 8005ef0:	9a00      	ldr	r2, [sp, #0]
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	db04      	blt.n	8005f00 <_dtoa_r+0xa10>
 8005ef6:	d125      	bne.n	8005f44 <_dtoa_r+0xa54>
 8005ef8:	9a06      	ldr	r2, [sp, #24]
 8005efa:	bb1a      	cbnz	r2, 8005f44 <_dtoa_r+0xa54>
 8005efc:	9a07      	ldr	r2, [sp, #28]
 8005efe:	bb0a      	cbnz	r2, 8005f44 <_dtoa_r+0xa54>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	ddec      	ble.n	8005ede <_dtoa_r+0x9ee>
 8005f04:	2201      	movs	r2, #1
 8005f06:	9904      	ldr	r1, [sp, #16]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fefb 	bl	8006d04 <__lshift>
 8005f0e:	4639      	mov	r1, r7
 8005f10:	9004      	str	r0, [sp, #16]
 8005f12:	f000 ff4b 	bl	8006dac <__mcmp>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	dc03      	bgt.n	8005f22 <_dtoa_r+0xa32>
 8005f1a:	d1e0      	bne.n	8005ede <_dtoa_r+0x9ee>
 8005f1c:	f018 0f01 	tst.w	r8, #1
 8005f20:	d0dd      	beq.n	8005ede <_dtoa_r+0x9ee>
 8005f22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f26:	d1d8      	bne.n	8005eda <_dtoa_r+0x9ea>
 8005f28:	9b05      	ldr	r3, [sp, #20]
 8005f2a:	9a05      	ldr	r2, [sp, #20]
 8005f2c:	1c5d      	adds	r5, r3, #1
 8005f2e:	2339      	movs	r3, #57	; 0x39
 8005f30:	7013      	strb	r3, [r2, #0]
 8005f32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f36:	2b39      	cmp	r3, #57	; 0x39
 8005f38:	f105 32ff 	add.w	r2, r5, #4294967295
 8005f3c:	d04f      	beq.n	8005fde <_dtoa_r+0xaee>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	7013      	strb	r3, [r2, #0]
 8005f42:	e754      	b.n	8005dee <_dtoa_r+0x8fe>
 8005f44:	9a05      	ldr	r2, [sp, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f102 0501 	add.w	r5, r2, #1
 8005f4c:	dd06      	ble.n	8005f5c <_dtoa_r+0xa6c>
 8005f4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f52:	d0e9      	beq.n	8005f28 <_dtoa_r+0xa38>
 8005f54:	f108 0801 	add.w	r8, r8, #1
 8005f58:	9b05      	ldr	r3, [sp, #20]
 8005f5a:	e7c2      	b.n	8005ee2 <_dtoa_r+0x9f2>
 8005f5c:	9a02      	ldr	r2, [sp, #8]
 8005f5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005f62:	eba5 030b 	sub.w	r3, r5, fp
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d021      	beq.n	8005fae <_dtoa_r+0xabe>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	220a      	movs	r2, #10
 8005f6e:	9904      	ldr	r1, [sp, #16]
 8005f70:	4620      	mov	r0, r4
 8005f72:	f000 fd13 	bl	800699c <__multadd>
 8005f76:	45b1      	cmp	r9, r6
 8005f78:	9004      	str	r0, [sp, #16]
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	f04f 020a 	mov.w	r2, #10
 8005f82:	4649      	mov	r1, r9
 8005f84:	4620      	mov	r0, r4
 8005f86:	d105      	bne.n	8005f94 <_dtoa_r+0xaa4>
 8005f88:	f000 fd08 	bl	800699c <__multadd>
 8005f8c:	4681      	mov	r9, r0
 8005f8e:	4606      	mov	r6, r0
 8005f90:	9505      	str	r5, [sp, #20]
 8005f92:	e776      	b.n	8005e82 <_dtoa_r+0x992>
 8005f94:	f000 fd02 	bl	800699c <__multadd>
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4681      	mov	r9, r0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	220a      	movs	r2, #10
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fcfb 	bl	800699c <__multadd>
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	e7f2      	b.n	8005f90 <_dtoa_r+0xaa0>
 8005faa:	f04f 0900 	mov.w	r9, #0
 8005fae:	2201      	movs	r2, #1
 8005fb0:	9904      	ldr	r1, [sp, #16]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fea6 	bl	8006d04 <__lshift>
 8005fb8:	4639      	mov	r1, r7
 8005fba:	9004      	str	r0, [sp, #16]
 8005fbc:	f000 fef6 	bl	8006dac <__mcmp>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	dcb6      	bgt.n	8005f32 <_dtoa_r+0xa42>
 8005fc4:	d102      	bne.n	8005fcc <_dtoa_r+0xadc>
 8005fc6:	f018 0f01 	tst.w	r8, #1
 8005fca:	d1b2      	bne.n	8005f32 <_dtoa_r+0xa42>
 8005fcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fd0:	2b30      	cmp	r3, #48	; 0x30
 8005fd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8005fd6:	f47f af0a 	bne.w	8005dee <_dtoa_r+0x8fe>
 8005fda:	4615      	mov	r5, r2
 8005fdc:	e7f6      	b.n	8005fcc <_dtoa_r+0xadc>
 8005fde:	4593      	cmp	fp, r2
 8005fe0:	d105      	bne.n	8005fee <_dtoa_r+0xafe>
 8005fe2:	2331      	movs	r3, #49	; 0x31
 8005fe4:	f10a 0a01 	add.w	sl, sl, #1
 8005fe8:	f88b 3000 	strb.w	r3, [fp]
 8005fec:	e6ff      	b.n	8005dee <_dtoa_r+0x8fe>
 8005fee:	4615      	mov	r5, r2
 8005ff0:	e79f      	b.n	8005f32 <_dtoa_r+0xa42>
 8005ff2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006058 <_dtoa_r+0xb68>
 8005ff6:	e007      	b.n	8006008 <_dtoa_r+0xb18>
 8005ff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ffa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800605c <_dtoa_r+0xb6c>
 8005ffe:	b11b      	cbz	r3, 8006008 <_dtoa_r+0xb18>
 8006000:	f10b 0308 	add.w	r3, fp, #8
 8006004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	4658      	mov	r0, fp
 800600a:	b017      	add	sp, #92	; 0x5c
 800600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006010:	9b06      	ldr	r3, [sp, #24]
 8006012:	2b01      	cmp	r3, #1
 8006014:	f77f ae35 	ble.w	8005c82 <_dtoa_r+0x792>
 8006018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800601a:	9307      	str	r3, [sp, #28]
 800601c:	e649      	b.n	8005cb2 <_dtoa_r+0x7c2>
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	dc03      	bgt.n	800602c <_dtoa_r+0xb3c>
 8006024:	9b06      	ldr	r3, [sp, #24]
 8006026:	2b02      	cmp	r3, #2
 8006028:	f73f aecc 	bgt.w	8005dc4 <_dtoa_r+0x8d4>
 800602c:	465d      	mov	r5, fp
 800602e:	4639      	mov	r1, r7
 8006030:	9804      	ldr	r0, [sp, #16]
 8006032:	f7ff f9cf 	bl	80053d4 <quorem>
 8006036:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800603a:	f805 8b01 	strb.w	r8, [r5], #1
 800603e:	9a02      	ldr	r2, [sp, #8]
 8006040:	eba5 030b 	sub.w	r3, r5, fp
 8006044:	429a      	cmp	r2, r3
 8006046:	ddb0      	ble.n	8005faa <_dtoa_r+0xaba>
 8006048:	2300      	movs	r3, #0
 800604a:	220a      	movs	r2, #10
 800604c:	9904      	ldr	r1, [sp, #16]
 800604e:	4620      	mov	r0, r4
 8006050:	f000 fca4 	bl	800699c <__multadd>
 8006054:	9004      	str	r0, [sp, #16]
 8006056:	e7ea      	b.n	800602e <_dtoa_r+0xb3e>
 8006058:	08008a03 	.word	0x08008a03
 800605c:	08008860 	.word	0x08008860

08006060 <std>:
 8006060:	2300      	movs	r3, #0
 8006062:	b510      	push	{r4, lr}
 8006064:	4604      	mov	r4, r0
 8006066:	e9c0 3300 	strd	r3, r3, [r0]
 800606a:	6083      	str	r3, [r0, #8]
 800606c:	8181      	strh	r1, [r0, #12]
 800606e:	6643      	str	r3, [r0, #100]	; 0x64
 8006070:	81c2      	strh	r2, [r0, #14]
 8006072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006076:	6183      	str	r3, [r0, #24]
 8006078:	4619      	mov	r1, r3
 800607a:	2208      	movs	r2, #8
 800607c:	305c      	adds	r0, #92	; 0x5c
 800607e:	f7fd fc5f 	bl	8003940 <memset>
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <std+0x38>)
 8006084:	6263      	str	r3, [r4, #36]	; 0x24
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <std+0x3c>)
 8006088:	62a3      	str	r3, [r4, #40]	; 0x28
 800608a:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <std+0x40>)
 800608c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <std+0x44>)
 8006090:	6224      	str	r4, [r4, #32]
 8006092:	6323      	str	r3, [r4, #48]	; 0x30
 8006094:	bd10      	pop	{r4, pc}
 8006096:	bf00      	nop
 8006098:	08007ee5 	.word	0x08007ee5
 800609c:	08007f07 	.word	0x08007f07
 80060a0:	08007f3f 	.word	0x08007f3f
 80060a4:	08007f63 	.word	0x08007f63

080060a8 <_cleanup_r>:
 80060a8:	4901      	ldr	r1, [pc, #4]	; (80060b0 <_cleanup_r+0x8>)
 80060aa:	f000 b8a1 	b.w	80061f0 <_fwalk_reent>
 80060ae:	bf00      	nop
 80060b0:	080084ed 	.word	0x080084ed

080060b4 <__sfmoreglue>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	1e4a      	subs	r2, r1, #1
 80060b8:	2568      	movs	r5, #104	; 0x68
 80060ba:	4355      	muls	r5, r2
 80060bc:	460e      	mov	r6, r1
 80060be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060c2:	f001 f87b 	bl	80071bc <_malloc_r>
 80060c6:	4604      	mov	r4, r0
 80060c8:	b140      	cbz	r0, 80060dc <__sfmoreglue+0x28>
 80060ca:	2100      	movs	r1, #0
 80060cc:	e9c0 1600 	strd	r1, r6, [r0]
 80060d0:	300c      	adds	r0, #12
 80060d2:	60a0      	str	r0, [r4, #8]
 80060d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060d8:	f7fd fc32 	bl	8003940 <memset>
 80060dc:	4620      	mov	r0, r4
 80060de:	bd70      	pop	{r4, r5, r6, pc}

080060e0 <__sinit>:
 80060e0:	6983      	ldr	r3, [r0, #24]
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	bb33      	cbnz	r3, 8006136 <__sinit+0x56>
 80060e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80060ec:	6503      	str	r3, [r0, #80]	; 0x50
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <__sinit+0x58>)
 80060f0:	4a12      	ldr	r2, [pc, #72]	; (800613c <__sinit+0x5c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6282      	str	r2, [r0, #40]	; 0x28
 80060f6:	4298      	cmp	r0, r3
 80060f8:	bf04      	itt	eq
 80060fa:	2301      	moveq	r3, #1
 80060fc:	6183      	streq	r3, [r0, #24]
 80060fe:	f000 f81f 	bl	8006140 <__sfp>
 8006102:	6060      	str	r0, [r4, #4]
 8006104:	4620      	mov	r0, r4
 8006106:	f000 f81b 	bl	8006140 <__sfp>
 800610a:	60a0      	str	r0, [r4, #8]
 800610c:	4620      	mov	r0, r4
 800610e:	f000 f817 	bl	8006140 <__sfp>
 8006112:	2200      	movs	r2, #0
 8006114:	60e0      	str	r0, [r4, #12]
 8006116:	2104      	movs	r1, #4
 8006118:	6860      	ldr	r0, [r4, #4]
 800611a:	f7ff ffa1 	bl	8006060 <std>
 800611e:	2201      	movs	r2, #1
 8006120:	2109      	movs	r1, #9
 8006122:	68a0      	ldr	r0, [r4, #8]
 8006124:	f7ff ff9c 	bl	8006060 <std>
 8006128:	2202      	movs	r2, #2
 800612a:	2112      	movs	r1, #18
 800612c:	68e0      	ldr	r0, [r4, #12]
 800612e:	f7ff ff97 	bl	8006060 <std>
 8006132:	2301      	movs	r3, #1
 8006134:	61a3      	str	r3, [r4, #24]
 8006136:	bd10      	pop	{r4, pc}
 8006138:	080087d4 	.word	0x080087d4
 800613c:	080060a9 	.word	0x080060a9

08006140 <__sfp>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <__sfp+0x70>)
 8006144:	681e      	ldr	r6, [r3, #0]
 8006146:	69b3      	ldr	r3, [r6, #24]
 8006148:	4607      	mov	r7, r0
 800614a:	b913      	cbnz	r3, 8006152 <__sfp+0x12>
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff ffc7 	bl	80060e0 <__sinit>
 8006152:	3648      	adds	r6, #72	; 0x48
 8006154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006158:	3b01      	subs	r3, #1
 800615a:	d503      	bpl.n	8006164 <__sfp+0x24>
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	b133      	cbz	r3, 800616e <__sfp+0x2e>
 8006160:	6836      	ldr	r6, [r6, #0]
 8006162:	e7f7      	b.n	8006154 <__sfp+0x14>
 8006164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006168:	b16d      	cbz	r5, 8006186 <__sfp+0x46>
 800616a:	3468      	adds	r4, #104	; 0x68
 800616c:	e7f4      	b.n	8006158 <__sfp+0x18>
 800616e:	2104      	movs	r1, #4
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ff9f 	bl	80060b4 <__sfmoreglue>
 8006176:	6030      	str	r0, [r6, #0]
 8006178:	2800      	cmp	r0, #0
 800617a:	d1f1      	bne.n	8006160 <__sfp+0x20>
 800617c:	230c      	movs	r3, #12
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4604      	mov	r4, r0
 8006182:	4620      	mov	r0, r4
 8006184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <__sfp+0x74>)
 8006188:	6665      	str	r5, [r4, #100]	; 0x64
 800618a:	e9c4 5500 	strd	r5, r5, [r4]
 800618e:	60a5      	str	r5, [r4, #8]
 8006190:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006194:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006198:	2208      	movs	r2, #8
 800619a:	4629      	mov	r1, r5
 800619c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061a0:	f7fd fbce 	bl	8003940 <memset>
 80061a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061ac:	e7e9      	b.n	8006182 <__sfp+0x42>
 80061ae:	bf00      	nop
 80061b0:	080087d4 	.word	0x080087d4
 80061b4:	ffff0001 	.word	0xffff0001

080061b8 <_fwalk>:
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	4688      	mov	r8, r1
 80061be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061c2:	2600      	movs	r6, #0
 80061c4:	b914      	cbnz	r4, 80061cc <_fwalk+0x14>
 80061c6:	4630      	mov	r0, r6
 80061c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061cc:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80061d0:	3f01      	subs	r7, #1
 80061d2:	d501      	bpl.n	80061d8 <_fwalk+0x20>
 80061d4:	6824      	ldr	r4, [r4, #0]
 80061d6:	e7f5      	b.n	80061c4 <_fwalk+0xc>
 80061d8:	89ab      	ldrh	r3, [r5, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d906      	bls.n	80061ec <_fwalk+0x34>
 80061de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e2:	3301      	adds	r3, #1
 80061e4:	d002      	beq.n	80061ec <_fwalk+0x34>
 80061e6:	4628      	mov	r0, r5
 80061e8:	47c0      	blx	r8
 80061ea:	4306      	orrs	r6, r0
 80061ec:	3568      	adds	r5, #104	; 0x68
 80061ee:	e7ef      	b.n	80061d0 <_fwalk+0x18>

080061f0 <_fwalk_reent>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	4680      	mov	r8, r0
 80061f6:	4689      	mov	r9, r1
 80061f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061fc:	2600      	movs	r6, #0
 80061fe:	b914      	cbnz	r4, 8006206 <_fwalk_reent+0x16>
 8006200:	4630      	mov	r0, r6
 8006202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006206:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800620a:	3f01      	subs	r7, #1
 800620c:	d501      	bpl.n	8006212 <_fwalk_reent+0x22>
 800620e:	6824      	ldr	r4, [r4, #0]
 8006210:	e7f5      	b.n	80061fe <_fwalk_reent+0xe>
 8006212:	89ab      	ldrh	r3, [r5, #12]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d907      	bls.n	8006228 <_fwalk_reent+0x38>
 8006218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800621c:	3301      	adds	r3, #1
 800621e:	d003      	beq.n	8006228 <_fwalk_reent+0x38>
 8006220:	4629      	mov	r1, r5
 8006222:	4640      	mov	r0, r8
 8006224:	47c8      	blx	r9
 8006226:	4306      	orrs	r6, r0
 8006228:	3568      	adds	r5, #104	; 0x68
 800622a:	e7ee      	b.n	800620a <_fwalk_reent+0x1a>

0800622c <rshift>:
 800622c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622e:	6906      	ldr	r6, [r0, #16]
 8006230:	114b      	asrs	r3, r1, #5
 8006232:	429e      	cmp	r6, r3
 8006234:	f100 0414 	add.w	r4, r0, #20
 8006238:	dd30      	ble.n	800629c <rshift+0x70>
 800623a:	f011 011f 	ands.w	r1, r1, #31
 800623e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006242:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006246:	d108      	bne.n	800625a <rshift+0x2e>
 8006248:	4621      	mov	r1, r4
 800624a:	42b2      	cmp	r2, r6
 800624c:	460b      	mov	r3, r1
 800624e:	d211      	bcs.n	8006274 <rshift+0x48>
 8006250:	f852 3b04 	ldr.w	r3, [r2], #4
 8006254:	f841 3b04 	str.w	r3, [r1], #4
 8006258:	e7f7      	b.n	800624a <rshift+0x1e>
 800625a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800625e:	f1c1 0c20 	rsb	ip, r1, #32
 8006262:	40cd      	lsrs	r5, r1
 8006264:	3204      	adds	r2, #4
 8006266:	4623      	mov	r3, r4
 8006268:	42b2      	cmp	r2, r6
 800626a:	4617      	mov	r7, r2
 800626c:	d30c      	bcc.n	8006288 <rshift+0x5c>
 800626e:	601d      	str	r5, [r3, #0]
 8006270:	b105      	cbz	r5, 8006274 <rshift+0x48>
 8006272:	3304      	adds	r3, #4
 8006274:	1b1a      	subs	r2, r3, r4
 8006276:	42a3      	cmp	r3, r4
 8006278:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800627c:	bf08      	it	eq
 800627e:	2300      	moveq	r3, #0
 8006280:	6102      	str	r2, [r0, #16]
 8006282:	bf08      	it	eq
 8006284:	6143      	streq	r3, [r0, #20]
 8006286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006288:	683f      	ldr	r7, [r7, #0]
 800628a:	fa07 f70c 	lsl.w	r7, r7, ip
 800628e:	433d      	orrs	r5, r7
 8006290:	f843 5b04 	str.w	r5, [r3], #4
 8006294:	f852 5b04 	ldr.w	r5, [r2], #4
 8006298:	40cd      	lsrs	r5, r1
 800629a:	e7e5      	b.n	8006268 <rshift+0x3c>
 800629c:	4623      	mov	r3, r4
 800629e:	e7e9      	b.n	8006274 <rshift+0x48>

080062a0 <__hexdig_fun>:
 80062a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	d802      	bhi.n	80062ae <__hexdig_fun+0xe>
 80062a8:	3820      	subs	r0, #32
 80062aa:	b2c0      	uxtb	r0, r0
 80062ac:	4770      	bx	lr
 80062ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80062b2:	2b05      	cmp	r3, #5
 80062b4:	d801      	bhi.n	80062ba <__hexdig_fun+0x1a>
 80062b6:	3847      	subs	r0, #71	; 0x47
 80062b8:	e7f7      	b.n	80062aa <__hexdig_fun+0xa>
 80062ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80062be:	2b05      	cmp	r3, #5
 80062c0:	d801      	bhi.n	80062c6 <__hexdig_fun+0x26>
 80062c2:	3827      	subs	r0, #39	; 0x27
 80062c4:	e7f1      	b.n	80062aa <__hexdig_fun+0xa>
 80062c6:	2000      	movs	r0, #0
 80062c8:	4770      	bx	lr

080062ca <__gethex>:
 80062ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ce:	b08b      	sub	sp, #44	; 0x2c
 80062d0:	468a      	mov	sl, r1
 80062d2:	9002      	str	r0, [sp, #8]
 80062d4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80062d6:	9306      	str	r3, [sp, #24]
 80062d8:	4690      	mov	r8, r2
 80062da:	f000 fadf 	bl	800689c <__localeconv_l>
 80062de:	6803      	ldr	r3, [r0, #0]
 80062e0:	9303      	str	r3, [sp, #12]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7f9 ff7c 	bl	80001e0 <strlen>
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	9001      	str	r0, [sp, #4]
 80062ec:	4403      	add	r3, r0
 80062ee:	f04f 0b00 	mov.w	fp, #0
 80062f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	f8da 3000 	ldr.w	r3, [sl]
 80062fc:	3302      	adds	r3, #2
 80062fe:	461f      	mov	r7, r3
 8006300:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006304:	2830      	cmp	r0, #48	; 0x30
 8006306:	d06c      	beq.n	80063e2 <__gethex+0x118>
 8006308:	f7ff ffca 	bl	80062a0 <__hexdig_fun>
 800630c:	4604      	mov	r4, r0
 800630e:	2800      	cmp	r0, #0
 8006310:	d16a      	bne.n	80063e8 <__gethex+0x11e>
 8006312:	9a01      	ldr	r2, [sp, #4]
 8006314:	9903      	ldr	r1, [sp, #12]
 8006316:	4638      	mov	r0, r7
 8006318:	f001 fe27 	bl	8007f6a <strncmp>
 800631c:	2800      	cmp	r0, #0
 800631e:	d166      	bne.n	80063ee <__gethex+0x124>
 8006320:	9b01      	ldr	r3, [sp, #4]
 8006322:	5cf8      	ldrb	r0, [r7, r3]
 8006324:	18fe      	adds	r6, r7, r3
 8006326:	f7ff ffbb 	bl	80062a0 <__hexdig_fun>
 800632a:	2800      	cmp	r0, #0
 800632c:	d062      	beq.n	80063f4 <__gethex+0x12a>
 800632e:	4633      	mov	r3, r6
 8006330:	7818      	ldrb	r0, [r3, #0]
 8006332:	2830      	cmp	r0, #48	; 0x30
 8006334:	461f      	mov	r7, r3
 8006336:	f103 0301 	add.w	r3, r3, #1
 800633a:	d0f9      	beq.n	8006330 <__gethex+0x66>
 800633c:	f7ff ffb0 	bl	80062a0 <__hexdig_fun>
 8006340:	fab0 f580 	clz	r5, r0
 8006344:	096d      	lsrs	r5, r5, #5
 8006346:	4634      	mov	r4, r6
 8006348:	f04f 0b01 	mov.w	fp, #1
 800634c:	463a      	mov	r2, r7
 800634e:	4616      	mov	r6, r2
 8006350:	3201      	adds	r2, #1
 8006352:	7830      	ldrb	r0, [r6, #0]
 8006354:	f7ff ffa4 	bl	80062a0 <__hexdig_fun>
 8006358:	2800      	cmp	r0, #0
 800635a:	d1f8      	bne.n	800634e <__gethex+0x84>
 800635c:	9a01      	ldr	r2, [sp, #4]
 800635e:	9903      	ldr	r1, [sp, #12]
 8006360:	4630      	mov	r0, r6
 8006362:	f001 fe02 	bl	8007f6a <strncmp>
 8006366:	b950      	cbnz	r0, 800637e <__gethex+0xb4>
 8006368:	b954      	cbnz	r4, 8006380 <__gethex+0xb6>
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	18f4      	adds	r4, r6, r3
 800636e:	4622      	mov	r2, r4
 8006370:	4616      	mov	r6, r2
 8006372:	3201      	adds	r2, #1
 8006374:	7830      	ldrb	r0, [r6, #0]
 8006376:	f7ff ff93 	bl	80062a0 <__hexdig_fun>
 800637a:	2800      	cmp	r0, #0
 800637c:	d1f8      	bne.n	8006370 <__gethex+0xa6>
 800637e:	b10c      	cbz	r4, 8006384 <__gethex+0xba>
 8006380:	1ba4      	subs	r4, r4, r6
 8006382:	00a4      	lsls	r4, r4, #2
 8006384:	7833      	ldrb	r3, [r6, #0]
 8006386:	2b50      	cmp	r3, #80	; 0x50
 8006388:	d001      	beq.n	800638e <__gethex+0xc4>
 800638a:	2b70      	cmp	r3, #112	; 0x70
 800638c:	d140      	bne.n	8006410 <__gethex+0x146>
 800638e:	7873      	ldrb	r3, [r6, #1]
 8006390:	2b2b      	cmp	r3, #43	; 0x2b
 8006392:	d031      	beq.n	80063f8 <__gethex+0x12e>
 8006394:	2b2d      	cmp	r3, #45	; 0x2d
 8006396:	d033      	beq.n	8006400 <__gethex+0x136>
 8006398:	1c71      	adds	r1, r6, #1
 800639a:	f04f 0900 	mov.w	r9, #0
 800639e:	7808      	ldrb	r0, [r1, #0]
 80063a0:	f7ff ff7e 	bl	80062a0 <__hexdig_fun>
 80063a4:	1e43      	subs	r3, r0, #1
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b18      	cmp	r3, #24
 80063aa:	d831      	bhi.n	8006410 <__gethex+0x146>
 80063ac:	f1a0 0210 	sub.w	r2, r0, #16
 80063b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80063b4:	f7ff ff74 	bl	80062a0 <__hexdig_fun>
 80063b8:	1e43      	subs	r3, r0, #1
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b18      	cmp	r3, #24
 80063be:	d922      	bls.n	8006406 <__gethex+0x13c>
 80063c0:	f1b9 0f00 	cmp.w	r9, #0
 80063c4:	d000      	beq.n	80063c8 <__gethex+0xfe>
 80063c6:	4252      	negs	r2, r2
 80063c8:	4414      	add	r4, r2
 80063ca:	f8ca 1000 	str.w	r1, [sl]
 80063ce:	b30d      	cbz	r5, 8006414 <__gethex+0x14a>
 80063d0:	f1bb 0f00 	cmp.w	fp, #0
 80063d4:	bf0c      	ite	eq
 80063d6:	2706      	moveq	r7, #6
 80063d8:	2700      	movne	r7, #0
 80063da:	4638      	mov	r0, r7
 80063dc:	b00b      	add	sp, #44	; 0x2c
 80063de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e2:	f10b 0b01 	add.w	fp, fp, #1
 80063e6:	e78a      	b.n	80062fe <__gethex+0x34>
 80063e8:	2500      	movs	r5, #0
 80063ea:	462c      	mov	r4, r5
 80063ec:	e7ae      	b.n	800634c <__gethex+0x82>
 80063ee:	463e      	mov	r6, r7
 80063f0:	2501      	movs	r5, #1
 80063f2:	e7c7      	b.n	8006384 <__gethex+0xba>
 80063f4:	4604      	mov	r4, r0
 80063f6:	e7fb      	b.n	80063f0 <__gethex+0x126>
 80063f8:	f04f 0900 	mov.w	r9, #0
 80063fc:	1cb1      	adds	r1, r6, #2
 80063fe:	e7ce      	b.n	800639e <__gethex+0xd4>
 8006400:	f04f 0901 	mov.w	r9, #1
 8006404:	e7fa      	b.n	80063fc <__gethex+0x132>
 8006406:	230a      	movs	r3, #10
 8006408:	fb03 0202 	mla	r2, r3, r2, r0
 800640c:	3a10      	subs	r2, #16
 800640e:	e7cf      	b.n	80063b0 <__gethex+0xe6>
 8006410:	4631      	mov	r1, r6
 8006412:	e7da      	b.n	80063ca <__gethex+0x100>
 8006414:	1bf3      	subs	r3, r6, r7
 8006416:	3b01      	subs	r3, #1
 8006418:	4629      	mov	r1, r5
 800641a:	2b07      	cmp	r3, #7
 800641c:	dc49      	bgt.n	80064b2 <__gethex+0x1e8>
 800641e:	9802      	ldr	r0, [sp, #8]
 8006420:	f000 fa71 	bl	8006906 <_Balloc>
 8006424:	9b01      	ldr	r3, [sp, #4]
 8006426:	f100 0914 	add.w	r9, r0, #20
 800642a:	f04f 0b00 	mov.w	fp, #0
 800642e:	f1c3 0301 	rsb	r3, r3, #1
 8006432:	4605      	mov	r5, r0
 8006434:	f8cd 9010 	str.w	r9, [sp, #16]
 8006438:	46da      	mov	sl, fp
 800643a:	9308      	str	r3, [sp, #32]
 800643c:	42b7      	cmp	r7, r6
 800643e:	d33b      	bcc.n	80064b8 <__gethex+0x1ee>
 8006440:	9804      	ldr	r0, [sp, #16]
 8006442:	f840 ab04 	str.w	sl, [r0], #4
 8006446:	eba0 0009 	sub.w	r0, r0, r9
 800644a:	1080      	asrs	r0, r0, #2
 800644c:	6128      	str	r0, [r5, #16]
 800644e:	0147      	lsls	r7, r0, #5
 8006450:	4650      	mov	r0, sl
 8006452:	f000 fb1c 	bl	8006a8e <__hi0bits>
 8006456:	f8d8 6000 	ldr.w	r6, [r8]
 800645a:	1a3f      	subs	r7, r7, r0
 800645c:	42b7      	cmp	r7, r6
 800645e:	dd64      	ble.n	800652a <__gethex+0x260>
 8006460:	1bbf      	subs	r7, r7, r6
 8006462:	4639      	mov	r1, r7
 8006464:	4628      	mov	r0, r5
 8006466:	f000 fe2b 	bl	80070c0 <__any_on>
 800646a:	4682      	mov	sl, r0
 800646c:	b178      	cbz	r0, 800648e <__gethex+0x1c4>
 800646e:	1e7b      	subs	r3, r7, #1
 8006470:	1159      	asrs	r1, r3, #5
 8006472:	f003 021f 	and.w	r2, r3, #31
 8006476:	f04f 0a01 	mov.w	sl, #1
 800647a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800647e:	fa0a f202 	lsl.w	r2, sl, r2
 8006482:	420a      	tst	r2, r1
 8006484:	d003      	beq.n	800648e <__gethex+0x1c4>
 8006486:	4553      	cmp	r3, sl
 8006488:	dc46      	bgt.n	8006518 <__gethex+0x24e>
 800648a:	f04f 0a02 	mov.w	sl, #2
 800648e:	4639      	mov	r1, r7
 8006490:	4628      	mov	r0, r5
 8006492:	f7ff fecb 	bl	800622c <rshift>
 8006496:	443c      	add	r4, r7
 8006498:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800649c:	42a3      	cmp	r3, r4
 800649e:	da52      	bge.n	8006546 <__gethex+0x27c>
 80064a0:	4629      	mov	r1, r5
 80064a2:	9802      	ldr	r0, [sp, #8]
 80064a4:	f000 fa63 	bl	800696e <_Bfree>
 80064a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80064aa:	2300      	movs	r3, #0
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	27a3      	movs	r7, #163	; 0xa3
 80064b0:	e793      	b.n	80063da <__gethex+0x110>
 80064b2:	3101      	adds	r1, #1
 80064b4:	105b      	asrs	r3, r3, #1
 80064b6:	e7b0      	b.n	800641a <__gethex+0x150>
 80064b8:	1e73      	subs	r3, r6, #1
 80064ba:	9305      	str	r3, [sp, #20]
 80064bc:	9a07      	ldr	r2, [sp, #28]
 80064be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d018      	beq.n	80064f8 <__gethex+0x22e>
 80064c6:	f1bb 0f20 	cmp.w	fp, #32
 80064ca:	d107      	bne.n	80064dc <__gethex+0x212>
 80064cc:	9b04      	ldr	r3, [sp, #16]
 80064ce:	f8c3 a000 	str.w	sl, [r3]
 80064d2:	3304      	adds	r3, #4
 80064d4:	f04f 0a00 	mov.w	sl, #0
 80064d8:	9304      	str	r3, [sp, #16]
 80064da:	46d3      	mov	fp, sl
 80064dc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80064e0:	f7ff fede 	bl	80062a0 <__hexdig_fun>
 80064e4:	f000 000f 	and.w	r0, r0, #15
 80064e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80064ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80064f0:	f10b 0b04 	add.w	fp, fp, #4
 80064f4:	9b05      	ldr	r3, [sp, #20]
 80064f6:	e00d      	b.n	8006514 <__gethex+0x24a>
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	9a08      	ldr	r2, [sp, #32]
 80064fc:	4413      	add	r3, r2
 80064fe:	42bb      	cmp	r3, r7
 8006500:	d3e1      	bcc.n	80064c6 <__gethex+0x1fc>
 8006502:	4618      	mov	r0, r3
 8006504:	9a01      	ldr	r2, [sp, #4]
 8006506:	9903      	ldr	r1, [sp, #12]
 8006508:	9309      	str	r3, [sp, #36]	; 0x24
 800650a:	f001 fd2e 	bl	8007f6a <strncmp>
 800650e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006510:	2800      	cmp	r0, #0
 8006512:	d1d8      	bne.n	80064c6 <__gethex+0x1fc>
 8006514:	461e      	mov	r6, r3
 8006516:	e791      	b.n	800643c <__gethex+0x172>
 8006518:	1eb9      	subs	r1, r7, #2
 800651a:	4628      	mov	r0, r5
 800651c:	f000 fdd0 	bl	80070c0 <__any_on>
 8006520:	2800      	cmp	r0, #0
 8006522:	d0b2      	beq.n	800648a <__gethex+0x1c0>
 8006524:	f04f 0a03 	mov.w	sl, #3
 8006528:	e7b1      	b.n	800648e <__gethex+0x1c4>
 800652a:	da09      	bge.n	8006540 <__gethex+0x276>
 800652c:	1bf7      	subs	r7, r6, r7
 800652e:	4629      	mov	r1, r5
 8006530:	463a      	mov	r2, r7
 8006532:	9802      	ldr	r0, [sp, #8]
 8006534:	f000 fbe6 	bl	8006d04 <__lshift>
 8006538:	1be4      	subs	r4, r4, r7
 800653a:	4605      	mov	r5, r0
 800653c:	f100 0914 	add.w	r9, r0, #20
 8006540:	f04f 0a00 	mov.w	sl, #0
 8006544:	e7a8      	b.n	8006498 <__gethex+0x1ce>
 8006546:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800654a:	42a0      	cmp	r0, r4
 800654c:	dd6a      	ble.n	8006624 <__gethex+0x35a>
 800654e:	1b04      	subs	r4, r0, r4
 8006550:	42a6      	cmp	r6, r4
 8006552:	dc2e      	bgt.n	80065b2 <__gethex+0x2e8>
 8006554:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d022      	beq.n	80065a2 <__gethex+0x2d8>
 800655c:	2b03      	cmp	r3, #3
 800655e:	d024      	beq.n	80065aa <__gethex+0x2e0>
 8006560:	2b01      	cmp	r3, #1
 8006562:	d115      	bne.n	8006590 <__gethex+0x2c6>
 8006564:	42a6      	cmp	r6, r4
 8006566:	d113      	bne.n	8006590 <__gethex+0x2c6>
 8006568:	2e01      	cmp	r6, #1
 800656a:	dc0b      	bgt.n	8006584 <__gethex+0x2ba>
 800656c:	9a06      	ldr	r2, [sp, #24]
 800656e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	2301      	movs	r3, #1
 8006576:	612b      	str	r3, [r5, #16]
 8006578:	f8c9 3000 	str.w	r3, [r9]
 800657c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800657e:	2762      	movs	r7, #98	; 0x62
 8006580:	601d      	str	r5, [r3, #0]
 8006582:	e72a      	b.n	80063da <__gethex+0x110>
 8006584:	1e71      	subs	r1, r6, #1
 8006586:	4628      	mov	r0, r5
 8006588:	f000 fd9a 	bl	80070c0 <__any_on>
 800658c:	2800      	cmp	r0, #0
 800658e:	d1ed      	bne.n	800656c <__gethex+0x2a2>
 8006590:	4629      	mov	r1, r5
 8006592:	9802      	ldr	r0, [sp, #8]
 8006594:	f000 f9eb 	bl	800696e <_Bfree>
 8006598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800659a:	2300      	movs	r3, #0
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	2750      	movs	r7, #80	; 0x50
 80065a0:	e71b      	b.n	80063da <__gethex+0x110>
 80065a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0e1      	beq.n	800656c <__gethex+0x2a2>
 80065a8:	e7f2      	b.n	8006590 <__gethex+0x2c6>
 80065aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1dd      	bne.n	800656c <__gethex+0x2a2>
 80065b0:	e7ee      	b.n	8006590 <__gethex+0x2c6>
 80065b2:	1e67      	subs	r7, r4, #1
 80065b4:	f1ba 0f00 	cmp.w	sl, #0
 80065b8:	d131      	bne.n	800661e <__gethex+0x354>
 80065ba:	b127      	cbz	r7, 80065c6 <__gethex+0x2fc>
 80065bc:	4639      	mov	r1, r7
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 fd7e 	bl	80070c0 <__any_on>
 80065c4:	4682      	mov	sl, r0
 80065c6:	117a      	asrs	r2, r7, #5
 80065c8:	2301      	movs	r3, #1
 80065ca:	f007 071f 	and.w	r7, r7, #31
 80065ce:	fa03 f707 	lsl.w	r7, r3, r7
 80065d2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80065d6:	4621      	mov	r1, r4
 80065d8:	421f      	tst	r7, r3
 80065da:	4628      	mov	r0, r5
 80065dc:	bf18      	it	ne
 80065de:	f04a 0a02 	orrne.w	sl, sl, #2
 80065e2:	1b36      	subs	r6, r6, r4
 80065e4:	f7ff fe22 	bl	800622c <rshift>
 80065e8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80065ec:	2702      	movs	r7, #2
 80065ee:	f1ba 0f00 	cmp.w	sl, #0
 80065f2:	d048      	beq.n	8006686 <__gethex+0x3bc>
 80065f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d015      	beq.n	8006628 <__gethex+0x35e>
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d017      	beq.n	8006630 <__gethex+0x366>
 8006600:	2b01      	cmp	r3, #1
 8006602:	d109      	bne.n	8006618 <__gethex+0x34e>
 8006604:	f01a 0f02 	tst.w	sl, #2
 8006608:	d006      	beq.n	8006618 <__gethex+0x34e>
 800660a:	f8d9 3000 	ldr.w	r3, [r9]
 800660e:	ea4a 0a03 	orr.w	sl, sl, r3
 8006612:	f01a 0f01 	tst.w	sl, #1
 8006616:	d10e      	bne.n	8006636 <__gethex+0x36c>
 8006618:	f047 0710 	orr.w	r7, r7, #16
 800661c:	e033      	b.n	8006686 <__gethex+0x3bc>
 800661e:	f04f 0a01 	mov.w	sl, #1
 8006622:	e7d0      	b.n	80065c6 <__gethex+0x2fc>
 8006624:	2701      	movs	r7, #1
 8006626:	e7e2      	b.n	80065ee <__gethex+0x324>
 8006628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800662a:	f1c3 0301 	rsb	r3, r3, #1
 800662e:	9315      	str	r3, [sp, #84]	; 0x54
 8006630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <__gethex+0x34e>
 8006636:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800663a:	f105 0314 	add.w	r3, r5, #20
 800663e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006642:	eb03 010a 	add.w	r1, r3, sl
 8006646:	f04f 0c00 	mov.w	ip, #0
 800664a:	4618      	mov	r0, r3
 800664c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006650:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006654:	d01c      	beq.n	8006690 <__gethex+0x3c6>
 8006656:	3201      	adds	r2, #1
 8006658:	6002      	str	r2, [r0, #0]
 800665a:	2f02      	cmp	r7, #2
 800665c:	f105 0314 	add.w	r3, r5, #20
 8006660:	d138      	bne.n	80066d4 <__gethex+0x40a>
 8006662:	f8d8 2000 	ldr.w	r2, [r8]
 8006666:	3a01      	subs	r2, #1
 8006668:	42b2      	cmp	r2, r6
 800666a:	d10a      	bne.n	8006682 <__gethex+0x3b8>
 800666c:	1171      	asrs	r1, r6, #5
 800666e:	2201      	movs	r2, #1
 8006670:	f006 061f 	and.w	r6, r6, #31
 8006674:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006678:	fa02 f606 	lsl.w	r6, r2, r6
 800667c:	421e      	tst	r6, r3
 800667e:	bf18      	it	ne
 8006680:	4617      	movne	r7, r2
 8006682:	f047 0720 	orr.w	r7, r7, #32
 8006686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006688:	601d      	str	r5, [r3, #0]
 800668a:	9b06      	ldr	r3, [sp, #24]
 800668c:	601c      	str	r4, [r3, #0]
 800668e:	e6a4      	b.n	80063da <__gethex+0x110>
 8006690:	4299      	cmp	r1, r3
 8006692:	f843 cc04 	str.w	ip, [r3, #-4]
 8006696:	d8d8      	bhi.n	800664a <__gethex+0x380>
 8006698:	68ab      	ldr	r3, [r5, #8]
 800669a:	4599      	cmp	r9, r3
 800669c:	db12      	blt.n	80066c4 <__gethex+0x3fa>
 800669e:	6869      	ldr	r1, [r5, #4]
 80066a0:	9802      	ldr	r0, [sp, #8]
 80066a2:	3101      	adds	r1, #1
 80066a4:	f000 f92f 	bl	8006906 <_Balloc>
 80066a8:	692a      	ldr	r2, [r5, #16]
 80066aa:	3202      	adds	r2, #2
 80066ac:	f105 010c 	add.w	r1, r5, #12
 80066b0:	4683      	mov	fp, r0
 80066b2:	0092      	lsls	r2, r2, #2
 80066b4:	300c      	adds	r0, #12
 80066b6:	f000 f91b 	bl	80068f0 <memcpy>
 80066ba:	4629      	mov	r1, r5
 80066bc:	9802      	ldr	r0, [sp, #8]
 80066be:	f000 f956 	bl	800696e <_Bfree>
 80066c2:	465d      	mov	r5, fp
 80066c4:	692b      	ldr	r3, [r5, #16]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80066cc:	612a      	str	r2, [r5, #16]
 80066ce:	2201      	movs	r2, #1
 80066d0:	615a      	str	r2, [r3, #20]
 80066d2:	e7c2      	b.n	800665a <__gethex+0x390>
 80066d4:	692a      	ldr	r2, [r5, #16]
 80066d6:	454a      	cmp	r2, r9
 80066d8:	dd0b      	ble.n	80066f2 <__gethex+0x428>
 80066da:	2101      	movs	r1, #1
 80066dc:	4628      	mov	r0, r5
 80066de:	f7ff fda5 	bl	800622c <rshift>
 80066e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066e6:	3401      	adds	r4, #1
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	f6ff aed9 	blt.w	80064a0 <__gethex+0x1d6>
 80066ee:	2701      	movs	r7, #1
 80066f0:	e7c7      	b.n	8006682 <__gethex+0x3b8>
 80066f2:	f016 061f 	ands.w	r6, r6, #31
 80066f6:	d0fa      	beq.n	80066ee <__gethex+0x424>
 80066f8:	449a      	add	sl, r3
 80066fa:	f1c6 0620 	rsb	r6, r6, #32
 80066fe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006702:	f000 f9c4 	bl	8006a8e <__hi0bits>
 8006706:	42b0      	cmp	r0, r6
 8006708:	dbe7      	blt.n	80066da <__gethex+0x410>
 800670a:	e7f0      	b.n	80066ee <__gethex+0x424>

0800670c <L_shift>:
 800670c:	f1c2 0208 	rsb	r2, r2, #8
 8006710:	0092      	lsls	r2, r2, #2
 8006712:	b570      	push	{r4, r5, r6, lr}
 8006714:	f1c2 0620 	rsb	r6, r2, #32
 8006718:	6843      	ldr	r3, [r0, #4]
 800671a:	6804      	ldr	r4, [r0, #0]
 800671c:	fa03 f506 	lsl.w	r5, r3, r6
 8006720:	432c      	orrs	r4, r5
 8006722:	40d3      	lsrs	r3, r2
 8006724:	6004      	str	r4, [r0, #0]
 8006726:	f840 3f04 	str.w	r3, [r0, #4]!
 800672a:	4288      	cmp	r0, r1
 800672c:	d3f4      	bcc.n	8006718 <L_shift+0xc>
 800672e:	bd70      	pop	{r4, r5, r6, pc}

08006730 <__match>:
 8006730:	b530      	push	{r4, r5, lr}
 8006732:	6803      	ldr	r3, [r0, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673a:	b914      	cbnz	r4, 8006742 <__match+0x12>
 800673c:	6003      	str	r3, [r0, #0]
 800673e:	2001      	movs	r0, #1
 8006740:	bd30      	pop	{r4, r5, pc}
 8006742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006746:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800674a:	2d19      	cmp	r5, #25
 800674c:	bf98      	it	ls
 800674e:	3220      	addls	r2, #32
 8006750:	42a2      	cmp	r2, r4
 8006752:	d0f0      	beq.n	8006736 <__match+0x6>
 8006754:	2000      	movs	r0, #0
 8006756:	e7f3      	b.n	8006740 <__match+0x10>

08006758 <__hexnan>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	680b      	ldr	r3, [r1, #0]
 800675e:	6801      	ldr	r1, [r0, #0]
 8006760:	115f      	asrs	r7, r3, #5
 8006762:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006766:	f013 031f 	ands.w	r3, r3, #31
 800676a:	b087      	sub	sp, #28
 800676c:	bf18      	it	ne
 800676e:	3704      	addne	r7, #4
 8006770:	2500      	movs	r5, #0
 8006772:	1f3e      	subs	r6, r7, #4
 8006774:	4682      	mov	sl, r0
 8006776:	4690      	mov	r8, r2
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	f847 5c04 	str.w	r5, [r7, #-4]
 800677e:	46b1      	mov	r9, r6
 8006780:	4634      	mov	r4, r6
 8006782:	9502      	str	r5, [sp, #8]
 8006784:	46ab      	mov	fp, r5
 8006786:	784a      	ldrb	r2, [r1, #1]
 8006788:	1c4b      	adds	r3, r1, #1
 800678a:	9303      	str	r3, [sp, #12]
 800678c:	b342      	cbz	r2, 80067e0 <__hexnan+0x88>
 800678e:	4610      	mov	r0, r2
 8006790:	9105      	str	r1, [sp, #20]
 8006792:	9204      	str	r2, [sp, #16]
 8006794:	f7ff fd84 	bl	80062a0 <__hexdig_fun>
 8006798:	2800      	cmp	r0, #0
 800679a:	d143      	bne.n	8006824 <__hexnan+0xcc>
 800679c:	9a04      	ldr	r2, [sp, #16]
 800679e:	9905      	ldr	r1, [sp, #20]
 80067a0:	2a20      	cmp	r2, #32
 80067a2:	d818      	bhi.n	80067d6 <__hexnan+0x7e>
 80067a4:	9b02      	ldr	r3, [sp, #8]
 80067a6:	459b      	cmp	fp, r3
 80067a8:	dd13      	ble.n	80067d2 <__hexnan+0x7a>
 80067aa:	454c      	cmp	r4, r9
 80067ac:	d206      	bcs.n	80067bc <__hexnan+0x64>
 80067ae:	2d07      	cmp	r5, #7
 80067b0:	dc04      	bgt.n	80067bc <__hexnan+0x64>
 80067b2:	462a      	mov	r2, r5
 80067b4:	4649      	mov	r1, r9
 80067b6:	4620      	mov	r0, r4
 80067b8:	f7ff ffa8 	bl	800670c <L_shift>
 80067bc:	4544      	cmp	r4, r8
 80067be:	d944      	bls.n	800684a <__hexnan+0xf2>
 80067c0:	2300      	movs	r3, #0
 80067c2:	f1a4 0904 	sub.w	r9, r4, #4
 80067c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80067ca:	f8cd b008 	str.w	fp, [sp, #8]
 80067ce:	464c      	mov	r4, r9
 80067d0:	461d      	mov	r5, r3
 80067d2:	9903      	ldr	r1, [sp, #12]
 80067d4:	e7d7      	b.n	8006786 <__hexnan+0x2e>
 80067d6:	2a29      	cmp	r2, #41	; 0x29
 80067d8:	d14a      	bne.n	8006870 <__hexnan+0x118>
 80067da:	3102      	adds	r1, #2
 80067dc:	f8ca 1000 	str.w	r1, [sl]
 80067e0:	f1bb 0f00 	cmp.w	fp, #0
 80067e4:	d044      	beq.n	8006870 <__hexnan+0x118>
 80067e6:	454c      	cmp	r4, r9
 80067e8:	d206      	bcs.n	80067f8 <__hexnan+0xa0>
 80067ea:	2d07      	cmp	r5, #7
 80067ec:	dc04      	bgt.n	80067f8 <__hexnan+0xa0>
 80067ee:	462a      	mov	r2, r5
 80067f0:	4649      	mov	r1, r9
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7ff ff8a 	bl	800670c <L_shift>
 80067f8:	4544      	cmp	r4, r8
 80067fa:	d928      	bls.n	800684e <__hexnan+0xf6>
 80067fc:	4643      	mov	r3, r8
 80067fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8006802:	f843 2b04 	str.w	r2, [r3], #4
 8006806:	42a6      	cmp	r6, r4
 8006808:	d2f9      	bcs.n	80067fe <__hexnan+0xa6>
 800680a:	2200      	movs	r2, #0
 800680c:	f843 2b04 	str.w	r2, [r3], #4
 8006810:	429e      	cmp	r6, r3
 8006812:	d2fb      	bcs.n	800680c <__hexnan+0xb4>
 8006814:	6833      	ldr	r3, [r6, #0]
 8006816:	b91b      	cbnz	r3, 8006820 <__hexnan+0xc8>
 8006818:	4546      	cmp	r6, r8
 800681a:	d127      	bne.n	800686c <__hexnan+0x114>
 800681c:	2301      	movs	r3, #1
 800681e:	6033      	str	r3, [r6, #0]
 8006820:	2005      	movs	r0, #5
 8006822:	e026      	b.n	8006872 <__hexnan+0x11a>
 8006824:	3501      	adds	r5, #1
 8006826:	2d08      	cmp	r5, #8
 8006828:	f10b 0b01 	add.w	fp, fp, #1
 800682c:	dd06      	ble.n	800683c <__hexnan+0xe4>
 800682e:	4544      	cmp	r4, r8
 8006830:	d9cf      	bls.n	80067d2 <__hexnan+0x7a>
 8006832:	2300      	movs	r3, #0
 8006834:	f844 3c04 	str.w	r3, [r4, #-4]
 8006838:	2501      	movs	r5, #1
 800683a:	3c04      	subs	r4, #4
 800683c:	6822      	ldr	r2, [r4, #0]
 800683e:	f000 000f 	and.w	r0, r0, #15
 8006842:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006846:	6020      	str	r0, [r4, #0]
 8006848:	e7c3      	b.n	80067d2 <__hexnan+0x7a>
 800684a:	2508      	movs	r5, #8
 800684c:	e7c1      	b.n	80067d2 <__hexnan+0x7a>
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0df      	beq.n	8006814 <__hexnan+0xbc>
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	f1c3 0320 	rsb	r3, r3, #32
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
 8006860:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006864:	401a      	ands	r2, r3
 8006866:	f847 2c04 	str.w	r2, [r7, #-4]
 800686a:	e7d3      	b.n	8006814 <__hexnan+0xbc>
 800686c:	3e04      	subs	r6, #4
 800686e:	e7d1      	b.n	8006814 <__hexnan+0xbc>
 8006870:	2004      	movs	r0, #4
 8006872:	b007      	add	sp, #28
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006878 <__locale_ctype_ptr_l>:
 8006878:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800687c:	4770      	bx	lr
	...

08006880 <__locale_ctype_ptr>:
 8006880:	4b04      	ldr	r3, [pc, #16]	; (8006894 <__locale_ctype_ptr+0x14>)
 8006882:	4a05      	ldr	r2, [pc, #20]	; (8006898 <__locale_ctype_ptr+0x18>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf08      	it	eq
 800688c:	4613      	moveq	r3, r2
 800688e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006892:	4770      	bx	lr
 8006894:	2000000c 	.word	0x2000000c
 8006898:	20000070 	.word	0x20000070

0800689c <__localeconv_l>:
 800689c:	30f0      	adds	r0, #240	; 0xf0
 800689e:	4770      	bx	lr

080068a0 <_localeconv_r>:
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <_localeconv_r+0x14>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6a18      	ldr	r0, [r3, #32]
 80068a6:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <_localeconv_r+0x18>)
 80068a8:	2800      	cmp	r0, #0
 80068aa:	bf08      	it	eq
 80068ac:	4618      	moveq	r0, r3
 80068ae:	30f0      	adds	r0, #240	; 0xf0
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2000000c 	.word	0x2000000c
 80068b8:	20000070 	.word	0x20000070

080068bc <malloc>:
 80068bc:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <malloc+0xc>)
 80068be:	4601      	mov	r1, r0
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	f000 bc7b 	b.w	80071bc <_malloc_r>
 80068c6:	bf00      	nop
 80068c8:	2000000c 	.word	0x2000000c

080068cc <__ascii_mbtowc>:
 80068cc:	b082      	sub	sp, #8
 80068ce:	b901      	cbnz	r1, 80068d2 <__ascii_mbtowc+0x6>
 80068d0:	a901      	add	r1, sp, #4
 80068d2:	b142      	cbz	r2, 80068e6 <__ascii_mbtowc+0x1a>
 80068d4:	b14b      	cbz	r3, 80068ea <__ascii_mbtowc+0x1e>
 80068d6:	7813      	ldrb	r3, [r2, #0]
 80068d8:	600b      	str	r3, [r1, #0]
 80068da:	7812      	ldrb	r2, [r2, #0]
 80068dc:	1c10      	adds	r0, r2, #0
 80068de:	bf18      	it	ne
 80068e0:	2001      	movne	r0, #1
 80068e2:	b002      	add	sp, #8
 80068e4:	4770      	bx	lr
 80068e6:	4610      	mov	r0, r2
 80068e8:	e7fb      	b.n	80068e2 <__ascii_mbtowc+0x16>
 80068ea:	f06f 0001 	mvn.w	r0, #1
 80068ee:	e7f8      	b.n	80068e2 <__ascii_mbtowc+0x16>

080068f0 <memcpy>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	1e43      	subs	r3, r0, #1
 80068f4:	440a      	add	r2, r1
 80068f6:	4291      	cmp	r1, r2
 80068f8:	d100      	bne.n	80068fc <memcpy+0xc>
 80068fa:	bd10      	pop	{r4, pc}
 80068fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006904:	e7f7      	b.n	80068f6 <memcpy+0x6>

08006906 <_Balloc>:
 8006906:	b570      	push	{r4, r5, r6, lr}
 8006908:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800690a:	4604      	mov	r4, r0
 800690c:	460e      	mov	r6, r1
 800690e:	b93d      	cbnz	r5, 8006920 <_Balloc+0x1a>
 8006910:	2010      	movs	r0, #16
 8006912:	f7ff ffd3 	bl	80068bc <malloc>
 8006916:	6260      	str	r0, [r4, #36]	; 0x24
 8006918:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800691c:	6005      	str	r5, [r0, #0]
 800691e:	60c5      	str	r5, [r0, #12]
 8006920:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006922:	68eb      	ldr	r3, [r5, #12]
 8006924:	b183      	cbz	r3, 8006948 <_Balloc+0x42>
 8006926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800692e:	b9b8      	cbnz	r0, 8006960 <_Balloc+0x5a>
 8006930:	2101      	movs	r1, #1
 8006932:	fa01 f506 	lsl.w	r5, r1, r6
 8006936:	1d6a      	adds	r2, r5, #5
 8006938:	0092      	lsls	r2, r2, #2
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fbe1 	bl	8007102 <_calloc_r>
 8006940:	b160      	cbz	r0, 800695c <_Balloc+0x56>
 8006942:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006946:	e00e      	b.n	8006966 <_Balloc+0x60>
 8006948:	2221      	movs	r2, #33	; 0x21
 800694a:	2104      	movs	r1, #4
 800694c:	4620      	mov	r0, r4
 800694e:	f000 fbd8 	bl	8007102 <_calloc_r>
 8006952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006954:	60e8      	str	r0, [r5, #12]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e4      	bne.n	8006926 <_Balloc+0x20>
 800695c:	2000      	movs	r0, #0
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	6802      	ldr	r2, [r0, #0]
 8006962:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006966:	2300      	movs	r3, #0
 8006968:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800696c:	e7f7      	b.n	800695e <_Balloc+0x58>

0800696e <_Bfree>:
 800696e:	b570      	push	{r4, r5, r6, lr}
 8006970:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006972:	4606      	mov	r6, r0
 8006974:	460d      	mov	r5, r1
 8006976:	b93c      	cbnz	r4, 8006988 <_Bfree+0x1a>
 8006978:	2010      	movs	r0, #16
 800697a:	f7ff ff9f 	bl	80068bc <malloc>
 800697e:	6270      	str	r0, [r6, #36]	; 0x24
 8006980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006984:	6004      	str	r4, [r0, #0]
 8006986:	60c4      	str	r4, [r0, #12]
 8006988:	b13d      	cbz	r5, 800699a <_Bfree+0x2c>
 800698a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800698c:	686a      	ldr	r2, [r5, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006994:	6029      	str	r1, [r5, #0]
 8006996:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800699a:	bd70      	pop	{r4, r5, r6, pc}

0800699c <__multadd>:
 800699c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a0:	690d      	ldr	r5, [r1, #16]
 80069a2:	461f      	mov	r7, r3
 80069a4:	4606      	mov	r6, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	f101 0c14 	add.w	ip, r1, #20
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8dc 0000 	ldr.w	r0, [ip]
 80069b2:	b281      	uxth	r1, r0
 80069b4:	fb02 7101 	mla	r1, r2, r1, r7
 80069b8:	0c0f      	lsrs	r7, r1, #16
 80069ba:	0c00      	lsrs	r0, r0, #16
 80069bc:	fb02 7000 	mla	r0, r2, r0, r7
 80069c0:	b289      	uxth	r1, r1
 80069c2:	3301      	adds	r3, #1
 80069c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80069c8:	429d      	cmp	r5, r3
 80069ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80069ce:	f84c 1b04 	str.w	r1, [ip], #4
 80069d2:	dcec      	bgt.n	80069ae <__multadd+0x12>
 80069d4:	b1d7      	cbz	r7, 8006a0c <__multadd+0x70>
 80069d6:	68a3      	ldr	r3, [r4, #8]
 80069d8:	42ab      	cmp	r3, r5
 80069da:	dc12      	bgt.n	8006a02 <__multadd+0x66>
 80069dc:	6861      	ldr	r1, [r4, #4]
 80069de:	4630      	mov	r0, r6
 80069e0:	3101      	adds	r1, #1
 80069e2:	f7ff ff90 	bl	8006906 <_Balloc>
 80069e6:	6922      	ldr	r2, [r4, #16]
 80069e8:	3202      	adds	r2, #2
 80069ea:	f104 010c 	add.w	r1, r4, #12
 80069ee:	4680      	mov	r8, r0
 80069f0:	0092      	lsls	r2, r2, #2
 80069f2:	300c      	adds	r0, #12
 80069f4:	f7ff ff7c 	bl	80068f0 <memcpy>
 80069f8:	4621      	mov	r1, r4
 80069fa:	4630      	mov	r0, r6
 80069fc:	f7ff ffb7 	bl	800696e <_Bfree>
 8006a00:	4644      	mov	r4, r8
 8006a02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a06:	3501      	adds	r5, #1
 8006a08:	615f      	str	r7, [r3, #20]
 8006a0a:	6125      	str	r5, [r4, #16]
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a12 <__s2b>:
 8006a12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a16:	460c      	mov	r4, r1
 8006a18:	4615      	mov	r5, r2
 8006a1a:	461f      	mov	r7, r3
 8006a1c:	2209      	movs	r2, #9
 8006a1e:	3308      	adds	r3, #8
 8006a20:	4606      	mov	r6, r0
 8006a22:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a26:	2100      	movs	r1, #0
 8006a28:	2201      	movs	r2, #1
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	db20      	blt.n	8006a70 <__s2b+0x5e>
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7ff ff69 	bl	8006906 <_Balloc>
 8006a34:	9b08      	ldr	r3, [sp, #32]
 8006a36:	6143      	str	r3, [r0, #20]
 8006a38:	2d09      	cmp	r5, #9
 8006a3a:	f04f 0301 	mov.w	r3, #1
 8006a3e:	6103      	str	r3, [r0, #16]
 8006a40:	dd19      	ble.n	8006a76 <__s2b+0x64>
 8006a42:	f104 0809 	add.w	r8, r4, #9
 8006a46:	46c1      	mov	r9, r8
 8006a48:	442c      	add	r4, r5
 8006a4a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006a4e:	4601      	mov	r1, r0
 8006a50:	3b30      	subs	r3, #48	; 0x30
 8006a52:	220a      	movs	r2, #10
 8006a54:	4630      	mov	r0, r6
 8006a56:	f7ff ffa1 	bl	800699c <__multadd>
 8006a5a:	45a1      	cmp	r9, r4
 8006a5c:	d1f5      	bne.n	8006a4a <__s2b+0x38>
 8006a5e:	eb08 0405 	add.w	r4, r8, r5
 8006a62:	3c08      	subs	r4, #8
 8006a64:	1b2d      	subs	r5, r5, r4
 8006a66:	1963      	adds	r3, r4, r5
 8006a68:	42bb      	cmp	r3, r7
 8006a6a:	db07      	blt.n	8006a7c <__s2b+0x6a>
 8006a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a70:	0052      	lsls	r2, r2, #1
 8006a72:	3101      	adds	r1, #1
 8006a74:	e7d9      	b.n	8006a2a <__s2b+0x18>
 8006a76:	340a      	adds	r4, #10
 8006a78:	2509      	movs	r5, #9
 8006a7a:	e7f3      	b.n	8006a64 <__s2b+0x52>
 8006a7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a80:	4601      	mov	r1, r0
 8006a82:	3b30      	subs	r3, #48	; 0x30
 8006a84:	220a      	movs	r2, #10
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7ff ff88 	bl	800699c <__multadd>
 8006a8c:	e7eb      	b.n	8006a66 <__s2b+0x54>

08006a8e <__hi0bits>:
 8006a8e:	0c02      	lsrs	r2, r0, #16
 8006a90:	0412      	lsls	r2, r2, #16
 8006a92:	4603      	mov	r3, r0
 8006a94:	b9b2      	cbnz	r2, 8006ac4 <__hi0bits+0x36>
 8006a96:	0403      	lsls	r3, r0, #16
 8006a98:	2010      	movs	r0, #16
 8006a9a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a9e:	bf04      	itt	eq
 8006aa0:	021b      	lsleq	r3, r3, #8
 8006aa2:	3008      	addeq	r0, #8
 8006aa4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006aa8:	bf04      	itt	eq
 8006aaa:	011b      	lsleq	r3, r3, #4
 8006aac:	3004      	addeq	r0, #4
 8006aae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ab2:	bf04      	itt	eq
 8006ab4:	009b      	lsleq	r3, r3, #2
 8006ab6:	3002      	addeq	r0, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	db06      	blt.n	8006aca <__hi0bits+0x3c>
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	d503      	bpl.n	8006ac8 <__hi0bits+0x3a>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	4770      	bx	lr
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e7e8      	b.n	8006a9a <__hi0bits+0xc>
 8006ac8:	2020      	movs	r0, #32
 8006aca:	4770      	bx	lr

08006acc <__lo0bits>:
 8006acc:	6803      	ldr	r3, [r0, #0]
 8006ace:	f013 0207 	ands.w	r2, r3, #7
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	d00b      	beq.n	8006aee <__lo0bits+0x22>
 8006ad6:	07da      	lsls	r2, r3, #31
 8006ad8:	d423      	bmi.n	8006b22 <__lo0bits+0x56>
 8006ada:	0798      	lsls	r0, r3, #30
 8006adc:	bf49      	itett	mi
 8006ade:	085b      	lsrmi	r3, r3, #1
 8006ae0:	089b      	lsrpl	r3, r3, #2
 8006ae2:	2001      	movmi	r0, #1
 8006ae4:	600b      	strmi	r3, [r1, #0]
 8006ae6:	bf5c      	itt	pl
 8006ae8:	600b      	strpl	r3, [r1, #0]
 8006aea:	2002      	movpl	r0, #2
 8006aec:	4770      	bx	lr
 8006aee:	b298      	uxth	r0, r3
 8006af0:	b9a8      	cbnz	r0, 8006b1e <__lo0bits+0x52>
 8006af2:	0c1b      	lsrs	r3, r3, #16
 8006af4:	2010      	movs	r0, #16
 8006af6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006afa:	bf04      	itt	eq
 8006afc:	0a1b      	lsreq	r3, r3, #8
 8006afe:	3008      	addeq	r0, #8
 8006b00:	071a      	lsls	r2, r3, #28
 8006b02:	bf04      	itt	eq
 8006b04:	091b      	lsreq	r3, r3, #4
 8006b06:	3004      	addeq	r0, #4
 8006b08:	079a      	lsls	r2, r3, #30
 8006b0a:	bf04      	itt	eq
 8006b0c:	089b      	lsreq	r3, r3, #2
 8006b0e:	3002      	addeq	r0, #2
 8006b10:	07da      	lsls	r2, r3, #31
 8006b12:	d402      	bmi.n	8006b1a <__lo0bits+0x4e>
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	d006      	beq.n	8006b26 <__lo0bits+0x5a>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	600b      	str	r3, [r1, #0]
 8006b1c:	4770      	bx	lr
 8006b1e:	4610      	mov	r0, r2
 8006b20:	e7e9      	b.n	8006af6 <__lo0bits+0x2a>
 8006b22:	2000      	movs	r0, #0
 8006b24:	4770      	bx	lr
 8006b26:	2020      	movs	r0, #32
 8006b28:	4770      	bx	lr

08006b2a <__i2b>:
 8006b2a:	b510      	push	{r4, lr}
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	2101      	movs	r1, #1
 8006b30:	f7ff fee9 	bl	8006906 <_Balloc>
 8006b34:	2201      	movs	r2, #1
 8006b36:	6144      	str	r4, [r0, #20]
 8006b38:	6102      	str	r2, [r0, #16]
 8006b3a:	bd10      	pop	{r4, pc}

08006b3c <__multiply>:
 8006b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	4614      	mov	r4, r2
 8006b42:	690a      	ldr	r2, [r1, #16]
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	bfb8      	it	lt
 8006b4a:	460b      	movlt	r3, r1
 8006b4c:	4688      	mov	r8, r1
 8006b4e:	bfbc      	itt	lt
 8006b50:	46a0      	movlt	r8, r4
 8006b52:	461c      	movlt	r4, r3
 8006b54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006b64:	eb07 0609 	add.w	r6, r7, r9
 8006b68:	42b3      	cmp	r3, r6
 8006b6a:	bfb8      	it	lt
 8006b6c:	3101      	addlt	r1, #1
 8006b6e:	f7ff feca 	bl	8006906 <_Balloc>
 8006b72:	f100 0514 	add.w	r5, r0, #20
 8006b76:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4573      	cmp	r3, lr
 8006b80:	d316      	bcc.n	8006bb0 <__multiply+0x74>
 8006b82:	f104 0214 	add.w	r2, r4, #20
 8006b86:	f108 0114 	add.w	r1, r8, #20
 8006b8a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006b8e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	9b00      	ldr	r3, [sp, #0]
 8006b96:	9201      	str	r2, [sp, #4]
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d80c      	bhi.n	8006bb6 <__multiply+0x7a>
 8006b9c:	2e00      	cmp	r6, #0
 8006b9e:	dd03      	ble.n	8006ba8 <__multiply+0x6c>
 8006ba0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d05d      	beq.n	8006c64 <__multiply+0x128>
 8006ba8:	6106      	str	r6, [r0, #16]
 8006baa:	b003      	add	sp, #12
 8006bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb0:	f843 2b04 	str.w	r2, [r3], #4
 8006bb4:	e7e3      	b.n	8006b7e <__multiply+0x42>
 8006bb6:	f8b2 b000 	ldrh.w	fp, [r2]
 8006bba:	f1bb 0f00 	cmp.w	fp, #0
 8006bbe:	d023      	beq.n	8006c08 <__multiply+0xcc>
 8006bc0:	4689      	mov	r9, r1
 8006bc2:	46ac      	mov	ip, r5
 8006bc4:	f04f 0800 	mov.w	r8, #0
 8006bc8:	f859 4b04 	ldr.w	r4, [r9], #4
 8006bcc:	f8dc a000 	ldr.w	sl, [ip]
 8006bd0:	b2a3      	uxth	r3, r4
 8006bd2:	fa1f fa8a 	uxth.w	sl, sl
 8006bd6:	fb0b a303 	mla	r3, fp, r3, sl
 8006bda:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bde:	f8dc 4000 	ldr.w	r4, [ip]
 8006be2:	4443      	add	r3, r8
 8006be4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006be8:	fb0b 840a 	mla	r4, fp, sl, r8
 8006bec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006bf0:	46e2      	mov	sl, ip
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006bf8:	454f      	cmp	r7, r9
 8006bfa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006bfe:	f84a 3b04 	str.w	r3, [sl], #4
 8006c02:	d82b      	bhi.n	8006c5c <__multiply+0x120>
 8006c04:	f8cc 8004 	str.w	r8, [ip, #4]
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006c0e:	3204      	adds	r2, #4
 8006c10:	f1ba 0f00 	cmp.w	sl, #0
 8006c14:	d020      	beq.n	8006c58 <__multiply+0x11c>
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	4689      	mov	r9, r1
 8006c1a:	46a8      	mov	r8, r5
 8006c1c:	f04f 0b00 	mov.w	fp, #0
 8006c20:	f8b9 c000 	ldrh.w	ip, [r9]
 8006c24:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006c28:	fb0a 440c 	mla	r4, sl, ip, r4
 8006c2c:	445c      	add	r4, fp
 8006c2e:	46c4      	mov	ip, r8
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c36:	f84c 3b04 	str.w	r3, [ip], #4
 8006c3a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c3e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	fb0a b303 	mla	r3, sl, r3, fp
 8006c48:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006c4c:	454f      	cmp	r7, r9
 8006c4e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006c52:	d805      	bhi.n	8006c60 <__multiply+0x124>
 8006c54:	f8c8 3004 	str.w	r3, [r8, #4]
 8006c58:	3504      	adds	r5, #4
 8006c5a:	e79b      	b.n	8006b94 <__multiply+0x58>
 8006c5c:	46d4      	mov	ip, sl
 8006c5e:	e7b3      	b.n	8006bc8 <__multiply+0x8c>
 8006c60:	46e0      	mov	r8, ip
 8006c62:	e7dd      	b.n	8006c20 <__multiply+0xe4>
 8006c64:	3e01      	subs	r6, #1
 8006c66:	e799      	b.n	8006b9c <__multiply+0x60>

08006c68 <__pow5mult>:
 8006c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	f012 0203 	ands.w	r2, r2, #3
 8006c72:	4606      	mov	r6, r0
 8006c74:	460f      	mov	r7, r1
 8006c76:	d007      	beq.n	8006c88 <__pow5mult+0x20>
 8006c78:	3a01      	subs	r2, #1
 8006c7a:	4c21      	ldr	r4, [pc, #132]	; (8006d00 <__pow5mult+0x98>)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c82:	f7ff fe8b 	bl	800699c <__multadd>
 8006c86:	4607      	mov	r7, r0
 8006c88:	10ad      	asrs	r5, r5, #2
 8006c8a:	d035      	beq.n	8006cf8 <__pow5mult+0x90>
 8006c8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c8e:	b93c      	cbnz	r4, 8006ca0 <__pow5mult+0x38>
 8006c90:	2010      	movs	r0, #16
 8006c92:	f7ff fe13 	bl	80068bc <malloc>
 8006c96:	6270      	str	r0, [r6, #36]	; 0x24
 8006c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c9c:	6004      	str	r4, [r0, #0]
 8006c9e:	60c4      	str	r4, [r0, #12]
 8006ca0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ca8:	b94c      	cbnz	r4, 8006cbe <__pow5mult+0x56>
 8006caa:	f240 2171 	movw	r1, #625	; 0x271
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7ff ff3b 	bl	8006b2a <__i2b>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cba:	4604      	mov	r4, r0
 8006cbc:	6003      	str	r3, [r0, #0]
 8006cbe:	f04f 0800 	mov.w	r8, #0
 8006cc2:	07eb      	lsls	r3, r5, #31
 8006cc4:	d50a      	bpl.n	8006cdc <__pow5mult+0x74>
 8006cc6:	4639      	mov	r1, r7
 8006cc8:	4622      	mov	r2, r4
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7ff ff36 	bl	8006b3c <__multiply>
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4681      	mov	r9, r0
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7ff fe4a 	bl	800696e <_Bfree>
 8006cda:	464f      	mov	r7, r9
 8006cdc:	106d      	asrs	r5, r5, #1
 8006cde:	d00b      	beq.n	8006cf8 <__pow5mult+0x90>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	b938      	cbnz	r0, 8006cf4 <__pow5mult+0x8c>
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff ff27 	bl	8006b3c <__multiply>
 8006cee:	6020      	str	r0, [r4, #0]
 8006cf0:	f8c0 8000 	str.w	r8, [r0]
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	e7e4      	b.n	8006cc2 <__pow5mult+0x5a>
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfe:	bf00      	nop
 8006d00:	080089d0 	.word	0x080089d0

08006d04 <__lshift>:
 8006d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d08:	460c      	mov	r4, r1
 8006d0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6849      	ldr	r1, [r1, #4]
 8006d12:	eb0a 0903 	add.w	r9, sl, r3
 8006d16:	68a3      	ldr	r3, [r4, #8]
 8006d18:	4607      	mov	r7, r0
 8006d1a:	4616      	mov	r6, r2
 8006d1c:	f109 0501 	add.w	r5, r9, #1
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	db32      	blt.n	8006d8a <__lshift+0x86>
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7ff fdee 	bl	8006906 <_Balloc>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4680      	mov	r8, r0
 8006d2e:	f100 0114 	add.w	r1, r0, #20
 8006d32:	461a      	mov	r2, r3
 8006d34:	4553      	cmp	r3, sl
 8006d36:	db2b      	blt.n	8006d90 <__lshift+0x8c>
 8006d38:	6920      	ldr	r0, [r4, #16]
 8006d3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d3e:	f104 0314 	add.w	r3, r4, #20
 8006d42:	f016 021f 	ands.w	r2, r6, #31
 8006d46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d4a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d4e:	d025      	beq.n	8006d9c <__lshift+0x98>
 8006d50:	f1c2 0e20 	rsb	lr, r2, #32
 8006d54:	2000      	movs	r0, #0
 8006d56:	681e      	ldr	r6, [r3, #0]
 8006d58:	468a      	mov	sl, r1
 8006d5a:	4096      	lsls	r6, r2
 8006d5c:	4330      	orrs	r0, r6
 8006d5e:	f84a 0b04 	str.w	r0, [sl], #4
 8006d62:	f853 0b04 	ldr.w	r0, [r3], #4
 8006d66:	459c      	cmp	ip, r3
 8006d68:	fa20 f00e 	lsr.w	r0, r0, lr
 8006d6c:	d814      	bhi.n	8006d98 <__lshift+0x94>
 8006d6e:	6048      	str	r0, [r1, #4]
 8006d70:	b108      	cbz	r0, 8006d76 <__lshift+0x72>
 8006d72:	f109 0502 	add.w	r5, r9, #2
 8006d76:	3d01      	subs	r5, #1
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f8c8 5010 	str.w	r5, [r8, #16]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	f7ff fdf5 	bl	800696e <_Bfree>
 8006d84:	4640      	mov	r0, r8
 8006d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8a:	3101      	adds	r1, #1
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	e7c7      	b.n	8006d20 <__lshift+0x1c>
 8006d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006d94:	3301      	adds	r3, #1
 8006d96:	e7cd      	b.n	8006d34 <__lshift+0x30>
 8006d98:	4651      	mov	r1, sl
 8006d9a:	e7dc      	b.n	8006d56 <__lshift+0x52>
 8006d9c:	3904      	subs	r1, #4
 8006d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006da6:	459c      	cmp	ip, r3
 8006da8:	d8f9      	bhi.n	8006d9e <__lshift+0x9a>
 8006daa:	e7e4      	b.n	8006d76 <__lshift+0x72>

08006dac <__mcmp>:
 8006dac:	6903      	ldr	r3, [r0, #16]
 8006dae:	690a      	ldr	r2, [r1, #16]
 8006db0:	1a9b      	subs	r3, r3, r2
 8006db2:	b530      	push	{r4, r5, lr}
 8006db4:	d10c      	bne.n	8006dd0 <__mcmp+0x24>
 8006db6:	0092      	lsls	r2, r2, #2
 8006db8:	3014      	adds	r0, #20
 8006dba:	3114      	adds	r1, #20
 8006dbc:	1884      	adds	r4, r0, r2
 8006dbe:	4411      	add	r1, r2
 8006dc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006dc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006dc8:	4295      	cmp	r5, r2
 8006dca:	d003      	beq.n	8006dd4 <__mcmp+0x28>
 8006dcc:	d305      	bcc.n	8006dda <__mcmp+0x2e>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	bd30      	pop	{r4, r5, pc}
 8006dd4:	42a0      	cmp	r0, r4
 8006dd6:	d3f3      	bcc.n	8006dc0 <__mcmp+0x14>
 8006dd8:	e7fa      	b.n	8006dd0 <__mcmp+0x24>
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295
 8006dde:	e7f7      	b.n	8006dd0 <__mcmp+0x24>

08006de0 <__mdiff>:
 8006de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	460d      	mov	r5, r1
 8006de6:	4607      	mov	r7, r0
 8006de8:	4611      	mov	r1, r2
 8006dea:	4628      	mov	r0, r5
 8006dec:	4614      	mov	r4, r2
 8006dee:	f7ff ffdd 	bl	8006dac <__mcmp>
 8006df2:	1e06      	subs	r6, r0, #0
 8006df4:	d108      	bne.n	8006e08 <__mdiff+0x28>
 8006df6:	4631      	mov	r1, r6
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f7ff fd84 	bl	8006906 <_Balloc>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e08:	bfa4      	itt	ge
 8006e0a:	4623      	movge	r3, r4
 8006e0c:	462c      	movge	r4, r5
 8006e0e:	4638      	mov	r0, r7
 8006e10:	6861      	ldr	r1, [r4, #4]
 8006e12:	bfa6      	itte	ge
 8006e14:	461d      	movge	r5, r3
 8006e16:	2600      	movge	r6, #0
 8006e18:	2601      	movlt	r6, #1
 8006e1a:	f7ff fd74 	bl	8006906 <_Balloc>
 8006e1e:	692b      	ldr	r3, [r5, #16]
 8006e20:	60c6      	str	r6, [r0, #12]
 8006e22:	6926      	ldr	r6, [r4, #16]
 8006e24:	f105 0914 	add.w	r9, r5, #20
 8006e28:	f104 0214 	add.w	r2, r4, #20
 8006e2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006e30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006e34:	f100 0514 	add.w	r5, r0, #20
 8006e38:	f04f 0e00 	mov.w	lr, #0
 8006e3c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006e40:	f859 4b04 	ldr.w	r4, [r9], #4
 8006e44:	fa1e f18a 	uxtah	r1, lr, sl
 8006e48:	b2a3      	uxth	r3, r4
 8006e4a:	1ac9      	subs	r1, r1, r3
 8006e4c:	0c23      	lsrs	r3, r4, #16
 8006e4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006e52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e56:	b289      	uxth	r1, r1
 8006e58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006e5c:	45c8      	cmp	r8, r9
 8006e5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e62:	4694      	mov	ip, r2
 8006e64:	f845 3b04 	str.w	r3, [r5], #4
 8006e68:	d8e8      	bhi.n	8006e3c <__mdiff+0x5c>
 8006e6a:	45bc      	cmp	ip, r7
 8006e6c:	d304      	bcc.n	8006e78 <__mdiff+0x98>
 8006e6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006e72:	b183      	cbz	r3, 8006e96 <__mdiff+0xb6>
 8006e74:	6106      	str	r6, [r0, #16]
 8006e76:	e7c5      	b.n	8006e04 <__mdiff+0x24>
 8006e78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e7c:	fa1e f381 	uxtah	r3, lr, r1
 8006e80:	141a      	asrs	r2, r3, #16
 8006e82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006e90:	f845 3b04 	str.w	r3, [r5], #4
 8006e94:	e7e9      	b.n	8006e6a <__mdiff+0x8a>
 8006e96:	3e01      	subs	r6, #1
 8006e98:	e7e9      	b.n	8006e6e <__mdiff+0x8e>
	...

08006e9c <__ulp>:
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <__ulp+0x4c>)
 8006e9e:	ee10 2a90 	vmov	r2, s1
 8006ea2:	401a      	ands	r2, r3
 8006ea4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	dd04      	ble.n	8006eb6 <__ulp+0x1a>
 8006eac:	2000      	movs	r0, #0
 8006eae:	4619      	mov	r1, r3
 8006eb0:	ec41 0b10 	vmov	d0, r0, r1
 8006eb4:	4770      	bx	lr
 8006eb6:	425b      	negs	r3, r3
 8006eb8:	151b      	asrs	r3, r3, #20
 8006eba:	2b13      	cmp	r3, #19
 8006ebc:	f04f 0000 	mov.w	r0, #0
 8006ec0:	f04f 0100 	mov.w	r1, #0
 8006ec4:	dc04      	bgt.n	8006ed0 <__ulp+0x34>
 8006ec6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006eca:	fa42 f103 	asr.w	r1, r2, r3
 8006ece:	e7ef      	b.n	8006eb0 <__ulp+0x14>
 8006ed0:	3b14      	subs	r3, #20
 8006ed2:	2b1e      	cmp	r3, #30
 8006ed4:	f04f 0201 	mov.w	r2, #1
 8006ed8:	bfda      	itte	le
 8006eda:	f1c3 031f 	rsble	r3, r3, #31
 8006ede:	fa02 f303 	lslle.w	r3, r2, r3
 8006ee2:	4613      	movgt	r3, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	e7e3      	b.n	8006eb0 <__ulp+0x14>
 8006ee8:	7ff00000 	.word	0x7ff00000

08006eec <__b2d>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	6905      	ldr	r5, [r0, #16]
 8006ef0:	f100 0714 	add.w	r7, r0, #20
 8006ef4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006ef8:	1f2e      	subs	r6, r5, #4
 8006efa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006efe:	4620      	mov	r0, r4
 8006f00:	f7ff fdc5 	bl	8006a8e <__hi0bits>
 8006f04:	f1c0 0320 	rsb	r3, r0, #32
 8006f08:	280a      	cmp	r0, #10
 8006f0a:	600b      	str	r3, [r1, #0]
 8006f0c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006f84 <__b2d+0x98>
 8006f10:	dc14      	bgt.n	8006f3c <__b2d+0x50>
 8006f12:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f16:	fa24 f10e 	lsr.w	r1, r4, lr
 8006f1a:	42b7      	cmp	r7, r6
 8006f1c:	ea41 030c 	orr.w	r3, r1, ip
 8006f20:	bf34      	ite	cc
 8006f22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006f26:	2100      	movcs	r1, #0
 8006f28:	3015      	adds	r0, #21
 8006f2a:	fa04 f000 	lsl.w	r0, r4, r0
 8006f2e:	fa21 f10e 	lsr.w	r1, r1, lr
 8006f32:	ea40 0201 	orr.w	r2, r0, r1
 8006f36:	ec43 2b10 	vmov	d0, r2, r3
 8006f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f3c:	42b7      	cmp	r7, r6
 8006f3e:	bf3a      	itte	cc
 8006f40:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006f48:	2100      	movcs	r1, #0
 8006f4a:	380b      	subs	r0, #11
 8006f4c:	d015      	beq.n	8006f7a <__b2d+0x8e>
 8006f4e:	4084      	lsls	r4, r0
 8006f50:	f1c0 0520 	rsb	r5, r0, #32
 8006f54:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006f58:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006f5c:	42be      	cmp	r6, r7
 8006f5e:	fa21 fc05 	lsr.w	ip, r1, r5
 8006f62:	ea44 030c 	orr.w	r3, r4, ip
 8006f66:	bf8c      	ite	hi
 8006f68:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006f6c:	2400      	movls	r4, #0
 8006f6e:	fa01 f000 	lsl.w	r0, r1, r0
 8006f72:	40ec      	lsrs	r4, r5
 8006f74:	ea40 0204 	orr.w	r2, r0, r4
 8006f78:	e7dd      	b.n	8006f36 <__b2d+0x4a>
 8006f7a:	ea44 030c 	orr.w	r3, r4, ip
 8006f7e:	460a      	mov	r2, r1
 8006f80:	e7d9      	b.n	8006f36 <__b2d+0x4a>
 8006f82:	bf00      	nop
 8006f84:	3ff00000 	.word	0x3ff00000

08006f88 <__d2b>:
 8006f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f8c:	460e      	mov	r6, r1
 8006f8e:	2101      	movs	r1, #1
 8006f90:	ec59 8b10 	vmov	r8, r9, d0
 8006f94:	4615      	mov	r5, r2
 8006f96:	f7ff fcb6 	bl	8006906 <_Balloc>
 8006f9a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f9e:	4607      	mov	r7, r0
 8006fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fa4:	bb34      	cbnz	r4, 8006ff4 <__d2b+0x6c>
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	f1b8 0300 	subs.w	r3, r8, #0
 8006fac:	d027      	beq.n	8006ffe <__d2b+0x76>
 8006fae:	a802      	add	r0, sp, #8
 8006fb0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006fb4:	f7ff fd8a 	bl	8006acc <__lo0bits>
 8006fb8:	9900      	ldr	r1, [sp, #0]
 8006fba:	b1f0      	cbz	r0, 8006ffa <__d2b+0x72>
 8006fbc:	9a01      	ldr	r2, [sp, #4]
 8006fbe:	f1c0 0320 	rsb	r3, r0, #32
 8006fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	40c2      	lsrs	r2, r0
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	9201      	str	r2, [sp, #4]
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf14      	ite	ne
 8006fd6:	2102      	movne	r1, #2
 8006fd8:	2101      	moveq	r1, #1
 8006fda:	6139      	str	r1, [r7, #16]
 8006fdc:	b1c4      	cbz	r4, 8007010 <__d2b+0x88>
 8006fde:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006fe2:	4404      	add	r4, r0
 8006fe4:	6034      	str	r4, [r6, #0]
 8006fe6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fea:	6028      	str	r0, [r5, #0]
 8006fec:	4638      	mov	r0, r7
 8006fee:	b003      	add	sp, #12
 8006ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ff8:	e7d5      	b.n	8006fa6 <__d2b+0x1e>
 8006ffa:	6179      	str	r1, [r7, #20]
 8006ffc:	e7e7      	b.n	8006fce <__d2b+0x46>
 8006ffe:	a801      	add	r0, sp, #4
 8007000:	f7ff fd64 	bl	8006acc <__lo0bits>
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	2101      	movs	r1, #1
 800700a:	6139      	str	r1, [r7, #16]
 800700c:	3020      	adds	r0, #32
 800700e:	e7e5      	b.n	8006fdc <__d2b+0x54>
 8007010:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007018:	6030      	str	r0, [r6, #0]
 800701a:	6918      	ldr	r0, [r3, #16]
 800701c:	f7ff fd37 	bl	8006a8e <__hi0bits>
 8007020:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007024:	e7e1      	b.n	8006fea <__d2b+0x62>

08007026 <__ratio>:
 8007026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	4688      	mov	r8, r1
 800702c:	4669      	mov	r1, sp
 800702e:	4681      	mov	r9, r0
 8007030:	f7ff ff5c 	bl	8006eec <__b2d>
 8007034:	a901      	add	r1, sp, #4
 8007036:	4640      	mov	r0, r8
 8007038:	ec57 6b10 	vmov	r6, r7, d0
 800703c:	f7ff ff56 	bl	8006eec <__b2d>
 8007040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007044:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007048:	eba3 0c02 	sub.w	ip, r3, r2
 800704c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007050:	1a9b      	subs	r3, r3, r2
 8007052:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007056:	ec5b ab10 	vmov	sl, fp, d0
 800705a:	2b00      	cmp	r3, #0
 800705c:	bfce      	itee	gt
 800705e:	463a      	movgt	r2, r7
 8007060:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007064:	465a      	movle	r2, fp
 8007066:	4659      	mov	r1, fp
 8007068:	463d      	mov	r5, r7
 800706a:	bfd4      	ite	le
 800706c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007070:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007074:	4630      	mov	r0, r6
 8007076:	ee10 2a10 	vmov	r2, s0
 800707a:	460b      	mov	r3, r1
 800707c:	4629      	mov	r1, r5
 800707e:	f7f9 fbed 	bl	800085c <__aeabi_ddiv>
 8007082:	ec41 0b10 	vmov	d0, r0, r1
 8007086:	b003      	add	sp, #12
 8007088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800708c <__copybits>:
 800708c:	3901      	subs	r1, #1
 800708e:	b510      	push	{r4, lr}
 8007090:	1149      	asrs	r1, r1, #5
 8007092:	6914      	ldr	r4, [r2, #16]
 8007094:	3101      	adds	r1, #1
 8007096:	f102 0314 	add.w	r3, r2, #20
 800709a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800709e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	4602      	mov	r2, r0
 80070a6:	d303      	bcc.n	80070b0 <__copybits+0x24>
 80070a8:	2300      	movs	r3, #0
 80070aa:	428a      	cmp	r2, r1
 80070ac:	d305      	bcc.n	80070ba <__copybits+0x2e>
 80070ae:	bd10      	pop	{r4, pc}
 80070b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b4:	f840 2b04 	str.w	r2, [r0], #4
 80070b8:	e7f3      	b.n	80070a2 <__copybits+0x16>
 80070ba:	f842 3b04 	str.w	r3, [r2], #4
 80070be:	e7f4      	b.n	80070aa <__copybits+0x1e>

080070c0 <__any_on>:
 80070c0:	f100 0214 	add.w	r2, r0, #20
 80070c4:	6900      	ldr	r0, [r0, #16]
 80070c6:	114b      	asrs	r3, r1, #5
 80070c8:	4298      	cmp	r0, r3
 80070ca:	b510      	push	{r4, lr}
 80070cc:	db11      	blt.n	80070f2 <__any_on+0x32>
 80070ce:	dd0a      	ble.n	80070e6 <__any_on+0x26>
 80070d0:	f011 011f 	ands.w	r1, r1, #31
 80070d4:	d007      	beq.n	80070e6 <__any_on+0x26>
 80070d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80070da:	fa24 f001 	lsr.w	r0, r4, r1
 80070de:	fa00 f101 	lsl.w	r1, r0, r1
 80070e2:	428c      	cmp	r4, r1
 80070e4:	d10b      	bne.n	80070fe <__any_on+0x3e>
 80070e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d803      	bhi.n	80070f6 <__any_on+0x36>
 80070ee:	2000      	movs	r0, #0
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	4603      	mov	r3, r0
 80070f4:	e7f7      	b.n	80070e6 <__any_on+0x26>
 80070f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070fa:	2900      	cmp	r1, #0
 80070fc:	d0f5      	beq.n	80070ea <__any_on+0x2a>
 80070fe:	2001      	movs	r0, #1
 8007100:	e7f6      	b.n	80070f0 <__any_on+0x30>

08007102 <_calloc_r>:
 8007102:	b538      	push	{r3, r4, r5, lr}
 8007104:	fb02 f401 	mul.w	r4, r2, r1
 8007108:	4621      	mov	r1, r4
 800710a:	f000 f857 	bl	80071bc <_malloc_r>
 800710e:	4605      	mov	r5, r0
 8007110:	b118      	cbz	r0, 800711a <_calloc_r+0x18>
 8007112:	4622      	mov	r2, r4
 8007114:	2100      	movs	r1, #0
 8007116:	f7fc fc13 	bl	8003940 <memset>
 800711a:	4628      	mov	r0, r5
 800711c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007120 <_free_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4605      	mov	r5, r0
 8007124:	2900      	cmp	r1, #0
 8007126:	d045      	beq.n	80071b4 <_free_r+0x94>
 8007128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800712c:	1f0c      	subs	r4, r1, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	bfb8      	it	lt
 8007132:	18e4      	addlt	r4, r4, r3
 8007134:	f001 faa5 	bl	8008682 <__malloc_lock>
 8007138:	4a1f      	ldr	r2, [pc, #124]	; (80071b8 <_free_r+0x98>)
 800713a:	6813      	ldr	r3, [r2, #0]
 800713c:	4610      	mov	r0, r2
 800713e:	b933      	cbnz	r3, 800714e <_free_r+0x2e>
 8007140:	6063      	str	r3, [r4, #4]
 8007142:	6014      	str	r4, [r2, #0]
 8007144:	4628      	mov	r0, r5
 8007146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800714a:	f001 ba9b 	b.w	8008684 <__malloc_unlock>
 800714e:	42a3      	cmp	r3, r4
 8007150:	d90c      	bls.n	800716c <_free_r+0x4c>
 8007152:	6821      	ldr	r1, [r4, #0]
 8007154:	1862      	adds	r2, r4, r1
 8007156:	4293      	cmp	r3, r2
 8007158:	bf04      	itt	eq
 800715a:	681a      	ldreq	r2, [r3, #0]
 800715c:	685b      	ldreq	r3, [r3, #4]
 800715e:	6063      	str	r3, [r4, #4]
 8007160:	bf04      	itt	eq
 8007162:	1852      	addeq	r2, r2, r1
 8007164:	6022      	streq	r2, [r4, #0]
 8007166:	6004      	str	r4, [r0, #0]
 8007168:	e7ec      	b.n	8007144 <_free_r+0x24>
 800716a:	4613      	mov	r3, r2
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	b10a      	cbz	r2, 8007174 <_free_r+0x54>
 8007170:	42a2      	cmp	r2, r4
 8007172:	d9fa      	bls.n	800716a <_free_r+0x4a>
 8007174:	6819      	ldr	r1, [r3, #0]
 8007176:	1858      	adds	r0, r3, r1
 8007178:	42a0      	cmp	r0, r4
 800717a:	d10b      	bne.n	8007194 <_free_r+0x74>
 800717c:	6820      	ldr	r0, [r4, #0]
 800717e:	4401      	add	r1, r0
 8007180:	1858      	adds	r0, r3, r1
 8007182:	4282      	cmp	r2, r0
 8007184:	6019      	str	r1, [r3, #0]
 8007186:	d1dd      	bne.n	8007144 <_free_r+0x24>
 8007188:	6810      	ldr	r0, [r2, #0]
 800718a:	6852      	ldr	r2, [r2, #4]
 800718c:	605a      	str	r2, [r3, #4]
 800718e:	4401      	add	r1, r0
 8007190:	6019      	str	r1, [r3, #0]
 8007192:	e7d7      	b.n	8007144 <_free_r+0x24>
 8007194:	d902      	bls.n	800719c <_free_r+0x7c>
 8007196:	230c      	movs	r3, #12
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	e7d3      	b.n	8007144 <_free_r+0x24>
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	1821      	adds	r1, r4, r0
 80071a0:	428a      	cmp	r2, r1
 80071a2:	bf04      	itt	eq
 80071a4:	6811      	ldreq	r1, [r2, #0]
 80071a6:	6852      	ldreq	r2, [r2, #4]
 80071a8:	6062      	str	r2, [r4, #4]
 80071aa:	bf04      	itt	eq
 80071ac:	1809      	addeq	r1, r1, r0
 80071ae:	6021      	streq	r1, [r4, #0]
 80071b0:	605c      	str	r4, [r3, #4]
 80071b2:	e7c7      	b.n	8007144 <_free_r+0x24>
 80071b4:	bd38      	pop	{r3, r4, r5, pc}
 80071b6:	bf00      	nop
 80071b8:	200001fc 	.word	0x200001fc

080071bc <_malloc_r>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	1ccd      	adds	r5, r1, #3
 80071c0:	f025 0503 	bic.w	r5, r5, #3
 80071c4:	3508      	adds	r5, #8
 80071c6:	2d0c      	cmp	r5, #12
 80071c8:	bf38      	it	cc
 80071ca:	250c      	movcc	r5, #12
 80071cc:	2d00      	cmp	r5, #0
 80071ce:	4606      	mov	r6, r0
 80071d0:	db01      	blt.n	80071d6 <_malloc_r+0x1a>
 80071d2:	42a9      	cmp	r1, r5
 80071d4:	d903      	bls.n	80071de <_malloc_r+0x22>
 80071d6:	230c      	movs	r3, #12
 80071d8:	6033      	str	r3, [r6, #0]
 80071da:	2000      	movs	r0, #0
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	f001 fa50 	bl	8008682 <__malloc_lock>
 80071e2:	4a21      	ldr	r2, [pc, #132]	; (8007268 <_malloc_r+0xac>)
 80071e4:	6814      	ldr	r4, [r2, #0]
 80071e6:	4621      	mov	r1, r4
 80071e8:	b991      	cbnz	r1, 8007210 <_malloc_r+0x54>
 80071ea:	4c20      	ldr	r4, [pc, #128]	; (800726c <_malloc_r+0xb0>)
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	b91b      	cbnz	r3, 80071f8 <_malloc_r+0x3c>
 80071f0:	4630      	mov	r0, r6
 80071f2:	f000 fe35 	bl	8007e60 <_sbrk_r>
 80071f6:	6020      	str	r0, [r4, #0]
 80071f8:	4629      	mov	r1, r5
 80071fa:	4630      	mov	r0, r6
 80071fc:	f000 fe30 	bl	8007e60 <_sbrk_r>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d124      	bne.n	800724e <_malloc_r+0x92>
 8007204:	230c      	movs	r3, #12
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	4630      	mov	r0, r6
 800720a:	f001 fa3b 	bl	8008684 <__malloc_unlock>
 800720e:	e7e4      	b.n	80071da <_malloc_r+0x1e>
 8007210:	680b      	ldr	r3, [r1, #0]
 8007212:	1b5b      	subs	r3, r3, r5
 8007214:	d418      	bmi.n	8007248 <_malloc_r+0x8c>
 8007216:	2b0b      	cmp	r3, #11
 8007218:	d90f      	bls.n	800723a <_malloc_r+0x7e>
 800721a:	600b      	str	r3, [r1, #0]
 800721c:	50cd      	str	r5, [r1, r3]
 800721e:	18cc      	adds	r4, r1, r3
 8007220:	4630      	mov	r0, r6
 8007222:	f001 fa2f 	bl	8008684 <__malloc_unlock>
 8007226:	f104 000b 	add.w	r0, r4, #11
 800722a:	1d23      	adds	r3, r4, #4
 800722c:	f020 0007 	bic.w	r0, r0, #7
 8007230:	1ac3      	subs	r3, r0, r3
 8007232:	d0d3      	beq.n	80071dc <_malloc_r+0x20>
 8007234:	425a      	negs	r2, r3
 8007236:	50e2      	str	r2, [r4, r3]
 8007238:	e7d0      	b.n	80071dc <_malloc_r+0x20>
 800723a:	428c      	cmp	r4, r1
 800723c:	684b      	ldr	r3, [r1, #4]
 800723e:	bf16      	itet	ne
 8007240:	6063      	strne	r3, [r4, #4]
 8007242:	6013      	streq	r3, [r2, #0]
 8007244:	460c      	movne	r4, r1
 8007246:	e7eb      	b.n	8007220 <_malloc_r+0x64>
 8007248:	460c      	mov	r4, r1
 800724a:	6849      	ldr	r1, [r1, #4]
 800724c:	e7cc      	b.n	80071e8 <_malloc_r+0x2c>
 800724e:	1cc4      	adds	r4, r0, #3
 8007250:	f024 0403 	bic.w	r4, r4, #3
 8007254:	42a0      	cmp	r0, r4
 8007256:	d005      	beq.n	8007264 <_malloc_r+0xa8>
 8007258:	1a21      	subs	r1, r4, r0
 800725a:	4630      	mov	r0, r6
 800725c:	f000 fe00 	bl	8007e60 <_sbrk_r>
 8007260:	3001      	adds	r0, #1
 8007262:	d0cf      	beq.n	8007204 <_malloc_r+0x48>
 8007264:	6025      	str	r5, [r4, #0]
 8007266:	e7db      	b.n	8007220 <_malloc_r+0x64>
 8007268:	200001fc 	.word	0x200001fc
 800726c:	20000200 	.word	0x20000200

08007270 <__ssputs_r>:
 8007270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	688e      	ldr	r6, [r1, #8]
 8007276:	429e      	cmp	r6, r3
 8007278:	4682      	mov	sl, r0
 800727a:	460c      	mov	r4, r1
 800727c:	4690      	mov	r8, r2
 800727e:	4699      	mov	r9, r3
 8007280:	d837      	bhi.n	80072f2 <__ssputs_r+0x82>
 8007282:	898a      	ldrh	r2, [r1, #12]
 8007284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007288:	d031      	beq.n	80072ee <__ssputs_r+0x7e>
 800728a:	6825      	ldr	r5, [r4, #0]
 800728c:	6909      	ldr	r1, [r1, #16]
 800728e:	1a6f      	subs	r7, r5, r1
 8007290:	6965      	ldr	r5, [r4, #20]
 8007292:	2302      	movs	r3, #2
 8007294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007298:	fb95 f5f3 	sdiv	r5, r5, r3
 800729c:	f109 0301 	add.w	r3, r9, #1
 80072a0:	443b      	add	r3, r7
 80072a2:	429d      	cmp	r5, r3
 80072a4:	bf38      	it	cc
 80072a6:	461d      	movcc	r5, r3
 80072a8:	0553      	lsls	r3, r2, #21
 80072aa:	d530      	bpl.n	800730e <__ssputs_r+0x9e>
 80072ac:	4629      	mov	r1, r5
 80072ae:	f7ff ff85 	bl	80071bc <_malloc_r>
 80072b2:	4606      	mov	r6, r0
 80072b4:	b950      	cbnz	r0, 80072cc <__ssputs_r+0x5c>
 80072b6:	230c      	movs	r3, #12
 80072b8:	f8ca 3000 	str.w	r3, [sl]
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c2:	81a3      	strh	r3, [r4, #12]
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072cc:	463a      	mov	r2, r7
 80072ce:	6921      	ldr	r1, [r4, #16]
 80072d0:	f7ff fb0e 	bl	80068f0 <memcpy>
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072de:	81a3      	strh	r3, [r4, #12]
 80072e0:	6126      	str	r6, [r4, #16]
 80072e2:	6165      	str	r5, [r4, #20]
 80072e4:	443e      	add	r6, r7
 80072e6:	1bed      	subs	r5, r5, r7
 80072e8:	6026      	str	r6, [r4, #0]
 80072ea:	60a5      	str	r5, [r4, #8]
 80072ec:	464e      	mov	r6, r9
 80072ee:	454e      	cmp	r6, r9
 80072f0:	d900      	bls.n	80072f4 <__ssputs_r+0x84>
 80072f2:	464e      	mov	r6, r9
 80072f4:	4632      	mov	r2, r6
 80072f6:	4641      	mov	r1, r8
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	f001 f9a9 	bl	8008650 <memmove>
 80072fe:	68a3      	ldr	r3, [r4, #8]
 8007300:	1b9b      	subs	r3, r3, r6
 8007302:	60a3      	str	r3, [r4, #8]
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	441e      	add	r6, r3
 8007308:	6026      	str	r6, [r4, #0]
 800730a:	2000      	movs	r0, #0
 800730c:	e7dc      	b.n	80072c8 <__ssputs_r+0x58>
 800730e:	462a      	mov	r2, r5
 8007310:	f001 f9b9 	bl	8008686 <_realloc_r>
 8007314:	4606      	mov	r6, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d1e2      	bne.n	80072e0 <__ssputs_r+0x70>
 800731a:	6921      	ldr	r1, [r4, #16]
 800731c:	4650      	mov	r0, sl
 800731e:	f7ff feff 	bl	8007120 <_free_r>
 8007322:	e7c8      	b.n	80072b6 <__ssputs_r+0x46>

08007324 <_svfiprintf_r>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	461d      	mov	r5, r3
 800732a:	898b      	ldrh	r3, [r1, #12]
 800732c:	061f      	lsls	r7, r3, #24
 800732e:	b09d      	sub	sp, #116	; 0x74
 8007330:	4680      	mov	r8, r0
 8007332:	460c      	mov	r4, r1
 8007334:	4616      	mov	r6, r2
 8007336:	d50f      	bpl.n	8007358 <_svfiprintf_r+0x34>
 8007338:	690b      	ldr	r3, [r1, #16]
 800733a:	b96b      	cbnz	r3, 8007358 <_svfiprintf_r+0x34>
 800733c:	2140      	movs	r1, #64	; 0x40
 800733e:	f7ff ff3d 	bl	80071bc <_malloc_r>
 8007342:	6020      	str	r0, [r4, #0]
 8007344:	6120      	str	r0, [r4, #16]
 8007346:	b928      	cbnz	r0, 8007354 <_svfiprintf_r+0x30>
 8007348:	230c      	movs	r3, #12
 800734a:	f8c8 3000 	str.w	r3, [r8]
 800734e:	f04f 30ff 	mov.w	r0, #4294967295
 8007352:	e0c8      	b.n	80074e6 <_svfiprintf_r+0x1c2>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	6163      	str	r3, [r4, #20]
 8007358:	2300      	movs	r3, #0
 800735a:	9309      	str	r3, [sp, #36]	; 0x24
 800735c:	2320      	movs	r3, #32
 800735e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007362:	2330      	movs	r3, #48	; 0x30
 8007364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007368:	9503      	str	r5, [sp, #12]
 800736a:	f04f 0b01 	mov.w	fp, #1
 800736e:	4637      	mov	r7, r6
 8007370:	463d      	mov	r5, r7
 8007372:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007376:	b10b      	cbz	r3, 800737c <_svfiprintf_r+0x58>
 8007378:	2b25      	cmp	r3, #37	; 0x25
 800737a:	d13e      	bne.n	80073fa <_svfiprintf_r+0xd6>
 800737c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007380:	d00b      	beq.n	800739a <_svfiprintf_r+0x76>
 8007382:	4653      	mov	r3, sl
 8007384:	4632      	mov	r2, r6
 8007386:	4621      	mov	r1, r4
 8007388:	4640      	mov	r0, r8
 800738a:	f7ff ff71 	bl	8007270 <__ssputs_r>
 800738e:	3001      	adds	r0, #1
 8007390:	f000 80a4 	beq.w	80074dc <_svfiprintf_r+0x1b8>
 8007394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007396:	4453      	add	r3, sl
 8007398:	9309      	str	r3, [sp, #36]	; 0x24
 800739a:	783b      	ldrb	r3, [r7, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 809d 	beq.w	80074dc <_svfiprintf_r+0x1b8>
 80073a2:	2300      	movs	r3, #0
 80073a4:	f04f 32ff 	mov.w	r2, #4294967295
 80073a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	9307      	str	r3, [sp, #28]
 80073b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073b4:	931a      	str	r3, [sp, #104]	; 0x68
 80073b6:	462f      	mov	r7, r5
 80073b8:	2205      	movs	r2, #5
 80073ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80073be:	4850      	ldr	r0, [pc, #320]	; (8007500 <_svfiprintf_r+0x1dc>)
 80073c0:	f7f8 ff16 	bl	80001f0 <memchr>
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	b9d0      	cbnz	r0, 80073fe <_svfiprintf_r+0xda>
 80073c8:	06d9      	lsls	r1, r3, #27
 80073ca:	bf44      	itt	mi
 80073cc:	2220      	movmi	r2, #32
 80073ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073d2:	071a      	lsls	r2, r3, #28
 80073d4:	bf44      	itt	mi
 80073d6:	222b      	movmi	r2, #43	; 0x2b
 80073d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073dc:	782a      	ldrb	r2, [r5, #0]
 80073de:	2a2a      	cmp	r2, #42	; 0x2a
 80073e0:	d015      	beq.n	800740e <_svfiprintf_r+0xea>
 80073e2:	9a07      	ldr	r2, [sp, #28]
 80073e4:	462f      	mov	r7, r5
 80073e6:	2000      	movs	r0, #0
 80073e8:	250a      	movs	r5, #10
 80073ea:	4639      	mov	r1, r7
 80073ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f0:	3b30      	subs	r3, #48	; 0x30
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	d94d      	bls.n	8007492 <_svfiprintf_r+0x16e>
 80073f6:	b1b8      	cbz	r0, 8007428 <_svfiprintf_r+0x104>
 80073f8:	e00f      	b.n	800741a <_svfiprintf_r+0xf6>
 80073fa:	462f      	mov	r7, r5
 80073fc:	e7b8      	b.n	8007370 <_svfiprintf_r+0x4c>
 80073fe:	4a40      	ldr	r2, [pc, #256]	; (8007500 <_svfiprintf_r+0x1dc>)
 8007400:	1a80      	subs	r0, r0, r2
 8007402:	fa0b f000 	lsl.w	r0, fp, r0
 8007406:	4318      	orrs	r0, r3
 8007408:	9004      	str	r0, [sp, #16]
 800740a:	463d      	mov	r5, r7
 800740c:	e7d3      	b.n	80073b6 <_svfiprintf_r+0x92>
 800740e:	9a03      	ldr	r2, [sp, #12]
 8007410:	1d11      	adds	r1, r2, #4
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	9103      	str	r1, [sp, #12]
 8007416:	2a00      	cmp	r2, #0
 8007418:	db01      	blt.n	800741e <_svfiprintf_r+0xfa>
 800741a:	9207      	str	r2, [sp, #28]
 800741c:	e004      	b.n	8007428 <_svfiprintf_r+0x104>
 800741e:	4252      	negs	r2, r2
 8007420:	f043 0302 	orr.w	r3, r3, #2
 8007424:	9207      	str	r2, [sp, #28]
 8007426:	9304      	str	r3, [sp, #16]
 8007428:	783b      	ldrb	r3, [r7, #0]
 800742a:	2b2e      	cmp	r3, #46	; 0x2e
 800742c:	d10c      	bne.n	8007448 <_svfiprintf_r+0x124>
 800742e:	787b      	ldrb	r3, [r7, #1]
 8007430:	2b2a      	cmp	r3, #42	; 0x2a
 8007432:	d133      	bne.n	800749c <_svfiprintf_r+0x178>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	9203      	str	r2, [sp, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfb8      	it	lt
 8007440:	f04f 33ff 	movlt.w	r3, #4294967295
 8007444:	3702      	adds	r7, #2
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	4d2e      	ldr	r5, [pc, #184]	; (8007504 <_svfiprintf_r+0x1e0>)
 800744a:	7839      	ldrb	r1, [r7, #0]
 800744c:	2203      	movs	r2, #3
 800744e:	4628      	mov	r0, r5
 8007450:	f7f8 fece 	bl	80001f0 <memchr>
 8007454:	b138      	cbz	r0, 8007466 <_svfiprintf_r+0x142>
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	1b40      	subs	r0, r0, r5
 800745a:	fa03 f000 	lsl.w	r0, r3, r0
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	4303      	orrs	r3, r0
 8007462:	3701      	adds	r7, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	7839      	ldrb	r1, [r7, #0]
 8007468:	4827      	ldr	r0, [pc, #156]	; (8007508 <_svfiprintf_r+0x1e4>)
 800746a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746e:	2206      	movs	r2, #6
 8007470:	1c7e      	adds	r6, r7, #1
 8007472:	f7f8 febd 	bl	80001f0 <memchr>
 8007476:	2800      	cmp	r0, #0
 8007478:	d038      	beq.n	80074ec <_svfiprintf_r+0x1c8>
 800747a:	4b24      	ldr	r3, [pc, #144]	; (800750c <_svfiprintf_r+0x1e8>)
 800747c:	bb13      	cbnz	r3, 80074c4 <_svfiprintf_r+0x1a0>
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	3307      	adds	r3, #7
 8007482:	f023 0307 	bic.w	r3, r3, #7
 8007486:	3308      	adds	r3, #8
 8007488:	9303      	str	r3, [sp, #12]
 800748a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748c:	444b      	add	r3, r9
 800748e:	9309      	str	r3, [sp, #36]	; 0x24
 8007490:	e76d      	b.n	800736e <_svfiprintf_r+0x4a>
 8007492:	fb05 3202 	mla	r2, r5, r2, r3
 8007496:	2001      	movs	r0, #1
 8007498:	460f      	mov	r7, r1
 800749a:	e7a6      	b.n	80073ea <_svfiprintf_r+0xc6>
 800749c:	2300      	movs	r3, #0
 800749e:	3701      	adds	r7, #1
 80074a0:	9305      	str	r3, [sp, #20]
 80074a2:	4619      	mov	r1, r3
 80074a4:	250a      	movs	r5, #10
 80074a6:	4638      	mov	r0, r7
 80074a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ac:	3a30      	subs	r2, #48	; 0x30
 80074ae:	2a09      	cmp	r2, #9
 80074b0:	d903      	bls.n	80074ba <_svfiprintf_r+0x196>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c8      	beq.n	8007448 <_svfiprintf_r+0x124>
 80074b6:	9105      	str	r1, [sp, #20]
 80074b8:	e7c6      	b.n	8007448 <_svfiprintf_r+0x124>
 80074ba:	fb05 2101 	mla	r1, r5, r1, r2
 80074be:	2301      	movs	r3, #1
 80074c0:	4607      	mov	r7, r0
 80074c2:	e7f0      	b.n	80074a6 <_svfiprintf_r+0x182>
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	4622      	mov	r2, r4
 80074ca:	4b11      	ldr	r3, [pc, #68]	; (8007510 <_svfiprintf_r+0x1ec>)
 80074cc:	a904      	add	r1, sp, #16
 80074ce:	4640      	mov	r0, r8
 80074d0:	f7fc fad2 	bl	8003a78 <_printf_float>
 80074d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074d8:	4681      	mov	r9, r0
 80074da:	d1d6      	bne.n	800748a <_svfiprintf_r+0x166>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	065b      	lsls	r3, r3, #25
 80074e0:	f53f af35 	bmi.w	800734e <_svfiprintf_r+0x2a>
 80074e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074e6:	b01d      	add	sp, #116	; 0x74
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ec:	ab03      	add	r3, sp, #12
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	4622      	mov	r2, r4
 80074f2:	4b07      	ldr	r3, [pc, #28]	; (8007510 <_svfiprintf_r+0x1ec>)
 80074f4:	a904      	add	r1, sp, #16
 80074f6:	4640      	mov	r0, r8
 80074f8:	f7fc fd74 	bl	8003fe4 <_printf_i>
 80074fc:	e7ea      	b.n	80074d4 <_svfiprintf_r+0x1b0>
 80074fe:	bf00      	nop
 8007500:	080089dc 	.word	0x080089dc
 8007504:	080089e2 	.word	0x080089e2
 8007508:	080089e6 	.word	0x080089e6
 800750c:	08003a79 	.word	0x08003a79
 8007510:	08007271 	.word	0x08007271

08007514 <__sfputc_r>:
 8007514:	6893      	ldr	r3, [r2, #8]
 8007516:	3b01      	subs	r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	b410      	push	{r4}
 800751c:	6093      	str	r3, [r2, #8]
 800751e:	da08      	bge.n	8007532 <__sfputc_r+0x1e>
 8007520:	6994      	ldr	r4, [r2, #24]
 8007522:	42a3      	cmp	r3, r4
 8007524:	db01      	blt.n	800752a <__sfputc_r+0x16>
 8007526:	290a      	cmp	r1, #10
 8007528:	d103      	bne.n	8007532 <__sfputc_r+0x1e>
 800752a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800752e:	f000 be67 	b.w	8008200 <__swbuf_r>
 8007532:	6813      	ldr	r3, [r2, #0]
 8007534:	1c58      	adds	r0, r3, #1
 8007536:	6010      	str	r0, [r2, #0]
 8007538:	7019      	strb	r1, [r3, #0]
 800753a:	4608      	mov	r0, r1
 800753c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007540:	4770      	bx	lr

08007542 <__sfputs_r>:
 8007542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007544:	4606      	mov	r6, r0
 8007546:	460f      	mov	r7, r1
 8007548:	4614      	mov	r4, r2
 800754a:	18d5      	adds	r5, r2, r3
 800754c:	42ac      	cmp	r4, r5
 800754e:	d101      	bne.n	8007554 <__sfputs_r+0x12>
 8007550:	2000      	movs	r0, #0
 8007552:	e007      	b.n	8007564 <__sfputs_r+0x22>
 8007554:	463a      	mov	r2, r7
 8007556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ffda 	bl	8007514 <__sfputc_r>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d1f3      	bne.n	800754c <__sfputs_r+0xa>
 8007564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007568 <_vfiprintf_r>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	460c      	mov	r4, r1
 800756e:	b09d      	sub	sp, #116	; 0x74
 8007570:	4617      	mov	r7, r2
 8007572:	461d      	mov	r5, r3
 8007574:	4606      	mov	r6, r0
 8007576:	b118      	cbz	r0, 8007580 <_vfiprintf_r+0x18>
 8007578:	6983      	ldr	r3, [r0, #24]
 800757a:	b90b      	cbnz	r3, 8007580 <_vfiprintf_r+0x18>
 800757c:	f7fe fdb0 	bl	80060e0 <__sinit>
 8007580:	4b7c      	ldr	r3, [pc, #496]	; (8007774 <_vfiprintf_r+0x20c>)
 8007582:	429c      	cmp	r4, r3
 8007584:	d158      	bne.n	8007638 <_vfiprintf_r+0xd0>
 8007586:	6874      	ldr	r4, [r6, #4]
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	0718      	lsls	r0, r3, #28
 800758c:	d55e      	bpl.n	800764c <_vfiprintf_r+0xe4>
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d05b      	beq.n	800764c <_vfiprintf_r+0xe4>
 8007594:	2300      	movs	r3, #0
 8007596:	9309      	str	r3, [sp, #36]	; 0x24
 8007598:	2320      	movs	r3, #32
 800759a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800759e:	2330      	movs	r3, #48	; 0x30
 80075a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075a4:	9503      	str	r5, [sp, #12]
 80075a6:	f04f 0b01 	mov.w	fp, #1
 80075aa:	46b8      	mov	r8, r7
 80075ac:	4645      	mov	r5, r8
 80075ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075b2:	b10b      	cbz	r3, 80075b8 <_vfiprintf_r+0x50>
 80075b4:	2b25      	cmp	r3, #37	; 0x25
 80075b6:	d154      	bne.n	8007662 <_vfiprintf_r+0xfa>
 80075b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80075bc:	d00b      	beq.n	80075d6 <_vfiprintf_r+0x6e>
 80075be:	4653      	mov	r3, sl
 80075c0:	463a      	mov	r2, r7
 80075c2:	4621      	mov	r1, r4
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7ff ffbc 	bl	8007542 <__sfputs_r>
 80075ca:	3001      	adds	r0, #1
 80075cc:	f000 80c2 	beq.w	8007754 <_vfiprintf_r+0x1ec>
 80075d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d2:	4453      	add	r3, sl
 80075d4:	9309      	str	r3, [sp, #36]	; 0x24
 80075d6:	f898 3000 	ldrb.w	r3, [r8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 80ba 	beq.w	8007754 <_vfiprintf_r+0x1ec>
 80075e0:	2300      	movs	r3, #0
 80075e2:	f04f 32ff 	mov.w	r2, #4294967295
 80075e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ea:	9304      	str	r3, [sp, #16]
 80075ec:	9307      	str	r3, [sp, #28]
 80075ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075f2:	931a      	str	r3, [sp, #104]	; 0x68
 80075f4:	46a8      	mov	r8, r5
 80075f6:	2205      	movs	r2, #5
 80075f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80075fc:	485e      	ldr	r0, [pc, #376]	; (8007778 <_vfiprintf_r+0x210>)
 80075fe:	f7f8 fdf7 	bl	80001f0 <memchr>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	bb78      	cbnz	r0, 8007666 <_vfiprintf_r+0xfe>
 8007606:	06d9      	lsls	r1, r3, #27
 8007608:	bf44      	itt	mi
 800760a:	2220      	movmi	r2, #32
 800760c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007610:	071a      	lsls	r2, r3, #28
 8007612:	bf44      	itt	mi
 8007614:	222b      	movmi	r2, #43	; 0x2b
 8007616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800761a:	782a      	ldrb	r2, [r5, #0]
 800761c:	2a2a      	cmp	r2, #42	; 0x2a
 800761e:	d02a      	beq.n	8007676 <_vfiprintf_r+0x10e>
 8007620:	9a07      	ldr	r2, [sp, #28]
 8007622:	46a8      	mov	r8, r5
 8007624:	2000      	movs	r0, #0
 8007626:	250a      	movs	r5, #10
 8007628:	4641      	mov	r1, r8
 800762a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800762e:	3b30      	subs	r3, #48	; 0x30
 8007630:	2b09      	cmp	r3, #9
 8007632:	d969      	bls.n	8007708 <_vfiprintf_r+0x1a0>
 8007634:	b360      	cbz	r0, 8007690 <_vfiprintf_r+0x128>
 8007636:	e024      	b.n	8007682 <_vfiprintf_r+0x11a>
 8007638:	4b50      	ldr	r3, [pc, #320]	; (800777c <_vfiprintf_r+0x214>)
 800763a:	429c      	cmp	r4, r3
 800763c:	d101      	bne.n	8007642 <_vfiprintf_r+0xda>
 800763e:	68b4      	ldr	r4, [r6, #8]
 8007640:	e7a2      	b.n	8007588 <_vfiprintf_r+0x20>
 8007642:	4b4f      	ldr	r3, [pc, #316]	; (8007780 <_vfiprintf_r+0x218>)
 8007644:	429c      	cmp	r4, r3
 8007646:	bf08      	it	eq
 8007648:	68f4      	ldreq	r4, [r6, #12]
 800764a:	e79d      	b.n	8007588 <_vfiprintf_r+0x20>
 800764c:	4621      	mov	r1, r4
 800764e:	4630      	mov	r0, r6
 8007650:	f000 fe48 	bl	80082e4 <__swsetup_r>
 8007654:	2800      	cmp	r0, #0
 8007656:	d09d      	beq.n	8007594 <_vfiprintf_r+0x2c>
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	b01d      	add	sp, #116	; 0x74
 800765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007662:	46a8      	mov	r8, r5
 8007664:	e7a2      	b.n	80075ac <_vfiprintf_r+0x44>
 8007666:	4a44      	ldr	r2, [pc, #272]	; (8007778 <_vfiprintf_r+0x210>)
 8007668:	1a80      	subs	r0, r0, r2
 800766a:	fa0b f000 	lsl.w	r0, fp, r0
 800766e:	4318      	orrs	r0, r3
 8007670:	9004      	str	r0, [sp, #16]
 8007672:	4645      	mov	r5, r8
 8007674:	e7be      	b.n	80075f4 <_vfiprintf_r+0x8c>
 8007676:	9a03      	ldr	r2, [sp, #12]
 8007678:	1d11      	adds	r1, r2, #4
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	9103      	str	r1, [sp, #12]
 800767e:	2a00      	cmp	r2, #0
 8007680:	db01      	blt.n	8007686 <_vfiprintf_r+0x11e>
 8007682:	9207      	str	r2, [sp, #28]
 8007684:	e004      	b.n	8007690 <_vfiprintf_r+0x128>
 8007686:	4252      	negs	r2, r2
 8007688:	f043 0302 	orr.w	r3, r3, #2
 800768c:	9207      	str	r2, [sp, #28]
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	f898 3000 	ldrb.w	r3, [r8]
 8007694:	2b2e      	cmp	r3, #46	; 0x2e
 8007696:	d10e      	bne.n	80076b6 <_vfiprintf_r+0x14e>
 8007698:	f898 3001 	ldrb.w	r3, [r8, #1]
 800769c:	2b2a      	cmp	r3, #42	; 0x2a
 800769e:	d138      	bne.n	8007712 <_vfiprintf_r+0x1aa>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	1d1a      	adds	r2, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	9203      	str	r2, [sp, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bfb8      	it	lt
 80076ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80076b0:	f108 0802 	add.w	r8, r8, #2
 80076b4:	9305      	str	r3, [sp, #20]
 80076b6:	4d33      	ldr	r5, [pc, #204]	; (8007784 <_vfiprintf_r+0x21c>)
 80076b8:	f898 1000 	ldrb.w	r1, [r8]
 80076bc:	2203      	movs	r2, #3
 80076be:	4628      	mov	r0, r5
 80076c0:	f7f8 fd96 	bl	80001f0 <memchr>
 80076c4:	b140      	cbz	r0, 80076d8 <_vfiprintf_r+0x170>
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	1b40      	subs	r0, r0, r5
 80076ca:	fa03 f000 	lsl.w	r0, r3, r0
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	4303      	orrs	r3, r0
 80076d2:	f108 0801 	add.w	r8, r8, #1
 80076d6:	9304      	str	r3, [sp, #16]
 80076d8:	f898 1000 	ldrb.w	r1, [r8]
 80076dc:	482a      	ldr	r0, [pc, #168]	; (8007788 <_vfiprintf_r+0x220>)
 80076de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076e2:	2206      	movs	r2, #6
 80076e4:	f108 0701 	add.w	r7, r8, #1
 80076e8:	f7f8 fd82 	bl	80001f0 <memchr>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d037      	beq.n	8007760 <_vfiprintf_r+0x1f8>
 80076f0:	4b26      	ldr	r3, [pc, #152]	; (800778c <_vfiprintf_r+0x224>)
 80076f2:	bb1b      	cbnz	r3, 800773c <_vfiprintf_r+0x1d4>
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	3307      	adds	r3, #7
 80076f8:	f023 0307 	bic.w	r3, r3, #7
 80076fc:	3308      	adds	r3, #8
 80076fe:	9303      	str	r3, [sp, #12]
 8007700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007702:	444b      	add	r3, r9
 8007704:	9309      	str	r3, [sp, #36]	; 0x24
 8007706:	e750      	b.n	80075aa <_vfiprintf_r+0x42>
 8007708:	fb05 3202 	mla	r2, r5, r2, r3
 800770c:	2001      	movs	r0, #1
 800770e:	4688      	mov	r8, r1
 8007710:	e78a      	b.n	8007628 <_vfiprintf_r+0xc0>
 8007712:	2300      	movs	r3, #0
 8007714:	f108 0801 	add.w	r8, r8, #1
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	4619      	mov	r1, r3
 800771c:	250a      	movs	r5, #10
 800771e:	4640      	mov	r0, r8
 8007720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007724:	3a30      	subs	r2, #48	; 0x30
 8007726:	2a09      	cmp	r2, #9
 8007728:	d903      	bls.n	8007732 <_vfiprintf_r+0x1ca>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0c3      	beq.n	80076b6 <_vfiprintf_r+0x14e>
 800772e:	9105      	str	r1, [sp, #20]
 8007730:	e7c1      	b.n	80076b6 <_vfiprintf_r+0x14e>
 8007732:	fb05 2101 	mla	r1, r5, r1, r2
 8007736:	2301      	movs	r3, #1
 8007738:	4680      	mov	r8, r0
 800773a:	e7f0      	b.n	800771e <_vfiprintf_r+0x1b6>
 800773c:	ab03      	add	r3, sp, #12
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	4622      	mov	r2, r4
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <_vfiprintf_r+0x228>)
 8007744:	a904      	add	r1, sp, #16
 8007746:	4630      	mov	r0, r6
 8007748:	f7fc f996 	bl	8003a78 <_printf_float>
 800774c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007750:	4681      	mov	r9, r0
 8007752:	d1d5      	bne.n	8007700 <_vfiprintf_r+0x198>
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	065b      	lsls	r3, r3, #25
 8007758:	f53f af7e 	bmi.w	8007658 <_vfiprintf_r+0xf0>
 800775c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800775e:	e77d      	b.n	800765c <_vfiprintf_r+0xf4>
 8007760:	ab03      	add	r3, sp, #12
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	4622      	mov	r2, r4
 8007766:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <_vfiprintf_r+0x228>)
 8007768:	a904      	add	r1, sp, #16
 800776a:	4630      	mov	r0, r6
 800776c:	f7fc fc3a 	bl	8003fe4 <_printf_i>
 8007770:	e7ec      	b.n	800774c <_vfiprintf_r+0x1e4>
 8007772:	bf00      	nop
 8007774:	08008890 	.word	0x08008890
 8007778:	080089dc 	.word	0x080089dc
 800777c:	080088b0 	.word	0x080088b0
 8007780:	08008870 	.word	0x08008870
 8007784:	080089e2 	.word	0x080089e2
 8007788:	080089e6 	.word	0x080089e6
 800778c:	08003a79 	.word	0x08003a79
 8007790:	08007543 	.word	0x08007543

08007794 <__svfiscanf_r>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800779c:	460c      	mov	r4, r1
 800779e:	2100      	movs	r1, #0
 80077a0:	9144      	str	r1, [sp, #272]	; 0x110
 80077a2:	9145      	str	r1, [sp, #276]	; 0x114
 80077a4:	499f      	ldr	r1, [pc, #636]	; (8007a24 <__svfiscanf_r+0x290>)
 80077a6:	91a0      	str	r1, [sp, #640]	; 0x280
 80077a8:	f10d 0804 	add.w	r8, sp, #4
 80077ac:	499e      	ldr	r1, [pc, #632]	; (8007a28 <__svfiscanf_r+0x294>)
 80077ae:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8007a2c <__svfiscanf_r+0x298>
 80077b2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80077b6:	4606      	mov	r6, r0
 80077b8:	4692      	mov	sl, r2
 80077ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	270a      	movs	r7, #10
 80077c0:	f89a 3000 	ldrb.w	r3, [sl]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 812a 	beq.w	8007a1e <__svfiscanf_r+0x28a>
 80077ca:	4655      	mov	r5, sl
 80077cc:	f7ff f858 	bl	8006880 <__locale_ctype_ptr>
 80077d0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80077d4:	4458      	add	r0, fp
 80077d6:	7843      	ldrb	r3, [r0, #1]
 80077d8:	f013 0308 	ands.w	r3, r3, #8
 80077dc:	d01c      	beq.n	8007818 <__svfiscanf_r+0x84>
 80077de:	6863      	ldr	r3, [r4, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dd12      	ble.n	800780a <__svfiscanf_r+0x76>
 80077e4:	f7ff f84c 	bl	8006880 <__locale_ctype_ptr>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	781a      	ldrb	r2, [r3, #0]
 80077ec:	4410      	add	r0, r2
 80077ee:	7842      	ldrb	r2, [r0, #1]
 80077f0:	0712      	lsls	r2, r2, #28
 80077f2:	d401      	bmi.n	80077f8 <__svfiscanf_r+0x64>
 80077f4:	46aa      	mov	sl, r5
 80077f6:	e7e3      	b.n	80077c0 <__svfiscanf_r+0x2c>
 80077f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80077fa:	3201      	adds	r2, #1
 80077fc:	9245      	str	r2, [sp, #276]	; 0x114
 80077fe:	6862      	ldr	r2, [r4, #4]
 8007800:	3301      	adds	r3, #1
 8007802:	3a01      	subs	r2, #1
 8007804:	6062      	str	r2, [r4, #4]
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	e7e9      	b.n	80077de <__svfiscanf_r+0x4a>
 800780a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800780c:	4621      	mov	r1, r4
 800780e:	4630      	mov	r0, r6
 8007810:	4798      	blx	r3
 8007812:	2800      	cmp	r0, #0
 8007814:	d0e6      	beq.n	80077e4 <__svfiscanf_r+0x50>
 8007816:	e7ed      	b.n	80077f4 <__svfiscanf_r+0x60>
 8007818:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800781c:	f040 8082 	bne.w	8007924 <__svfiscanf_r+0x190>
 8007820:	9343      	str	r3, [sp, #268]	; 0x10c
 8007822:	9341      	str	r3, [sp, #260]	; 0x104
 8007824:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007828:	2b2a      	cmp	r3, #42	; 0x2a
 800782a:	d103      	bne.n	8007834 <__svfiscanf_r+0xa0>
 800782c:	2310      	movs	r3, #16
 800782e:	9341      	str	r3, [sp, #260]	; 0x104
 8007830:	f10a 0502 	add.w	r5, sl, #2
 8007834:	46aa      	mov	sl, r5
 8007836:	f815 1b01 	ldrb.w	r1, [r5], #1
 800783a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800783e:	2a09      	cmp	r2, #9
 8007840:	d922      	bls.n	8007888 <__svfiscanf_r+0xf4>
 8007842:	2203      	movs	r2, #3
 8007844:	4879      	ldr	r0, [pc, #484]	; (8007a2c <__svfiscanf_r+0x298>)
 8007846:	f7f8 fcd3 	bl	80001f0 <memchr>
 800784a:	b138      	cbz	r0, 800785c <__svfiscanf_r+0xc8>
 800784c:	eba0 0309 	sub.w	r3, r0, r9
 8007850:	2001      	movs	r0, #1
 8007852:	4098      	lsls	r0, r3
 8007854:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007856:	4318      	orrs	r0, r3
 8007858:	9041      	str	r0, [sp, #260]	; 0x104
 800785a:	46aa      	mov	sl, r5
 800785c:	f89a 3000 	ldrb.w	r3, [sl]
 8007860:	2b67      	cmp	r3, #103	; 0x67
 8007862:	f10a 0501 	add.w	r5, sl, #1
 8007866:	d82b      	bhi.n	80078c0 <__svfiscanf_r+0x12c>
 8007868:	2b65      	cmp	r3, #101	; 0x65
 800786a:	f080 809f 	bcs.w	80079ac <__svfiscanf_r+0x218>
 800786e:	2b47      	cmp	r3, #71	; 0x47
 8007870:	d810      	bhi.n	8007894 <__svfiscanf_r+0x100>
 8007872:	2b45      	cmp	r3, #69	; 0x45
 8007874:	f080 809a 	bcs.w	80079ac <__svfiscanf_r+0x218>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d06c      	beq.n	8007956 <__svfiscanf_r+0x1c2>
 800787c:	2b25      	cmp	r3, #37	; 0x25
 800787e:	d051      	beq.n	8007924 <__svfiscanf_r+0x190>
 8007880:	2303      	movs	r3, #3
 8007882:	9347      	str	r3, [sp, #284]	; 0x11c
 8007884:	9742      	str	r7, [sp, #264]	; 0x108
 8007886:	e027      	b.n	80078d8 <__svfiscanf_r+0x144>
 8007888:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800788a:	fb07 1303 	mla	r3, r7, r3, r1
 800788e:	3b30      	subs	r3, #48	; 0x30
 8007890:	9343      	str	r3, [sp, #268]	; 0x10c
 8007892:	e7cf      	b.n	8007834 <__svfiscanf_r+0xa0>
 8007894:	2b5b      	cmp	r3, #91	; 0x5b
 8007896:	d06a      	beq.n	800796e <__svfiscanf_r+0x1da>
 8007898:	d80c      	bhi.n	80078b4 <__svfiscanf_r+0x120>
 800789a:	2b58      	cmp	r3, #88	; 0x58
 800789c:	d1f0      	bne.n	8007880 <__svfiscanf_r+0xec>
 800789e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80078a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a4:	9241      	str	r2, [sp, #260]	; 0x104
 80078a6:	2210      	movs	r2, #16
 80078a8:	9242      	str	r2, [sp, #264]	; 0x108
 80078aa:	2b6e      	cmp	r3, #110	; 0x6e
 80078ac:	bf8c      	ite	hi
 80078ae:	2304      	movhi	r3, #4
 80078b0:	2303      	movls	r3, #3
 80078b2:	e010      	b.n	80078d6 <__svfiscanf_r+0x142>
 80078b4:	2b63      	cmp	r3, #99	; 0x63
 80078b6:	d065      	beq.n	8007984 <__svfiscanf_r+0x1f0>
 80078b8:	2b64      	cmp	r3, #100	; 0x64
 80078ba:	d1e1      	bne.n	8007880 <__svfiscanf_r+0xec>
 80078bc:	9742      	str	r7, [sp, #264]	; 0x108
 80078be:	e7f4      	b.n	80078aa <__svfiscanf_r+0x116>
 80078c0:	2b70      	cmp	r3, #112	; 0x70
 80078c2:	d04b      	beq.n	800795c <__svfiscanf_r+0x1c8>
 80078c4:	d826      	bhi.n	8007914 <__svfiscanf_r+0x180>
 80078c6:	2b6e      	cmp	r3, #110	; 0x6e
 80078c8:	d062      	beq.n	8007990 <__svfiscanf_r+0x1fc>
 80078ca:	d84c      	bhi.n	8007966 <__svfiscanf_r+0x1d2>
 80078cc:	2b69      	cmp	r3, #105	; 0x69
 80078ce:	d1d7      	bne.n	8007880 <__svfiscanf_r+0xec>
 80078d0:	2300      	movs	r3, #0
 80078d2:	9342      	str	r3, [sp, #264]	; 0x108
 80078d4:	2303      	movs	r3, #3
 80078d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	dd68      	ble.n	80079b0 <__svfiscanf_r+0x21c>
 80078de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80078e0:	0659      	lsls	r1, r3, #25
 80078e2:	d407      	bmi.n	80078f4 <__svfiscanf_r+0x160>
 80078e4:	f7fe ffcc 	bl	8006880 <__locale_ctype_ptr>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	4410      	add	r0, r2
 80078ee:	7842      	ldrb	r2, [r0, #1]
 80078f0:	0712      	lsls	r2, r2, #28
 80078f2:	d464      	bmi.n	80079be <__svfiscanf_r+0x22a>
 80078f4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	dc73      	bgt.n	80079e2 <__svfiscanf_r+0x24e>
 80078fa:	466b      	mov	r3, sp
 80078fc:	4622      	mov	r2, r4
 80078fe:	a941      	add	r1, sp, #260	; 0x104
 8007900:	4630      	mov	r0, r6
 8007902:	f000 f8bf 	bl	8007a84 <_scanf_chars>
 8007906:	2801      	cmp	r0, #1
 8007908:	f000 8089 	beq.w	8007a1e <__svfiscanf_r+0x28a>
 800790c:	2802      	cmp	r0, #2
 800790e:	f47f af71 	bne.w	80077f4 <__svfiscanf_r+0x60>
 8007912:	e01d      	b.n	8007950 <__svfiscanf_r+0x1bc>
 8007914:	2b75      	cmp	r3, #117	; 0x75
 8007916:	d0d1      	beq.n	80078bc <__svfiscanf_r+0x128>
 8007918:	2b78      	cmp	r3, #120	; 0x78
 800791a:	d0c0      	beq.n	800789e <__svfiscanf_r+0x10a>
 800791c:	2b73      	cmp	r3, #115	; 0x73
 800791e:	d1af      	bne.n	8007880 <__svfiscanf_r+0xec>
 8007920:	2302      	movs	r3, #2
 8007922:	e7d8      	b.n	80078d6 <__svfiscanf_r+0x142>
 8007924:	6863      	ldr	r3, [r4, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dd0c      	ble.n	8007944 <__svfiscanf_r+0x1b0>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	781a      	ldrb	r2, [r3, #0]
 800792e:	455a      	cmp	r2, fp
 8007930:	d175      	bne.n	8007a1e <__svfiscanf_r+0x28a>
 8007932:	3301      	adds	r3, #1
 8007934:	6862      	ldr	r2, [r4, #4]
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800793a:	3a01      	subs	r2, #1
 800793c:	3301      	adds	r3, #1
 800793e:	6062      	str	r2, [r4, #4]
 8007940:	9345      	str	r3, [sp, #276]	; 0x114
 8007942:	e757      	b.n	80077f4 <__svfiscanf_r+0x60>
 8007944:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007946:	4621      	mov	r1, r4
 8007948:	4630      	mov	r0, r6
 800794a:	4798      	blx	r3
 800794c:	2800      	cmp	r0, #0
 800794e:	d0ec      	beq.n	800792a <__svfiscanf_r+0x196>
 8007950:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007952:	2800      	cmp	r0, #0
 8007954:	d159      	bne.n	8007a0a <__svfiscanf_r+0x276>
 8007956:	f04f 30ff 	mov.w	r0, #4294967295
 800795a:	e05c      	b.n	8007a16 <__svfiscanf_r+0x282>
 800795c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800795e:	f042 0220 	orr.w	r2, r2, #32
 8007962:	9241      	str	r2, [sp, #260]	; 0x104
 8007964:	e79b      	b.n	800789e <__svfiscanf_r+0x10a>
 8007966:	2308      	movs	r3, #8
 8007968:	9342      	str	r3, [sp, #264]	; 0x108
 800796a:	2304      	movs	r3, #4
 800796c:	e7b3      	b.n	80078d6 <__svfiscanf_r+0x142>
 800796e:	4629      	mov	r1, r5
 8007970:	4640      	mov	r0, r8
 8007972:	f000 fa85 	bl	8007e80 <__sccl>
 8007976:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800797c:	9341      	str	r3, [sp, #260]	; 0x104
 800797e:	4605      	mov	r5, r0
 8007980:	2301      	movs	r3, #1
 8007982:	e7a8      	b.n	80078d6 <__svfiscanf_r+0x142>
 8007984:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800798a:	9341      	str	r3, [sp, #260]	; 0x104
 800798c:	2300      	movs	r3, #0
 800798e:	e7a2      	b.n	80078d6 <__svfiscanf_r+0x142>
 8007990:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007992:	06c3      	lsls	r3, r0, #27
 8007994:	f53f af2e 	bmi.w	80077f4 <__svfiscanf_r+0x60>
 8007998:	9b00      	ldr	r3, [sp, #0]
 800799a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800799c:	1d19      	adds	r1, r3, #4
 800799e:	9100      	str	r1, [sp, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	07c0      	lsls	r0, r0, #31
 80079a4:	bf4c      	ite	mi
 80079a6:	801a      	strhmi	r2, [r3, #0]
 80079a8:	601a      	strpl	r2, [r3, #0]
 80079aa:	e723      	b.n	80077f4 <__svfiscanf_r+0x60>
 80079ac:	2305      	movs	r3, #5
 80079ae:	e792      	b.n	80078d6 <__svfiscanf_r+0x142>
 80079b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079b2:	4621      	mov	r1, r4
 80079b4:	4630      	mov	r0, r6
 80079b6:	4798      	blx	r3
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d090      	beq.n	80078de <__svfiscanf_r+0x14a>
 80079bc:	e7c8      	b.n	8007950 <__svfiscanf_r+0x1bc>
 80079be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079c0:	3201      	adds	r2, #1
 80079c2:	9245      	str	r2, [sp, #276]	; 0x114
 80079c4:	6862      	ldr	r2, [r4, #4]
 80079c6:	3a01      	subs	r2, #1
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	6062      	str	r2, [r4, #4]
 80079cc:	dd02      	ble.n	80079d4 <__svfiscanf_r+0x240>
 80079ce:	3301      	adds	r3, #1
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	e787      	b.n	80078e4 <__svfiscanf_r+0x150>
 80079d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079d6:	4621      	mov	r1, r4
 80079d8:	4630      	mov	r0, r6
 80079da:	4798      	blx	r3
 80079dc:	2800      	cmp	r0, #0
 80079de:	d081      	beq.n	80078e4 <__svfiscanf_r+0x150>
 80079e0:	e7b6      	b.n	8007950 <__svfiscanf_r+0x1bc>
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	dc06      	bgt.n	80079f4 <__svfiscanf_r+0x260>
 80079e6:	466b      	mov	r3, sp
 80079e8:	4622      	mov	r2, r4
 80079ea:	a941      	add	r1, sp, #260	; 0x104
 80079ec:	4630      	mov	r0, r6
 80079ee:	f000 f8ad 	bl	8007b4c <_scanf_i>
 80079f2:	e788      	b.n	8007906 <__svfiscanf_r+0x172>
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <__svfiscanf_r+0x29c>)
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f43f aefc 	beq.w	80077f4 <__svfiscanf_r+0x60>
 80079fc:	466b      	mov	r3, sp
 80079fe:	4622      	mov	r2, r4
 8007a00:	a941      	add	r1, sp, #260	; 0x104
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7fc fc00 	bl	8004208 <_scanf_float>
 8007a08:	e77d      	b.n	8007906 <__svfiscanf_r+0x172>
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a10:	bf18      	it	ne
 8007a12:	f04f 30ff 	movne.w	r0, #4294967295
 8007a16:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a20:	e7f9      	b.n	8007a16 <__svfiscanf_r+0x282>
 8007a22:	bf00      	nop
 8007a24:	0800811d 	.word	0x0800811d
 8007a28:	08007d49 	.word	0x08007d49
 8007a2c:	080089e2 	.word	0x080089e2
 8007a30:	08004209 	.word	0x08004209

08007a34 <_vfiscanf_r>:
 8007a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a38:	460c      	mov	r4, r1
 8007a3a:	4616      	mov	r6, r2
 8007a3c:	461f      	mov	r7, r3
 8007a3e:	4605      	mov	r5, r0
 8007a40:	b118      	cbz	r0, 8007a4a <_vfiscanf_r+0x16>
 8007a42:	6983      	ldr	r3, [r0, #24]
 8007a44:	b90b      	cbnz	r3, 8007a4a <_vfiscanf_r+0x16>
 8007a46:	f7fe fb4b 	bl	80060e0 <__sinit>
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <_vfiscanf_r+0x44>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d108      	bne.n	8007a62 <_vfiscanf_r+0x2e>
 8007a50:	686c      	ldr	r4, [r5, #4]
 8007a52:	463b      	mov	r3, r7
 8007a54:	4632      	mov	r2, r6
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	f7ff be99 	b.w	8007794 <__svfiscanf_r>
 8007a62:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <_vfiscanf_r+0x48>)
 8007a64:	429c      	cmp	r4, r3
 8007a66:	d101      	bne.n	8007a6c <_vfiscanf_r+0x38>
 8007a68:	68ac      	ldr	r4, [r5, #8]
 8007a6a:	e7f2      	b.n	8007a52 <_vfiscanf_r+0x1e>
 8007a6c:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <_vfiscanf_r+0x4c>)
 8007a6e:	429c      	cmp	r4, r3
 8007a70:	bf08      	it	eq
 8007a72:	68ec      	ldreq	r4, [r5, #12]
 8007a74:	e7ed      	b.n	8007a52 <_vfiscanf_r+0x1e>
 8007a76:	bf00      	nop
 8007a78:	08008890 	.word	0x08008890
 8007a7c:	080088b0 	.word	0x080088b0
 8007a80:	08008870 	.word	0x08008870

08007a84 <_scanf_chars>:
 8007a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a88:	4615      	mov	r5, r2
 8007a8a:	688a      	ldr	r2, [r1, #8]
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	b932      	cbnz	r2, 8007aa0 <_scanf_chars+0x1c>
 8007a92:	698a      	ldr	r2, [r1, #24]
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	bf14      	ite	ne
 8007a98:	f04f 32ff 	movne.w	r2, #4294967295
 8007a9c:	2201      	moveq	r2, #1
 8007a9e:	608a      	str	r2, [r1, #8]
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	06d1      	lsls	r1, r2, #27
 8007aa4:	bf5f      	itttt	pl
 8007aa6:	681a      	ldrpl	r2, [r3, #0]
 8007aa8:	1d11      	addpl	r1, r2, #4
 8007aaa:	6019      	strpl	r1, [r3, #0]
 8007aac:	6817      	ldrpl	r7, [r2, #0]
 8007aae:	2600      	movs	r6, #0
 8007ab0:	69a3      	ldr	r3, [r4, #24]
 8007ab2:	b1db      	cbz	r3, 8007aec <_scanf_chars+0x68>
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d107      	bne.n	8007ac8 <_scanf_chars+0x44>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	6962      	ldr	r2, [r4, #20]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	5cd3      	ldrb	r3, [r2, r3]
 8007ac0:	b9a3      	cbnz	r3, 8007aec <_scanf_chars+0x68>
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d132      	bne.n	8007b2c <_scanf_chars+0xa8>
 8007ac6:	e006      	b.n	8007ad6 <_scanf_chars+0x52>
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d007      	beq.n	8007adc <_scanf_chars+0x58>
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	d12d      	bne.n	8007b2c <_scanf_chars+0xa8>
 8007ad0:	69a3      	ldr	r3, [r4, #24]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d12a      	bne.n	8007b2c <_scanf_chars+0xa8>
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007adc:	f7fe fed0 	bl	8006880 <__locale_ctype_ptr>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	4418      	add	r0, r3
 8007ae6:	7843      	ldrb	r3, [r0, #1]
 8007ae8:	071b      	lsls	r3, r3, #28
 8007aea:	d4ef      	bmi.n	8007acc <_scanf_chars+0x48>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	06da      	lsls	r2, r3, #27
 8007af0:	bf5e      	ittt	pl
 8007af2:	682b      	ldrpl	r3, [r5, #0]
 8007af4:	781b      	ldrbpl	r3, [r3, #0]
 8007af6:	703b      	strbpl	r3, [r7, #0]
 8007af8:	682a      	ldr	r2, [r5, #0]
 8007afa:	686b      	ldr	r3, [r5, #4]
 8007afc:	f102 0201 	add.w	r2, r2, #1
 8007b00:	602a      	str	r2, [r5, #0]
 8007b02:	68a2      	ldr	r2, [r4, #8]
 8007b04:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b08:	f102 32ff 	add.w	r2, r2, #4294967295
 8007b0c:	606b      	str	r3, [r5, #4]
 8007b0e:	f106 0601 	add.w	r6, r6, #1
 8007b12:	bf58      	it	pl
 8007b14:	3701      	addpl	r7, #1
 8007b16:	60a2      	str	r2, [r4, #8]
 8007b18:	b142      	cbz	r2, 8007b2c <_scanf_chars+0xa8>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dcc8      	bgt.n	8007ab0 <_scanf_chars+0x2c>
 8007b1e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b22:	4629      	mov	r1, r5
 8007b24:	4640      	mov	r0, r8
 8007b26:	4798      	blx	r3
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d0c1      	beq.n	8007ab0 <_scanf_chars+0x2c>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	f013 0310 	ands.w	r3, r3, #16
 8007b32:	d105      	bne.n	8007b40 <_scanf_chars+0xbc>
 8007b34:	68e2      	ldr	r2, [r4, #12]
 8007b36:	3201      	adds	r2, #1
 8007b38:	60e2      	str	r2, [r4, #12]
 8007b3a:	69a2      	ldr	r2, [r4, #24]
 8007b3c:	b102      	cbz	r2, 8007b40 <_scanf_chars+0xbc>
 8007b3e:	703b      	strb	r3, [r7, #0]
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	441e      	add	r6, r3
 8007b44:	6126      	str	r6, [r4, #16]
 8007b46:	2000      	movs	r0, #0
 8007b48:	e7c6      	b.n	8007ad8 <_scanf_chars+0x54>
	...

08007b4c <_scanf_i>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	469a      	mov	sl, r3
 8007b52:	4b74      	ldr	r3, [pc, #464]	; (8007d24 <_scanf_i+0x1d8>)
 8007b54:	460c      	mov	r4, r1
 8007b56:	4683      	mov	fp, r0
 8007b58:	4616      	mov	r6, r2
 8007b5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	ab03      	add	r3, sp, #12
 8007b62:	68a7      	ldr	r7, [r4, #8]
 8007b64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007b68:	4b6f      	ldr	r3, [pc, #444]	; (8007d28 <_scanf_i+0x1dc>)
 8007b6a:	69a1      	ldr	r1, [r4, #24]
 8007b6c:	4a6f      	ldr	r2, [pc, #444]	; (8007d2c <_scanf_i+0x1e0>)
 8007b6e:	2903      	cmp	r1, #3
 8007b70:	bf08      	it	eq
 8007b72:	461a      	moveq	r2, r3
 8007b74:	1e7b      	subs	r3, r7, #1
 8007b76:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007b7a:	bf84      	itt	hi
 8007b7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007b80:	60a3      	strhi	r3, [r4, #8]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	9200      	str	r2, [sp, #0]
 8007b86:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007b8a:	bf88      	it	hi
 8007b8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007b90:	f104 091c 	add.w	r9, r4, #28
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bf8c      	ite	hi
 8007b98:	197f      	addhi	r7, r7, r5
 8007b9a:	2700      	movls	r7, #0
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	f04f 0800 	mov.w	r8, #0
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	6831      	ldr	r1, [r6, #0]
 8007ba6:	ab03      	add	r3, sp, #12
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007bae:	7809      	ldrb	r1, [r1, #0]
 8007bb0:	f7f8 fb1e 	bl	80001f0 <memchr>
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	b330      	cbz	r0, 8007c06 <_scanf_i+0xba>
 8007bb8:	f1b8 0f01 	cmp.w	r8, #1
 8007bbc:	d15a      	bne.n	8007c74 <_scanf_i+0x128>
 8007bbe:	6862      	ldr	r2, [r4, #4]
 8007bc0:	b92a      	cbnz	r2, 8007bce <_scanf_i+0x82>
 8007bc2:	6822      	ldr	r2, [r4, #0]
 8007bc4:	2108      	movs	r1, #8
 8007bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bca:	6061      	str	r1, [r4, #4]
 8007bcc:	6022      	str	r2, [r4, #0]
 8007bce:	6822      	ldr	r2, [r4, #0]
 8007bd0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007bd4:	6022      	str	r2, [r4, #0]
 8007bd6:	68a2      	ldr	r2, [r4, #8]
 8007bd8:	1e51      	subs	r1, r2, #1
 8007bda:	60a1      	str	r1, [r4, #8]
 8007bdc:	b19a      	cbz	r2, 8007c06 <_scanf_i+0xba>
 8007bde:	6832      	ldr	r2, [r6, #0]
 8007be0:	1c51      	adds	r1, r2, #1
 8007be2:	6031      	str	r1, [r6, #0]
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	1c5d      	adds	r5, r3, #1
 8007bea:	6873      	ldr	r3, [r6, #4]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	6073      	str	r3, [r6, #4]
 8007bf2:	dc07      	bgt.n	8007c04 <_scanf_i+0xb8>
 8007bf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4658      	mov	r0, fp
 8007bfc:	4798      	blx	r3
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	f040 8086 	bne.w	8007d10 <_scanf_i+0x1c4>
 8007c04:	462b      	mov	r3, r5
 8007c06:	f108 0801 	add.w	r8, r8, #1
 8007c0a:	f1b8 0f03 	cmp.w	r8, #3
 8007c0e:	d1c8      	bne.n	8007ba2 <_scanf_i+0x56>
 8007c10:	6862      	ldr	r2, [r4, #4]
 8007c12:	b90a      	cbnz	r2, 8007c18 <_scanf_i+0xcc>
 8007c14:	220a      	movs	r2, #10
 8007c16:	6062      	str	r2, [r4, #4]
 8007c18:	6862      	ldr	r2, [r4, #4]
 8007c1a:	4945      	ldr	r1, [pc, #276]	; (8007d30 <_scanf_i+0x1e4>)
 8007c1c:	6960      	ldr	r0, [r4, #20]
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	1a89      	subs	r1, r1, r2
 8007c22:	f000 f92d 	bl	8007e80 <__sccl>
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	f04f 0800 	mov.w	r8, #0
 8007c2c:	461d      	mov	r5, r3
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d03a      	beq.n	8007cac <_scanf_i+0x160>
 8007c36:	6831      	ldr	r1, [r6, #0]
 8007c38:	6960      	ldr	r0, [r4, #20]
 8007c3a:	f891 c000 	ldrb.w	ip, [r1]
 8007c3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d032      	beq.n	8007cac <_scanf_i+0x160>
 8007c46:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007c4a:	d121      	bne.n	8007c90 <_scanf_i+0x144>
 8007c4c:	0510      	lsls	r0, r2, #20
 8007c4e:	d51f      	bpl.n	8007c90 <_scanf_i+0x144>
 8007c50:	f108 0801 	add.w	r8, r8, #1
 8007c54:	b117      	cbz	r7, 8007c5c <_scanf_i+0x110>
 8007c56:	3301      	adds	r3, #1
 8007c58:	3f01      	subs	r7, #1
 8007c5a:	60a3      	str	r3, [r4, #8]
 8007c5c:	6873      	ldr	r3, [r6, #4]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	6073      	str	r3, [r6, #4]
 8007c64:	dd1b      	ble.n	8007c9e <_scanf_i+0x152>
 8007c66:	6833      	ldr	r3, [r6, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	68a3      	ldr	r3, [r4, #8]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	60a3      	str	r3, [r4, #8]
 8007c72:	e7dc      	b.n	8007c2e <_scanf_i+0xe2>
 8007c74:	f1b8 0f02 	cmp.w	r8, #2
 8007c78:	d1ad      	bne.n	8007bd6 <_scanf_i+0x8a>
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007c80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007c84:	d1bf      	bne.n	8007c06 <_scanf_i+0xba>
 8007c86:	2110      	movs	r1, #16
 8007c88:	6061      	str	r1, [r4, #4]
 8007c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c8e:	e7a1      	b.n	8007bd4 <_scanf_i+0x88>
 8007c90:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007c94:	6022      	str	r2, [r4, #0]
 8007c96:	780b      	ldrb	r3, [r1, #0]
 8007c98:	702b      	strb	r3, [r5, #0]
 8007c9a:	3501      	adds	r5, #1
 8007c9c:	e7de      	b.n	8007c5c <_scanf_i+0x110>
 8007c9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	4798      	blx	r3
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d0df      	beq.n	8007c6c <_scanf_i+0x120>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	05d9      	lsls	r1, r3, #23
 8007cb0:	d50c      	bpl.n	8007ccc <_scanf_i+0x180>
 8007cb2:	454d      	cmp	r5, r9
 8007cb4:	d908      	bls.n	8007cc8 <_scanf_i+0x17c>
 8007cb6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	4798      	blx	r3
 8007cc4:	1e6f      	subs	r7, r5, #1
 8007cc6:	463d      	mov	r5, r7
 8007cc8:	454d      	cmp	r5, r9
 8007cca:	d029      	beq.n	8007d20 <_scanf_i+0x1d4>
 8007ccc:	6822      	ldr	r2, [r4, #0]
 8007cce:	f012 0210 	ands.w	r2, r2, #16
 8007cd2:	d113      	bne.n	8007cfc <_scanf_i+0x1b0>
 8007cd4:	702a      	strb	r2, [r5, #0]
 8007cd6:	6863      	ldr	r3, [r4, #4]
 8007cd8:	9e00      	ldr	r6, [sp, #0]
 8007cda:	4649      	mov	r1, r9
 8007cdc:	4658      	mov	r0, fp
 8007cde:	47b0      	blx	r6
 8007ce0:	f8da 3000 	ldr.w	r3, [sl]
 8007ce4:	6821      	ldr	r1, [r4, #0]
 8007ce6:	1d1a      	adds	r2, r3, #4
 8007ce8:	f8ca 2000 	str.w	r2, [sl]
 8007cec:	f011 0f20 	tst.w	r1, #32
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	d010      	beq.n	8007d16 <_scanf_i+0x1ca>
 8007cf4:	6018      	str	r0, [r3, #0]
 8007cf6:	68e3      	ldr	r3, [r4, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	60e3      	str	r3, [r4, #12]
 8007cfc:	eba5 0509 	sub.w	r5, r5, r9
 8007d00:	44a8      	add	r8, r5
 8007d02:	6925      	ldr	r5, [r4, #16]
 8007d04:	4445      	add	r5, r8
 8007d06:	6125      	str	r5, [r4, #16]
 8007d08:	2000      	movs	r0, #0
 8007d0a:	b007      	add	sp, #28
 8007d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d10:	f04f 0800 	mov.w	r8, #0
 8007d14:	e7ca      	b.n	8007cac <_scanf_i+0x160>
 8007d16:	07ca      	lsls	r2, r1, #31
 8007d18:	bf4c      	ite	mi
 8007d1a:	8018      	strhmi	r0, [r3, #0]
 8007d1c:	6018      	strpl	r0, [r3, #0]
 8007d1e:	e7ea      	b.n	8007cf6 <_scanf_i+0x1aa>
 8007d20:	2001      	movs	r0, #1
 8007d22:	e7f2      	b.n	8007d0a <_scanf_i+0x1be>
 8007d24:	08008790 	.word	0x08008790
 8007d28:	080053b1 	.word	0x080053b1
 8007d2c:	08008085 	.word	0x08008085
 8007d30:	080089fd 	.word	0x080089fd

08007d34 <lflush>:
 8007d34:	8983      	ldrh	r3, [r0, #12]
 8007d36:	f003 0309 	and.w	r3, r3, #9
 8007d3a:	2b09      	cmp	r3, #9
 8007d3c:	d101      	bne.n	8007d42 <lflush+0xe>
 8007d3e:	f000 bbff 	b.w	8008540 <fflush>
 8007d42:	2000      	movs	r0, #0
 8007d44:	4770      	bx	lr
	...

08007d48 <__srefill_r>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	b118      	cbz	r0, 8007d58 <__srefill_r+0x10>
 8007d50:	6983      	ldr	r3, [r0, #24]
 8007d52:	b90b      	cbnz	r3, 8007d58 <__srefill_r+0x10>
 8007d54:	f7fe f9c4 	bl	80060e0 <__sinit>
 8007d58:	4b3c      	ldr	r3, [pc, #240]	; (8007e4c <__srefill_r+0x104>)
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	d10a      	bne.n	8007d74 <__srefill_r+0x2c>
 8007d5e:	686c      	ldr	r4, [r5, #4]
 8007d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d64:	2300      	movs	r3, #0
 8007d66:	6063      	str	r3, [r4, #4]
 8007d68:	b293      	uxth	r3, r2
 8007d6a:	069e      	lsls	r6, r3, #26
 8007d6c:	d50c      	bpl.n	8007d88 <__srefill_r+0x40>
 8007d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d72:	e067      	b.n	8007e44 <__srefill_r+0xfc>
 8007d74:	4b36      	ldr	r3, [pc, #216]	; (8007e50 <__srefill_r+0x108>)
 8007d76:	429c      	cmp	r4, r3
 8007d78:	d101      	bne.n	8007d7e <__srefill_r+0x36>
 8007d7a:	68ac      	ldr	r4, [r5, #8]
 8007d7c:	e7f0      	b.n	8007d60 <__srefill_r+0x18>
 8007d7e:	4b35      	ldr	r3, [pc, #212]	; (8007e54 <__srefill_r+0x10c>)
 8007d80:	429c      	cmp	r4, r3
 8007d82:	bf08      	it	eq
 8007d84:	68ec      	ldreq	r4, [r5, #12]
 8007d86:	e7eb      	b.n	8007d60 <__srefill_r+0x18>
 8007d88:	0758      	lsls	r0, r3, #29
 8007d8a:	d449      	bmi.n	8007e20 <__srefill_r+0xd8>
 8007d8c:	06d9      	lsls	r1, r3, #27
 8007d8e:	d405      	bmi.n	8007d9c <__srefill_r+0x54>
 8007d90:	2309      	movs	r3, #9
 8007d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	81a2      	strh	r2, [r4, #12]
 8007d9a:	e7e8      	b.n	8007d6e <__srefill_r+0x26>
 8007d9c:	071a      	lsls	r2, r3, #28
 8007d9e:	d50b      	bpl.n	8007db8 <__srefill_r+0x70>
 8007da0:	4621      	mov	r1, r4
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 fba2 	bl	80084ec <_fflush_r>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d1e0      	bne.n	8007d6e <__srefill_r+0x26>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	60a0      	str	r0, [r4, #8]
 8007db0:	f023 0308 	bic.w	r3, r3, #8
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	61a0      	str	r0, [r4, #24]
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f043 0304 	orr.w	r3, r3, #4
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	6923      	ldr	r3, [r4, #16]
 8007dc2:	b91b      	cbnz	r3, 8007dcc <__srefill_r+0x84>
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 fc02 	bl	80085d0 <__smakebuf_r>
 8007dcc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8007dd0:	b2be      	uxth	r6, r7
 8007dd2:	07b3      	lsls	r3, r6, #30
 8007dd4:	d00f      	beq.n	8007df6 <__srefill_r+0xae>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	4b1f      	ldr	r3, [pc, #124]	; (8007e58 <__srefill_r+0x110>)
 8007ddc:	491f      	ldr	r1, [pc, #124]	; (8007e5c <__srefill_r+0x114>)
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	f006 0609 	and.w	r6, r6, #9
 8007de4:	f7fe f9e8 	bl	80061b8 <_fwalk>
 8007de8:	2e09      	cmp	r6, #9
 8007dea:	81a7      	strh	r7, [r4, #12]
 8007dec:	d103      	bne.n	8007df6 <__srefill_r+0xae>
 8007dee:	4621      	mov	r1, r4
 8007df0:	4628      	mov	r0, r5
 8007df2:	f000 faf5 	bl	80083e0 <__sflush_r>
 8007df6:	6922      	ldr	r2, [r4, #16]
 8007df8:	6022      	str	r2, [r4, #0]
 8007dfa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007dfc:	6963      	ldr	r3, [r4, #20]
 8007dfe:	6a21      	ldr	r1, [r4, #32]
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b0      	blx	r6
 8007e04:	2800      	cmp	r0, #0
 8007e06:	6060      	str	r0, [r4, #4]
 8007e08:	dc1d      	bgt.n	8007e46 <__srefill_r+0xfe>
 8007e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e0e:	bf17      	itett	ne
 8007e10:	2200      	movne	r2, #0
 8007e12:	f043 0320 	orreq.w	r3, r3, #32
 8007e16:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8007e1a:	6062      	strne	r2, [r4, #4]
 8007e1c:	81a3      	strh	r3, [r4, #12]
 8007e1e:	e7a6      	b.n	8007d6e <__srefill_r+0x26>
 8007e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e22:	2900      	cmp	r1, #0
 8007e24:	d0cc      	beq.n	8007dc0 <__srefill_r+0x78>
 8007e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e2a:	4299      	cmp	r1, r3
 8007e2c:	d002      	beq.n	8007e34 <__srefill_r+0xec>
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7ff f976 	bl	8007120 <_free_r>
 8007e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	2000      	movs	r0, #0
 8007e3a:	6360      	str	r0, [r4, #52]	; 0x34
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0bf      	beq.n	8007dc0 <__srefill_r+0x78>
 8007e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e42:	6023      	str	r3, [r4, #0]
 8007e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e46:	2000      	movs	r0, #0
 8007e48:	e7fc      	b.n	8007e44 <__srefill_r+0xfc>
 8007e4a:	bf00      	nop
 8007e4c:	08008890 	.word	0x08008890
 8007e50:	080088b0 	.word	0x080088b0
 8007e54:	08008870 	.word	0x08008870
 8007e58:	080087d4 	.word	0x080087d4
 8007e5c:	08007d35 	.word	0x08007d35

08007e60 <_sbrk_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4c06      	ldr	r4, [pc, #24]	; (8007e7c <_sbrk_r+0x1c>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	4605      	mov	r5, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	6023      	str	r3, [r4, #0]
 8007e6c:	f7f9 f950 	bl	8001110 <_sbrk>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d102      	bne.n	8007e7a <_sbrk_r+0x1a>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	b103      	cbz	r3, 8007e7a <_sbrk_r+0x1a>
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	20000288 	.word	0x20000288

08007e80 <__sccl>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	780b      	ldrb	r3, [r1, #0]
 8007e84:	2b5e      	cmp	r3, #94	; 0x5e
 8007e86:	bf13      	iteet	ne
 8007e88:	1c4a      	addne	r2, r1, #1
 8007e8a:	1c8a      	addeq	r2, r1, #2
 8007e8c:	784b      	ldrbeq	r3, [r1, #1]
 8007e8e:	2100      	movne	r1, #0
 8007e90:	bf08      	it	eq
 8007e92:	2101      	moveq	r1, #1
 8007e94:	1e44      	subs	r4, r0, #1
 8007e96:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007e9a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007e9e:	42ac      	cmp	r4, r5
 8007ea0:	d1fb      	bne.n	8007e9a <__sccl+0x1a>
 8007ea2:	b913      	cbnz	r3, 8007eaa <__sccl+0x2a>
 8007ea4:	3a01      	subs	r2, #1
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	f081 0401 	eor.w	r4, r1, #1
 8007eae:	54c4      	strb	r4, [r0, r3]
 8007eb0:	1c51      	adds	r1, r2, #1
 8007eb2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007eb6:	2d2d      	cmp	r5, #45	; 0x2d
 8007eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8007ebc:	460a      	mov	r2, r1
 8007ebe:	d006      	beq.n	8007ece <__sccl+0x4e>
 8007ec0:	2d5d      	cmp	r5, #93	; 0x5d
 8007ec2:	d0f0      	beq.n	8007ea6 <__sccl+0x26>
 8007ec4:	b90d      	cbnz	r5, 8007eca <__sccl+0x4a>
 8007ec6:	4632      	mov	r2, r6
 8007ec8:	e7ed      	b.n	8007ea6 <__sccl+0x26>
 8007eca:	462b      	mov	r3, r5
 8007ecc:	e7ef      	b.n	8007eae <__sccl+0x2e>
 8007ece:	780e      	ldrb	r6, [r1, #0]
 8007ed0:	2e5d      	cmp	r6, #93	; 0x5d
 8007ed2:	d0fa      	beq.n	8007eca <__sccl+0x4a>
 8007ed4:	42b3      	cmp	r3, r6
 8007ed6:	dcf8      	bgt.n	8007eca <__sccl+0x4a>
 8007ed8:	3301      	adds	r3, #1
 8007eda:	429e      	cmp	r6, r3
 8007edc:	54c4      	strb	r4, [r0, r3]
 8007ede:	dcfb      	bgt.n	8007ed8 <__sccl+0x58>
 8007ee0:	3102      	adds	r1, #2
 8007ee2:	e7e6      	b.n	8007eb2 <__sccl+0x32>

08007ee4 <__sread>:
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eec:	f000 fbf2 	bl	80086d4 <_read_r>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	bfab      	itete	ge
 8007ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ef8:	181b      	addge	r3, r3, r0
 8007efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007efe:	bfac      	ite	ge
 8007f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f02:	81a3      	strhlt	r3, [r4, #12]
 8007f04:	bd10      	pop	{r4, pc}

08007f06 <__swrite>:
 8007f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	461f      	mov	r7, r3
 8007f0c:	898b      	ldrh	r3, [r1, #12]
 8007f0e:	05db      	lsls	r3, r3, #23
 8007f10:	4605      	mov	r5, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4616      	mov	r6, r2
 8007f16:	d505      	bpl.n	8007f24 <__swrite+0x1e>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	f000 fb20 	bl	8008564 <_lseek_r>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	4632      	mov	r2, r6
 8007f32:	463b      	mov	r3, r7
 8007f34:	4628      	mov	r0, r5
 8007f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3a:	f000 b9c1 	b.w	80082c0 <_write_r>

08007f3e <__sseek>:
 8007f3e:	b510      	push	{r4, lr}
 8007f40:	460c      	mov	r4, r1
 8007f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f46:	f000 fb0d 	bl	8008564 <_lseek_r>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	bf15      	itete	ne
 8007f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f5a:	81a3      	strheq	r3, [r4, #12]
 8007f5c:	bf18      	it	ne
 8007f5e:	81a3      	strhne	r3, [r4, #12]
 8007f60:	bd10      	pop	{r4, pc}

08007f62 <__sclose>:
 8007f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f66:	f000 ba2b 	b.w	80083c0 <_close_r>

08007f6a <strncmp>:
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	b16a      	cbz	r2, 8007f8a <strncmp+0x20>
 8007f6e:	3901      	subs	r1, #1
 8007f70:	1884      	adds	r4, r0, r2
 8007f72:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007f76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d103      	bne.n	8007f86 <strncmp+0x1c>
 8007f7e:	42a0      	cmp	r0, r4
 8007f80:	d001      	beq.n	8007f86 <strncmp+0x1c>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1f5      	bne.n	8007f72 <strncmp+0x8>
 8007f86:	1a98      	subs	r0, r3, r2
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	e7fc      	b.n	8007f88 <strncmp+0x1e>

08007f8e <_strtoul_l.isra.0>:
 8007f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	4692      	mov	sl, r2
 8007f98:	461e      	mov	r6, r3
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	463d      	mov	r5, r7
 8007f9e:	9808      	ldr	r0, [sp, #32]
 8007fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fa4:	f7fe fc68 	bl	8006878 <__locale_ctype_ptr_l>
 8007fa8:	4420      	add	r0, r4
 8007faa:	7843      	ldrb	r3, [r0, #1]
 8007fac:	f013 0308 	ands.w	r3, r3, #8
 8007fb0:	d130      	bne.n	8008014 <_strtoul_l.isra.0+0x86>
 8007fb2:	2c2d      	cmp	r4, #45	; 0x2d
 8007fb4:	d130      	bne.n	8008018 <_strtoul_l.isra.0+0x8a>
 8007fb6:	787c      	ldrb	r4, [r7, #1]
 8007fb8:	1cbd      	adds	r5, r7, #2
 8007fba:	2101      	movs	r1, #1
 8007fbc:	2e00      	cmp	r6, #0
 8007fbe:	d05c      	beq.n	800807a <_strtoul_l.isra.0+0xec>
 8007fc0:	2e10      	cmp	r6, #16
 8007fc2:	d109      	bne.n	8007fd8 <_strtoul_l.isra.0+0x4a>
 8007fc4:	2c30      	cmp	r4, #48	; 0x30
 8007fc6:	d107      	bne.n	8007fd8 <_strtoul_l.isra.0+0x4a>
 8007fc8:	782b      	ldrb	r3, [r5, #0]
 8007fca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fce:	2b58      	cmp	r3, #88	; 0x58
 8007fd0:	d14e      	bne.n	8008070 <_strtoul_l.isra.0+0xe2>
 8007fd2:	786c      	ldrb	r4, [r5, #1]
 8007fd4:	2610      	movs	r6, #16
 8007fd6:	3502      	adds	r5, #2
 8007fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fdc:	2300      	movs	r3, #0
 8007fde:	fbb2 f2f6 	udiv	r2, r2, r6
 8007fe2:	fb06 fc02 	mul.w	ip, r6, r2
 8007fe6:	ea6f 0c0c 	mvn.w	ip, ip
 8007fea:	4618      	mov	r0, r3
 8007fec:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007ff0:	2f09      	cmp	r7, #9
 8007ff2:	d817      	bhi.n	8008024 <_strtoul_l.isra.0+0x96>
 8007ff4:	463c      	mov	r4, r7
 8007ff6:	42a6      	cmp	r6, r4
 8007ff8:	dd23      	ble.n	8008042 <_strtoul_l.isra.0+0xb4>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	db1e      	blt.n	800803c <_strtoul_l.isra.0+0xae>
 8007ffe:	4282      	cmp	r2, r0
 8008000:	d31c      	bcc.n	800803c <_strtoul_l.isra.0+0xae>
 8008002:	d101      	bne.n	8008008 <_strtoul_l.isra.0+0x7a>
 8008004:	45a4      	cmp	ip, r4
 8008006:	db19      	blt.n	800803c <_strtoul_l.isra.0+0xae>
 8008008:	fb00 4006 	mla	r0, r0, r6, r4
 800800c:	2301      	movs	r3, #1
 800800e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008012:	e7eb      	b.n	8007fec <_strtoul_l.isra.0+0x5e>
 8008014:	462f      	mov	r7, r5
 8008016:	e7c1      	b.n	8007f9c <_strtoul_l.isra.0+0xe>
 8008018:	2c2b      	cmp	r4, #43	; 0x2b
 800801a:	bf04      	itt	eq
 800801c:	1cbd      	addeq	r5, r7, #2
 800801e:	787c      	ldrbeq	r4, [r7, #1]
 8008020:	4619      	mov	r1, r3
 8008022:	e7cb      	b.n	8007fbc <_strtoul_l.isra.0+0x2e>
 8008024:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008028:	2f19      	cmp	r7, #25
 800802a:	d801      	bhi.n	8008030 <_strtoul_l.isra.0+0xa2>
 800802c:	3c37      	subs	r4, #55	; 0x37
 800802e:	e7e2      	b.n	8007ff6 <_strtoul_l.isra.0+0x68>
 8008030:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008034:	2f19      	cmp	r7, #25
 8008036:	d804      	bhi.n	8008042 <_strtoul_l.isra.0+0xb4>
 8008038:	3c57      	subs	r4, #87	; 0x57
 800803a:	e7dc      	b.n	8007ff6 <_strtoul_l.isra.0+0x68>
 800803c:	f04f 33ff 	mov.w	r3, #4294967295
 8008040:	e7e5      	b.n	800800e <_strtoul_l.isra.0+0x80>
 8008042:	2b00      	cmp	r3, #0
 8008044:	da09      	bge.n	800805a <_strtoul_l.isra.0+0xcc>
 8008046:	2322      	movs	r3, #34	; 0x22
 8008048:	f8c8 3000 	str.w	r3, [r8]
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	f1ba 0f00 	cmp.w	sl, #0
 8008054:	d107      	bne.n	8008066 <_strtoul_l.isra.0+0xd8>
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	b101      	cbz	r1, 800805e <_strtoul_l.isra.0+0xd0>
 800805c:	4240      	negs	r0, r0
 800805e:	f1ba 0f00 	cmp.w	sl, #0
 8008062:	d0f8      	beq.n	8008056 <_strtoul_l.isra.0+0xc8>
 8008064:	b10b      	cbz	r3, 800806a <_strtoul_l.isra.0+0xdc>
 8008066:	f105 39ff 	add.w	r9, r5, #4294967295
 800806a:	f8ca 9000 	str.w	r9, [sl]
 800806e:	e7f2      	b.n	8008056 <_strtoul_l.isra.0+0xc8>
 8008070:	2430      	movs	r4, #48	; 0x30
 8008072:	2e00      	cmp	r6, #0
 8008074:	d1b0      	bne.n	8007fd8 <_strtoul_l.isra.0+0x4a>
 8008076:	2608      	movs	r6, #8
 8008078:	e7ae      	b.n	8007fd8 <_strtoul_l.isra.0+0x4a>
 800807a:	2c30      	cmp	r4, #48	; 0x30
 800807c:	d0a4      	beq.n	8007fc8 <_strtoul_l.isra.0+0x3a>
 800807e:	260a      	movs	r6, #10
 8008080:	e7aa      	b.n	8007fd8 <_strtoul_l.isra.0+0x4a>
	...

08008084 <_strtoul_r>:
 8008084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008086:	4c06      	ldr	r4, [pc, #24]	; (80080a0 <_strtoul_r+0x1c>)
 8008088:	4d06      	ldr	r5, [pc, #24]	; (80080a4 <_strtoul_r+0x20>)
 800808a:	6824      	ldr	r4, [r4, #0]
 800808c:	6a24      	ldr	r4, [r4, #32]
 800808e:	2c00      	cmp	r4, #0
 8008090:	bf08      	it	eq
 8008092:	462c      	moveq	r4, r5
 8008094:	9400      	str	r4, [sp, #0]
 8008096:	f7ff ff7a 	bl	8007f8e <_strtoul_l.isra.0>
 800809a:	b003      	add	sp, #12
 800809c:	bd30      	pop	{r4, r5, pc}
 800809e:	bf00      	nop
 80080a0:	2000000c 	.word	0x2000000c
 80080a4:	20000070 	.word	0x20000070

080080a8 <__submore>:
 80080a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ac:	460c      	mov	r4, r1
 80080ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80080b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080b4:	4299      	cmp	r1, r3
 80080b6:	d11d      	bne.n	80080f4 <__submore+0x4c>
 80080b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080bc:	f7ff f87e 	bl	80071bc <_malloc_r>
 80080c0:	b918      	cbnz	r0, 80080ca <__submore+0x22>
 80080c2:	f04f 30ff 	mov.w	r0, #4294967295
 80080c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80080d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80080d4:	6360      	str	r0, [r4, #52]	; 0x34
 80080d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80080da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80080de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80080e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80080e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80080ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80080ee:	6020      	str	r0, [r4, #0]
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7e8      	b.n	80080c6 <__submore+0x1e>
 80080f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80080f6:	0077      	lsls	r7, r6, #1
 80080f8:	463a      	mov	r2, r7
 80080fa:	f000 fac4 	bl	8008686 <_realloc_r>
 80080fe:	4605      	mov	r5, r0
 8008100:	2800      	cmp	r0, #0
 8008102:	d0de      	beq.n	80080c2 <__submore+0x1a>
 8008104:	eb00 0806 	add.w	r8, r0, r6
 8008108:	4601      	mov	r1, r0
 800810a:	4632      	mov	r2, r6
 800810c:	4640      	mov	r0, r8
 800810e:	f7fe fbef 	bl	80068f0 <memcpy>
 8008112:	f8c4 8000 	str.w	r8, [r4]
 8008116:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800811a:	e7e9      	b.n	80080f0 <__submore+0x48>

0800811c <_ungetc_r>:
 800811c:	1c4b      	adds	r3, r1, #1
 800811e:	b570      	push	{r4, r5, r6, lr}
 8008120:	4606      	mov	r6, r0
 8008122:	460d      	mov	r5, r1
 8008124:	4614      	mov	r4, r2
 8008126:	d103      	bne.n	8008130 <_ungetc_r+0x14>
 8008128:	f04f 35ff 	mov.w	r5, #4294967295
 800812c:	4628      	mov	r0, r5
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	b118      	cbz	r0, 800813a <_ungetc_r+0x1e>
 8008132:	6983      	ldr	r3, [r0, #24]
 8008134:	b90b      	cbnz	r3, 800813a <_ungetc_r+0x1e>
 8008136:	f7fd ffd3 	bl	80060e0 <__sinit>
 800813a:	4b2e      	ldr	r3, [pc, #184]	; (80081f4 <_ungetc_r+0xd8>)
 800813c:	429c      	cmp	r4, r3
 800813e:	d12c      	bne.n	800819a <_ungetc_r+0x7e>
 8008140:	6874      	ldr	r4, [r6, #4]
 8008142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008146:	f023 0320 	bic.w	r3, r3, #32
 800814a:	81a3      	strh	r3, [r4, #12]
 800814c:	b29b      	uxth	r3, r3
 800814e:	0759      	lsls	r1, r3, #29
 8008150:	d413      	bmi.n	800817a <_ungetc_r+0x5e>
 8008152:	06da      	lsls	r2, r3, #27
 8008154:	d5e8      	bpl.n	8008128 <_ungetc_r+0xc>
 8008156:	071b      	lsls	r3, r3, #28
 8008158:	d50b      	bpl.n	8008172 <_ungetc_r+0x56>
 800815a:	4621      	mov	r1, r4
 800815c:	4630      	mov	r0, r6
 800815e:	f000 f9c5 	bl	80084ec <_fflush_r>
 8008162:	2800      	cmp	r0, #0
 8008164:	d1e0      	bne.n	8008128 <_ungetc_r+0xc>
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	60a0      	str	r0, [r4, #8]
 800816a:	f023 0308 	bic.w	r3, r3, #8
 800816e:	81a3      	strh	r3, [r4, #12]
 8008170:	61a0      	str	r0, [r4, #24]
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f043 0304 	orr.w	r3, r3, #4
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800817c:	6862      	ldr	r2, [r4, #4]
 800817e:	b2ed      	uxtb	r5, r5
 8008180:	b1e3      	cbz	r3, 80081bc <_ungetc_r+0xa0>
 8008182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008184:	4293      	cmp	r3, r2
 8008186:	dd12      	ble.n	80081ae <_ungetc_r+0x92>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	1e5a      	subs	r2, r3, #1
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008192:	6863      	ldr	r3, [r4, #4]
 8008194:	3301      	adds	r3, #1
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	e7c8      	b.n	800812c <_ungetc_r+0x10>
 800819a:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <_ungetc_r+0xdc>)
 800819c:	429c      	cmp	r4, r3
 800819e:	d101      	bne.n	80081a4 <_ungetc_r+0x88>
 80081a0:	68b4      	ldr	r4, [r6, #8]
 80081a2:	e7ce      	b.n	8008142 <_ungetc_r+0x26>
 80081a4:	4b15      	ldr	r3, [pc, #84]	; (80081fc <_ungetc_r+0xe0>)
 80081a6:	429c      	cmp	r4, r3
 80081a8:	bf08      	it	eq
 80081aa:	68f4      	ldreq	r4, [r6, #12]
 80081ac:	e7c9      	b.n	8008142 <_ungetc_r+0x26>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff ff79 	bl	80080a8 <__submore>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d0e6      	beq.n	8008188 <_ungetc_r+0x6c>
 80081ba:	e7b5      	b.n	8008128 <_ungetc_r+0xc>
 80081bc:	6921      	ldr	r1, [r4, #16]
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	b151      	cbz	r1, 80081d8 <_ungetc_r+0xbc>
 80081c2:	4299      	cmp	r1, r3
 80081c4:	d208      	bcs.n	80081d8 <_ungetc_r+0xbc>
 80081c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80081ca:	42a9      	cmp	r1, r5
 80081cc:	d104      	bne.n	80081d8 <_ungetc_r+0xbc>
 80081ce:	3b01      	subs	r3, #1
 80081d0:	3201      	adds	r2, #1
 80081d2:	6023      	str	r3, [r4, #0]
 80081d4:	6062      	str	r2, [r4, #4]
 80081d6:	e7a9      	b.n	800812c <_ungetc_r+0x10>
 80081d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80081dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e0:	6363      	str	r3, [r4, #52]	; 0x34
 80081e2:	2303      	movs	r3, #3
 80081e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80081e6:	4623      	mov	r3, r4
 80081e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	2301      	movs	r3, #1
 80081f0:	e7d1      	b.n	8008196 <_ungetc_r+0x7a>
 80081f2:	bf00      	nop
 80081f4:	08008890 	.word	0x08008890
 80081f8:	080088b0 	.word	0x080088b0
 80081fc:	08008870 	.word	0x08008870

08008200 <__swbuf_r>:
 8008200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008202:	460e      	mov	r6, r1
 8008204:	4614      	mov	r4, r2
 8008206:	4605      	mov	r5, r0
 8008208:	b118      	cbz	r0, 8008212 <__swbuf_r+0x12>
 800820a:	6983      	ldr	r3, [r0, #24]
 800820c:	b90b      	cbnz	r3, 8008212 <__swbuf_r+0x12>
 800820e:	f7fd ff67 	bl	80060e0 <__sinit>
 8008212:	4b21      	ldr	r3, [pc, #132]	; (8008298 <__swbuf_r+0x98>)
 8008214:	429c      	cmp	r4, r3
 8008216:	d12a      	bne.n	800826e <__swbuf_r+0x6e>
 8008218:	686c      	ldr	r4, [r5, #4]
 800821a:	69a3      	ldr	r3, [r4, #24]
 800821c:	60a3      	str	r3, [r4, #8]
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	071a      	lsls	r2, r3, #28
 8008222:	d52e      	bpl.n	8008282 <__swbuf_r+0x82>
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	b363      	cbz	r3, 8008282 <__swbuf_r+0x82>
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	6820      	ldr	r0, [r4, #0]
 800822c:	1ac0      	subs	r0, r0, r3
 800822e:	6963      	ldr	r3, [r4, #20]
 8008230:	b2f6      	uxtb	r6, r6
 8008232:	4283      	cmp	r3, r0
 8008234:	4637      	mov	r7, r6
 8008236:	dc04      	bgt.n	8008242 <__swbuf_r+0x42>
 8008238:	4621      	mov	r1, r4
 800823a:	4628      	mov	r0, r5
 800823c:	f000 f956 	bl	80084ec <_fflush_r>
 8008240:	bb28      	cbnz	r0, 800828e <__swbuf_r+0x8e>
 8008242:	68a3      	ldr	r3, [r4, #8]
 8008244:	3b01      	subs	r3, #1
 8008246:	60a3      	str	r3, [r4, #8]
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	6022      	str	r2, [r4, #0]
 800824e:	701e      	strb	r6, [r3, #0]
 8008250:	6963      	ldr	r3, [r4, #20]
 8008252:	3001      	adds	r0, #1
 8008254:	4283      	cmp	r3, r0
 8008256:	d004      	beq.n	8008262 <__swbuf_r+0x62>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	07db      	lsls	r3, r3, #31
 800825c:	d519      	bpl.n	8008292 <__swbuf_r+0x92>
 800825e:	2e0a      	cmp	r6, #10
 8008260:	d117      	bne.n	8008292 <__swbuf_r+0x92>
 8008262:	4621      	mov	r1, r4
 8008264:	4628      	mov	r0, r5
 8008266:	f000 f941 	bl	80084ec <_fflush_r>
 800826a:	b190      	cbz	r0, 8008292 <__swbuf_r+0x92>
 800826c:	e00f      	b.n	800828e <__swbuf_r+0x8e>
 800826e:	4b0b      	ldr	r3, [pc, #44]	; (800829c <__swbuf_r+0x9c>)
 8008270:	429c      	cmp	r4, r3
 8008272:	d101      	bne.n	8008278 <__swbuf_r+0x78>
 8008274:	68ac      	ldr	r4, [r5, #8]
 8008276:	e7d0      	b.n	800821a <__swbuf_r+0x1a>
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <__swbuf_r+0xa0>)
 800827a:	429c      	cmp	r4, r3
 800827c:	bf08      	it	eq
 800827e:	68ec      	ldreq	r4, [r5, #12]
 8008280:	e7cb      	b.n	800821a <__swbuf_r+0x1a>
 8008282:	4621      	mov	r1, r4
 8008284:	4628      	mov	r0, r5
 8008286:	f000 f82d 	bl	80082e4 <__swsetup_r>
 800828a:	2800      	cmp	r0, #0
 800828c:	d0cc      	beq.n	8008228 <__swbuf_r+0x28>
 800828e:	f04f 37ff 	mov.w	r7, #4294967295
 8008292:	4638      	mov	r0, r7
 8008294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008296:	bf00      	nop
 8008298:	08008890 	.word	0x08008890
 800829c:	080088b0 	.word	0x080088b0
 80082a0:	08008870 	.word	0x08008870

080082a4 <__ascii_wctomb>:
 80082a4:	b149      	cbz	r1, 80082ba <__ascii_wctomb+0x16>
 80082a6:	2aff      	cmp	r2, #255	; 0xff
 80082a8:	bf85      	ittet	hi
 80082aa:	238a      	movhi	r3, #138	; 0x8a
 80082ac:	6003      	strhi	r3, [r0, #0]
 80082ae:	700a      	strbls	r2, [r1, #0]
 80082b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80082b4:	bf98      	it	ls
 80082b6:	2001      	movls	r0, #1
 80082b8:	4770      	bx	lr
 80082ba:	4608      	mov	r0, r1
 80082bc:	4770      	bx	lr
	...

080082c0 <_write_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4c07      	ldr	r4, [pc, #28]	; (80082e0 <_write_r+0x20>)
 80082c4:	4605      	mov	r5, r0
 80082c6:	4608      	mov	r0, r1
 80082c8:	4611      	mov	r1, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	6022      	str	r2, [r4, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f7f8 fd04 	bl	8000cdc <_write>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_write_r+0x1e>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	b103      	cbz	r3, 80082de <_write_r+0x1e>
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	20000288 	.word	0x20000288

080082e4 <__swsetup_r>:
 80082e4:	4b32      	ldr	r3, [pc, #200]	; (80083b0 <__swsetup_r+0xcc>)
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	681d      	ldr	r5, [r3, #0]
 80082ea:	4606      	mov	r6, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	b125      	cbz	r5, 80082fa <__swsetup_r+0x16>
 80082f0:	69ab      	ldr	r3, [r5, #24]
 80082f2:	b913      	cbnz	r3, 80082fa <__swsetup_r+0x16>
 80082f4:	4628      	mov	r0, r5
 80082f6:	f7fd fef3 	bl	80060e0 <__sinit>
 80082fa:	4b2e      	ldr	r3, [pc, #184]	; (80083b4 <__swsetup_r+0xd0>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d10f      	bne.n	8008320 <__swsetup_r+0x3c>
 8008300:	686c      	ldr	r4, [r5, #4]
 8008302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008306:	b29a      	uxth	r2, r3
 8008308:	0715      	lsls	r5, r2, #28
 800830a:	d42c      	bmi.n	8008366 <__swsetup_r+0x82>
 800830c:	06d0      	lsls	r0, r2, #27
 800830e:	d411      	bmi.n	8008334 <__swsetup_r+0x50>
 8008310:	2209      	movs	r2, #9
 8008312:	6032      	str	r2, [r6, #0]
 8008314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	e03e      	b.n	800839e <__swsetup_r+0xba>
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <__swsetup_r+0xd4>)
 8008322:	429c      	cmp	r4, r3
 8008324:	d101      	bne.n	800832a <__swsetup_r+0x46>
 8008326:	68ac      	ldr	r4, [r5, #8]
 8008328:	e7eb      	b.n	8008302 <__swsetup_r+0x1e>
 800832a:	4b24      	ldr	r3, [pc, #144]	; (80083bc <__swsetup_r+0xd8>)
 800832c:	429c      	cmp	r4, r3
 800832e:	bf08      	it	eq
 8008330:	68ec      	ldreq	r4, [r5, #12]
 8008332:	e7e6      	b.n	8008302 <__swsetup_r+0x1e>
 8008334:	0751      	lsls	r1, r2, #29
 8008336:	d512      	bpl.n	800835e <__swsetup_r+0x7a>
 8008338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800833a:	b141      	cbz	r1, 800834e <__swsetup_r+0x6a>
 800833c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008340:	4299      	cmp	r1, r3
 8008342:	d002      	beq.n	800834a <__swsetup_r+0x66>
 8008344:	4630      	mov	r0, r6
 8008346:	f7fe feeb 	bl	8007120 <_free_r>
 800834a:	2300      	movs	r3, #0
 800834c:	6363      	str	r3, [r4, #52]	; 0x34
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	2300      	movs	r3, #0
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f043 0308 	orr.w	r3, r3, #8
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	b94b      	cbnz	r3, 800837e <__swsetup_r+0x9a>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008374:	d003      	beq.n	800837e <__swsetup_r+0x9a>
 8008376:	4621      	mov	r1, r4
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f929 	bl	80085d0 <__smakebuf_r>
 800837e:	89a2      	ldrh	r2, [r4, #12]
 8008380:	f012 0301 	ands.w	r3, r2, #1
 8008384:	d00c      	beq.n	80083a0 <__swsetup_r+0xbc>
 8008386:	2300      	movs	r3, #0
 8008388:	60a3      	str	r3, [r4, #8]
 800838a:	6963      	ldr	r3, [r4, #20]
 800838c:	425b      	negs	r3, r3
 800838e:	61a3      	str	r3, [r4, #24]
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	b953      	cbnz	r3, 80083aa <__swsetup_r+0xc6>
 8008394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008398:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800839c:	d1ba      	bne.n	8008314 <__swsetup_r+0x30>
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	0792      	lsls	r2, r2, #30
 80083a2:	bf58      	it	pl
 80083a4:	6963      	ldrpl	r3, [r4, #20]
 80083a6:	60a3      	str	r3, [r4, #8]
 80083a8:	e7f2      	b.n	8008390 <__swsetup_r+0xac>
 80083aa:	2000      	movs	r0, #0
 80083ac:	e7f7      	b.n	800839e <__swsetup_r+0xba>
 80083ae:	bf00      	nop
 80083b0:	2000000c 	.word	0x2000000c
 80083b4:	08008890 	.word	0x08008890
 80083b8:	080088b0 	.word	0x080088b0
 80083bc:	08008870 	.word	0x08008870

080083c0 <_close_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4c06      	ldr	r4, [pc, #24]	; (80083dc <_close_r+0x1c>)
 80083c4:	2300      	movs	r3, #0
 80083c6:	4605      	mov	r5, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	f7f8 fe6c 	bl	80010a8 <_close>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_close_r+0x1a>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	b103      	cbz	r3, 80083da <_close_r+0x1a>
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20000288 	.word	0x20000288

080083e0 <__sflush_r>:
 80083e0:	898a      	ldrh	r2, [r1, #12]
 80083e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e6:	4605      	mov	r5, r0
 80083e8:	0710      	lsls	r0, r2, #28
 80083ea:	460c      	mov	r4, r1
 80083ec:	d458      	bmi.n	80084a0 <__sflush_r+0xc0>
 80083ee:	684b      	ldr	r3, [r1, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dc05      	bgt.n	8008400 <__sflush_r+0x20>
 80083f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dc02      	bgt.n	8008400 <__sflush_r+0x20>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008402:	2e00      	cmp	r6, #0
 8008404:	d0f9      	beq.n	80083fa <__sflush_r+0x1a>
 8008406:	2300      	movs	r3, #0
 8008408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800840c:	682f      	ldr	r7, [r5, #0]
 800840e:	6a21      	ldr	r1, [r4, #32]
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	d032      	beq.n	800847a <__sflush_r+0x9a>
 8008414:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	075a      	lsls	r2, r3, #29
 800841a:	d505      	bpl.n	8008428 <__sflush_r+0x48>
 800841c:	6863      	ldr	r3, [r4, #4]
 800841e:	1ac0      	subs	r0, r0, r3
 8008420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008422:	b10b      	cbz	r3, 8008428 <__sflush_r+0x48>
 8008424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008426:	1ac0      	subs	r0, r0, r3
 8008428:	2300      	movs	r3, #0
 800842a:	4602      	mov	r2, r0
 800842c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800842e:	6a21      	ldr	r1, [r4, #32]
 8008430:	4628      	mov	r0, r5
 8008432:	47b0      	blx	r6
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	d106      	bne.n	8008448 <__sflush_r+0x68>
 800843a:	6829      	ldr	r1, [r5, #0]
 800843c:	291d      	cmp	r1, #29
 800843e:	d848      	bhi.n	80084d2 <__sflush_r+0xf2>
 8008440:	4a29      	ldr	r2, [pc, #164]	; (80084e8 <__sflush_r+0x108>)
 8008442:	40ca      	lsrs	r2, r1
 8008444:	07d6      	lsls	r6, r2, #31
 8008446:	d544      	bpl.n	80084d2 <__sflush_r+0xf2>
 8008448:	2200      	movs	r2, #0
 800844a:	6062      	str	r2, [r4, #4]
 800844c:	04d9      	lsls	r1, r3, #19
 800844e:	6922      	ldr	r2, [r4, #16]
 8008450:	6022      	str	r2, [r4, #0]
 8008452:	d504      	bpl.n	800845e <__sflush_r+0x7e>
 8008454:	1c42      	adds	r2, r0, #1
 8008456:	d101      	bne.n	800845c <__sflush_r+0x7c>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b903      	cbnz	r3, 800845e <__sflush_r+0x7e>
 800845c:	6560      	str	r0, [r4, #84]	; 0x54
 800845e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008460:	602f      	str	r7, [r5, #0]
 8008462:	2900      	cmp	r1, #0
 8008464:	d0c9      	beq.n	80083fa <__sflush_r+0x1a>
 8008466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800846a:	4299      	cmp	r1, r3
 800846c:	d002      	beq.n	8008474 <__sflush_r+0x94>
 800846e:	4628      	mov	r0, r5
 8008470:	f7fe fe56 	bl	8007120 <_free_r>
 8008474:	2000      	movs	r0, #0
 8008476:	6360      	str	r0, [r4, #52]	; 0x34
 8008478:	e7c0      	b.n	80083fc <__sflush_r+0x1c>
 800847a:	2301      	movs	r3, #1
 800847c:	4628      	mov	r0, r5
 800847e:	47b0      	blx	r6
 8008480:	1c41      	adds	r1, r0, #1
 8008482:	d1c8      	bne.n	8008416 <__sflush_r+0x36>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0c5      	beq.n	8008416 <__sflush_r+0x36>
 800848a:	2b1d      	cmp	r3, #29
 800848c:	d001      	beq.n	8008492 <__sflush_r+0xb2>
 800848e:	2b16      	cmp	r3, #22
 8008490:	d101      	bne.n	8008496 <__sflush_r+0xb6>
 8008492:	602f      	str	r7, [r5, #0]
 8008494:	e7b1      	b.n	80083fa <__sflush_r+0x1a>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	e7ad      	b.n	80083fc <__sflush_r+0x1c>
 80084a0:	690f      	ldr	r7, [r1, #16]
 80084a2:	2f00      	cmp	r7, #0
 80084a4:	d0a9      	beq.n	80083fa <__sflush_r+0x1a>
 80084a6:	0793      	lsls	r3, r2, #30
 80084a8:	680e      	ldr	r6, [r1, #0]
 80084aa:	bf08      	it	eq
 80084ac:	694b      	ldreq	r3, [r1, #20]
 80084ae:	600f      	str	r7, [r1, #0]
 80084b0:	bf18      	it	ne
 80084b2:	2300      	movne	r3, #0
 80084b4:	eba6 0807 	sub.w	r8, r6, r7
 80084b8:	608b      	str	r3, [r1, #8]
 80084ba:	f1b8 0f00 	cmp.w	r8, #0
 80084be:	dd9c      	ble.n	80083fa <__sflush_r+0x1a>
 80084c0:	4643      	mov	r3, r8
 80084c2:	463a      	mov	r2, r7
 80084c4:	6a21      	ldr	r1, [r4, #32]
 80084c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084c8:	4628      	mov	r0, r5
 80084ca:	47b0      	blx	r6
 80084cc:	2800      	cmp	r0, #0
 80084ce:	dc06      	bgt.n	80084de <__sflush_r+0xfe>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d6:	81a3      	strh	r3, [r4, #12]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e78e      	b.n	80083fc <__sflush_r+0x1c>
 80084de:	4407      	add	r7, r0
 80084e0:	eba8 0800 	sub.w	r8, r8, r0
 80084e4:	e7e9      	b.n	80084ba <__sflush_r+0xda>
 80084e6:	bf00      	nop
 80084e8:	20400001 	.word	0x20400001

080084ec <_fflush_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	690b      	ldr	r3, [r1, #16]
 80084f0:	4605      	mov	r5, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	b1db      	cbz	r3, 800852e <_fflush_r+0x42>
 80084f6:	b118      	cbz	r0, 8008500 <_fflush_r+0x14>
 80084f8:	6983      	ldr	r3, [r0, #24]
 80084fa:	b90b      	cbnz	r3, 8008500 <_fflush_r+0x14>
 80084fc:	f7fd fdf0 	bl	80060e0 <__sinit>
 8008500:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <_fflush_r+0x48>)
 8008502:	429c      	cmp	r4, r3
 8008504:	d109      	bne.n	800851a <_fflush_r+0x2e>
 8008506:	686c      	ldr	r4, [r5, #4]
 8008508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850c:	b17b      	cbz	r3, 800852e <_fflush_r+0x42>
 800850e:	4621      	mov	r1, r4
 8008510:	4628      	mov	r0, r5
 8008512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008516:	f7ff bf63 	b.w	80083e0 <__sflush_r>
 800851a:	4b07      	ldr	r3, [pc, #28]	; (8008538 <_fflush_r+0x4c>)
 800851c:	429c      	cmp	r4, r3
 800851e:	d101      	bne.n	8008524 <_fflush_r+0x38>
 8008520:	68ac      	ldr	r4, [r5, #8]
 8008522:	e7f1      	b.n	8008508 <_fflush_r+0x1c>
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <_fflush_r+0x50>)
 8008526:	429c      	cmp	r4, r3
 8008528:	bf08      	it	eq
 800852a:	68ec      	ldreq	r4, [r5, #12]
 800852c:	e7ec      	b.n	8008508 <_fflush_r+0x1c>
 800852e:	2000      	movs	r0, #0
 8008530:	bd38      	pop	{r3, r4, r5, pc}
 8008532:	bf00      	nop
 8008534:	08008890 	.word	0x08008890
 8008538:	080088b0 	.word	0x080088b0
 800853c:	08008870 	.word	0x08008870

08008540 <fflush>:
 8008540:	4601      	mov	r1, r0
 8008542:	b920      	cbnz	r0, 800854e <fflush+0xe>
 8008544:	4b04      	ldr	r3, [pc, #16]	; (8008558 <fflush+0x18>)
 8008546:	4905      	ldr	r1, [pc, #20]	; (800855c <fflush+0x1c>)
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	f7fd be51 	b.w	80061f0 <_fwalk_reent>
 800854e:	4b04      	ldr	r3, [pc, #16]	; (8008560 <fflush+0x20>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	f7ff bfcb 	b.w	80084ec <_fflush_r>
 8008556:	bf00      	nop
 8008558:	080087d4 	.word	0x080087d4
 800855c:	080084ed 	.word	0x080084ed
 8008560:	2000000c 	.word	0x2000000c

08008564 <_lseek_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4c07      	ldr	r4, [pc, #28]	; (8008584 <_lseek_r+0x20>)
 8008568:	4605      	mov	r5, r0
 800856a:	4608      	mov	r0, r1
 800856c:	4611      	mov	r1, r2
 800856e:	2200      	movs	r2, #0
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	f7f8 fdbf 	bl	80010f6 <_lseek>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_lseek_r+0x1e>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	b103      	cbz	r3, 8008582 <_lseek_r+0x1e>
 8008580:	602b      	str	r3, [r5, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	20000288 	.word	0x20000288

08008588 <__swhatbuf_r>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	460e      	mov	r6, r1
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	2900      	cmp	r1, #0
 8008592:	b096      	sub	sp, #88	; 0x58
 8008594:	4614      	mov	r4, r2
 8008596:	461d      	mov	r5, r3
 8008598:	da07      	bge.n	80085aa <__swhatbuf_r+0x22>
 800859a:	2300      	movs	r3, #0
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	89b3      	ldrh	r3, [r6, #12]
 80085a0:	061a      	lsls	r2, r3, #24
 80085a2:	d410      	bmi.n	80085c6 <__swhatbuf_r+0x3e>
 80085a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085a8:	e00e      	b.n	80085c8 <__swhatbuf_r+0x40>
 80085aa:	466a      	mov	r2, sp
 80085ac:	f000 f8a4 	bl	80086f8 <_fstat_r>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	dbf2      	blt.n	800859a <__swhatbuf_r+0x12>
 80085b4:	9a01      	ldr	r2, [sp, #4]
 80085b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085be:	425a      	negs	r2, r3
 80085c0:	415a      	adcs	r2, r3
 80085c2:	602a      	str	r2, [r5, #0]
 80085c4:	e7ee      	b.n	80085a4 <__swhatbuf_r+0x1c>
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	2000      	movs	r0, #0
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	b016      	add	sp, #88	; 0x58
 80085ce:	bd70      	pop	{r4, r5, r6, pc}

080085d0 <__smakebuf_r>:
 80085d0:	898b      	ldrh	r3, [r1, #12]
 80085d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085d4:	079d      	lsls	r5, r3, #30
 80085d6:	4606      	mov	r6, r0
 80085d8:	460c      	mov	r4, r1
 80085da:	d507      	bpl.n	80085ec <__smakebuf_r+0x1c>
 80085dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	2301      	movs	r3, #1
 80085e6:	6163      	str	r3, [r4, #20]
 80085e8:	b002      	add	sp, #8
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	ab01      	add	r3, sp, #4
 80085ee:	466a      	mov	r2, sp
 80085f0:	f7ff ffca 	bl	8008588 <__swhatbuf_r>
 80085f4:	9900      	ldr	r1, [sp, #0]
 80085f6:	4605      	mov	r5, r0
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7fe fddf 	bl	80071bc <_malloc_r>
 80085fe:	b948      	cbnz	r0, 8008614 <__smakebuf_r+0x44>
 8008600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d4ef      	bmi.n	80085e8 <__smakebuf_r+0x18>
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	f043 0302 	orr.w	r3, r3, #2
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	e7e3      	b.n	80085dc <__smakebuf_r+0xc>
 8008614:	4b0d      	ldr	r3, [pc, #52]	; (800864c <__smakebuf_r+0x7c>)
 8008616:	62b3      	str	r3, [r6, #40]	; 0x28
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	6020      	str	r0, [r4, #0]
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	81a3      	strh	r3, [r4, #12]
 8008622:	9b00      	ldr	r3, [sp, #0]
 8008624:	6163      	str	r3, [r4, #20]
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	6120      	str	r0, [r4, #16]
 800862a:	b15b      	cbz	r3, 8008644 <__smakebuf_r+0x74>
 800862c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f873 	bl	800871c <_isatty_r>
 8008636:	b128      	cbz	r0, 8008644 <__smakebuf_r+0x74>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	f043 0301 	orr.w	r3, r3, #1
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	431d      	orrs	r5, r3
 8008648:	81a5      	strh	r5, [r4, #12]
 800864a:	e7cd      	b.n	80085e8 <__smakebuf_r+0x18>
 800864c:	080060a9 	.word	0x080060a9

08008650 <memmove>:
 8008650:	4288      	cmp	r0, r1
 8008652:	b510      	push	{r4, lr}
 8008654:	eb01 0302 	add.w	r3, r1, r2
 8008658:	d807      	bhi.n	800866a <memmove+0x1a>
 800865a:	1e42      	subs	r2, r0, #1
 800865c:	4299      	cmp	r1, r3
 800865e:	d00a      	beq.n	8008676 <memmove+0x26>
 8008660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008664:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008668:	e7f8      	b.n	800865c <memmove+0xc>
 800866a:	4283      	cmp	r3, r0
 800866c:	d9f5      	bls.n	800865a <memmove+0xa>
 800866e:	1881      	adds	r1, r0, r2
 8008670:	1ad2      	subs	r2, r2, r3
 8008672:	42d3      	cmn	r3, r2
 8008674:	d100      	bne.n	8008678 <memmove+0x28>
 8008676:	bd10      	pop	{r4, pc}
 8008678:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800867c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008680:	e7f7      	b.n	8008672 <memmove+0x22>

08008682 <__malloc_lock>:
 8008682:	4770      	bx	lr

08008684 <__malloc_unlock>:
 8008684:	4770      	bx	lr

08008686 <_realloc_r>:
 8008686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008688:	4607      	mov	r7, r0
 800868a:	4614      	mov	r4, r2
 800868c:	460e      	mov	r6, r1
 800868e:	b921      	cbnz	r1, 800869a <_realloc_r+0x14>
 8008690:	4611      	mov	r1, r2
 8008692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008696:	f7fe bd91 	b.w	80071bc <_malloc_r>
 800869a:	b922      	cbnz	r2, 80086a6 <_realloc_r+0x20>
 800869c:	f7fe fd40 	bl	8007120 <_free_r>
 80086a0:	4625      	mov	r5, r4
 80086a2:	4628      	mov	r0, r5
 80086a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a6:	f000 f849 	bl	800873c <_malloc_usable_size_r>
 80086aa:	42a0      	cmp	r0, r4
 80086ac:	d20f      	bcs.n	80086ce <_realloc_r+0x48>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7fe fd83 	bl	80071bc <_malloc_r>
 80086b6:	4605      	mov	r5, r0
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0f2      	beq.n	80086a2 <_realloc_r+0x1c>
 80086bc:	4631      	mov	r1, r6
 80086be:	4622      	mov	r2, r4
 80086c0:	f7fe f916 	bl	80068f0 <memcpy>
 80086c4:	4631      	mov	r1, r6
 80086c6:	4638      	mov	r0, r7
 80086c8:	f7fe fd2a 	bl	8007120 <_free_r>
 80086cc:	e7e9      	b.n	80086a2 <_realloc_r+0x1c>
 80086ce:	4635      	mov	r5, r6
 80086d0:	e7e7      	b.n	80086a2 <_realloc_r+0x1c>
	...

080086d4 <_read_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4c07      	ldr	r4, [pc, #28]	; (80086f4 <_read_r+0x20>)
 80086d8:	4605      	mov	r5, r0
 80086da:	4608      	mov	r0, r1
 80086dc:	4611      	mov	r1, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	6022      	str	r2, [r4, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f7f8 fad8 	bl	8000c98 <_read>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_read_r+0x1e>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_read_r+0x1e>
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000288 	.word	0x20000288

080086f8 <_fstat_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4c07      	ldr	r4, [pc, #28]	; (8008718 <_fstat_r+0x20>)
 80086fc:	2300      	movs	r3, #0
 80086fe:	4605      	mov	r5, r0
 8008700:	4608      	mov	r0, r1
 8008702:	4611      	mov	r1, r2
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	f7f8 fcdb 	bl	80010c0 <_fstat>
 800870a:	1c43      	adds	r3, r0, #1
 800870c:	d102      	bne.n	8008714 <_fstat_r+0x1c>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	b103      	cbz	r3, 8008714 <_fstat_r+0x1c>
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	bd38      	pop	{r3, r4, r5, pc}
 8008716:	bf00      	nop
 8008718:	20000288 	.word	0x20000288

0800871c <_isatty_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4c06      	ldr	r4, [pc, #24]	; (8008738 <_isatty_r+0x1c>)
 8008720:	2300      	movs	r3, #0
 8008722:	4605      	mov	r5, r0
 8008724:	4608      	mov	r0, r1
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	f7f8 fcda 	bl	80010e0 <_isatty>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_isatty_r+0x1a>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	b103      	cbz	r3, 8008736 <_isatty_r+0x1a>
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	20000288 	.word	0x20000288

0800873c <_malloc_usable_size_r>:
 800873c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008740:	1f18      	subs	r0, r3, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	bfbc      	itt	lt
 8008746:	580b      	ldrlt	r3, [r1, r0]
 8008748:	18c0      	addlt	r0, r0, r3
 800874a:	4770      	bx	lr

0800874c <_init>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	bf00      	nop
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr

08008758 <_fini>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	bf00      	nop
 800875c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875e:	bc08      	pop	{r3}
 8008760:	469e      	mov	lr, r3
 8008762:	4770      	bx	lr
